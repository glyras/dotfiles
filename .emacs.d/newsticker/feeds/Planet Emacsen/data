;; -*- coding: utf-8 -*-
(("Planet Emacsen" nil nil (19659 25275 214261) feed 0 nil nil ((title nil "Planet Emacsen") (link ((rel . "self") (href . "http://planet.emacsen.org/atom.xml"))) (link ((href . "http://planet.emacsen.org/"))) (id nil "http://planet.emacsen.org/atom.xml") (updated nil "2010-10-29T21:01:20+00:00") (generator ((uri . "http://www.planetplanet.org/")) "http://intertwingly.net/code/venus/") (entry nil (title ((type . "html") (xml:lang . "en")) "Alex Bennée: More on TRAMP") (link ((href . "http://www.bennee.com/~alex/blog/2010/10/29/more-on-tramp/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2059") (updated nil "2010-10-29T11:10:10+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I’ve mentioned <a href=\"http://www.bennee.com/~alex/blog/2010/07/29/the-power-of-tramp/\">TRAMP before</a>. It’s a very handy way of editing remote files. However I’ve been having a few problems with it today.</p>
<p>The most common access method used by TRAMP to access files these days is via <em>ssh</em>. It basically uses a remote terminal session to navigate the remote file system and fetch files back and forth. However it does take a few things for granted and one of those is the shell environment on the far end. For most *nix users this will be <a href=\"http://en.wikipedia.org/wiki/Bash_(Unix_shell)\">Bash</a>. Long time command line hackers like myself usually have a rather <a href=\"http://github.com/stsquad/dotfiles\">heavily customised</a> shell environment which can cause problems for TRAMP, especially if you pull tricks with customising the command prompt. In an effort to handle this a little better I <a href=\"http://github.com/stsquad/dotfiles/commit/126f32ff538214e3de4b40993a3406a15379ec45\">modified</a> my .bashrc to treat ‘dumb’ terminals as non-interactive. It works but it still seems a little hacky. I would welcome any better suggestions for detecting TRAMP sessions my start-up files.</p>
<p>I was still experiencing a problem navigating to one of the directories on my remote machine. Whatever I did when I got to the root of my code tree I couldn’t navigate into the correct directory. The prompt would only offer me an old (since moved away) directory. Tricks like opening <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html\">dired mode</a> and navigating in would cause the session to spin consuming 100% cpu. In the end I tracked it down to <a href=\"http://www.emacswiki.org/emacs/InteractivelyDoThings\">IDO</a> and the old directory existing in my ~/.ido.last file. Once removed and emacs restarted the problem went away. I’m hoping this is just a peculiarity of the interaction between ido and TRAMP but is was certainly annoying.</p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog"))) (entry nil (title ((type . "html")) "Johan Andersson: ruby-end, automatically close ruby blocks") (link ((href . "http://blog.tuxicity.se/elisp/emacs/ruby/2010/10/29/ruby-end-automatically-close-ruby-blocks.html"))) (id nil "http://blog.tuxicity.se/elisp/emacs/ruby/2010/10/29/ruby-end-automatically-close-ruby-blocks") (updated nil "2010-10-29T00:00:00+00:00") (content ((type . "html")) "<p>In Ruby all blocks are closed with the <strong>end</strong> keyword. The Emacs mode
<strong>ruby-electric</strong> automatically inserts <strong>end</strong> when typing a block
keyword, followed by a space.</p>

<p>This is a nice feature, but unfortunately ruby-electric comes with
some other stuff, such as inserting <strong>{}</strong> and placing the cursor
between, when pressing <strong>{</strong>.</p>

<p>Since I already have that functionality from
<a href=\"https://github.com/rejeep/enclose\">enclose-mode</a>, I don't want to use
ruby-electric, so I created a new mode <strong>ruby-end</strong> that does exactly
one thing and that is closing blocks.</p>

<p>The closing block functionality is a very simple task so creating a
function seemed best at first, but I decided to create a minor mode
<strong>ruby-end</strong>, because it's easier to test
(<a href=\"https://github.com/rejeep/ruby-end/blob/master/features/ruby-end.feature\">https://github.com/rejeep/ruby-end/blob/master/features/ruby-end.feature</a>)
and you can turn it off.</p>

<p>Check it out at Github: <a href=\"https://github.com/rejeep/ruby-end\">https://github.com/rejeep/ruby-end</a></p>") (author nil (name nil "Johan Andersson") (uri nil "http://blog.tuxicity.se/")) (source nil (title ((type . "html")) "Tuxicity - Emacs") (link ((rel . "self") (href . "http://blog.tuxicity.se/atom-emacs.xml"))) (id nil "http://blog.tuxicity.se/"))) (entry nil (title ((type . "html")) "Andrew Gwozdziewycz: ant.el: A Code Walkthrough") (link ((href . "http://sigusr2.net/2010/Oct/29/ant-el-a-code-walkthrough.html"))) (id nil "md5:190c53e1eb58b5488ccc339134ad7766") (updated nil "2010-10-29T00:00:00+00:00") (content ((type . "html")) "<p><span class=\"preamble\">In April of last year, I blogged about <a href=\"http://sigusr2.net/2009/Apr/30/the-power-that-is-gnu-emacs.html\">how powerful Emacs</a> is, and shared my enlightenment story.</span></p>

<p>Today, I'm even closer to Emacs than I was before, having an extra year and a half of experience than I did then. My daily interactions with Emacs are still very much in the same vain—I am still a programmer after all, but I've also discovered some more frustrations which were fairly easy to rectify.</p>

<p>In July of this year, I started <a href=\"http://www.meetup.com/\">a new job</a><sup><a href=\"http://sigusr2.net/tags/emacs.xml#hiring-1\">[1]</a></sup>. My role at Meetup has been different in many regards than my previous jobs. It's the first role I've had since entering into the industry that someone doesn't see the output of my code. In fact, if they do see the output of my code, I've sort of failed.<sup><a href=\"http://sigusr2.net/tags/emacs.xml#output-2\">[2]</a></sup> It also represents the first time that I've primarily used a compiled language (outside of college), targetted the <a href=\"http://en.wikipedia.org/wiki/JVM\">JVM</a> and used <a href=\"http://java.sun.com/\">Java</a> for the bulk of my work.</p>

<p>Naturally, Emacs could help me. <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html\">Compilation Mode</a>, for instance allows you to do <code class=\"inline\">M-x compile</code> to run <a href=\"http://en.wikipedia.org/wiki/Make_(software)\">make</a>, or <a href=\"http://ant.apache.org/\">ant</a> (with <code class=\"inline\">-emacs</code>) or some other build tool that generates compilation mode compatible output, that the mode will then mark up and allow you to easily jump to places the compiler thinks<sup><a href=\"http://sigusr2.net/tags/emacs.xml#errors-3\">[3]</a></sup> are errors.</p>

<p>Compilation Mode by default is fine, but complicated Java source trees are normally nested quite complexly and ant isn't the greatest at locating a suitable build file. What I needed were some interactive functions that I could use to run ant properly, in Compilation Mode using the project's build file. What I <a href=\"http://github.com/apgwoz/ant-el\">came up with</a> after a few hours, works fairly well.</p>

<p>Basically, instead of <code class=\"inline\">M-x compile</code>, I type <code class=\"inline\">M-x ant</code>, or <code class=\"inline\">M-x ant-compile</code>, or <code class=\"inline\">M-x ant</code> and then TAB complete all the available build targets. This allows me to save some typing, and save some precious brain cells, since I don't have to remember all 40 build targets.</p>

<p>The code is fairly simple, and I think it's a great candidate for a walk through on how to solve your own problems using Emacs Lisp, so I'd like to go through it here.</p>

<p>The code starts out simply enough:</p>

<pre><code class=\"elisp\">(defvar ant-last-task \"compile\")
(defvar ant-build-file-name \"build.xml\")
(defvar ant-command \"ant -emacs\")
(defvar *ant-tasks-cache* '())
(defvar *ant-tasks-command* \"grep -e '&lt;target.*name=\\\"[^\\-][^\\\"]*.*$'\")
(defvar ant-tasks-default '(\"compile\" \"test\" \"clean\"))</code></pre>

<p>We just define a bunch of global variables that can be overridden by a user if they need to be. We do however create <code class=\"inline\">*ant-tasks-cache*</code> and <code class=\"inline\">*ant-tasks-command*</code> which are meant to be internal state. In elisp, and other Lisps, wrapping * around a variable normally indicates that the variable is special in someway, here it means it's a global and shouldn't be modified outside of the functions defined within.</p>

<p>Next we have a helper function, <code class=\"inline\">ant-find-tasks</code>, which, given a directory, issues a shell command <code class=\"inline\">*ant-tasks-command*</code> that is used to extract the lines from the ant build file that declare targets:</p>

<pre><code class=\"elisp\">(defun ant-find-tasks (directory)
  (let ((output (shell-command-to-string (concat *ant-tasks-command* \" \"
                                                 directory \"/\"
                                                 ant-build-file-name))))
    (if (&gt; (length output) 0)
        (mapcar '(lambda (x) (replace-regexp-in-string \".*&lt;target.*name=\\\"\\\\([^\\-][^\\\"]*\\\\).*\" \"\\\\1\" x)) 
                (split-string output \"[\\n]\"))
      nil)))</code></pre>

<p>Essentially, we first save the output of the shell command that gets built up to the variable <code class=\"inline\">output</code>. If the length of <code class=\"inline\">output</code> is greater than 0, we split the output (<code class=\"inline\">split-string</code>) into individual lines, and iteratively replace the junk in the line with just the name of the target (<code class=\"inline\">replace-regexp-in-string</code>). The only non-obvious thing in here is <code class=\"inline\">mapcar</code> which is a fancy way of transforming a list into another list via the function passed as the first argument.</p>

<p>That gives us all the tasks defined in the build file—well for most cases anyway. It doesn't handle all possible, valid build.xml files, but should work if the <code class=\"inline\">target</code>'s declaration and name attribute appear on the same line.</p>

<p>When we need a list of tasks for a project, we call <code class=\"inline\">ant-tasks</code>. This function really just caches the returned value of <code class=\"inline\">ant-find-tasks</code> into the global variable <code class=\"inline\">*ant-tasks-cache*</code> for the current project:</p>

<pre><code class=\"elisp\">(defun ant-tasks (directory)
  (let ((tasks (assoc-string directory *ant-tasks-cache*)))
    (or tasks
        (progn 
          (let ((newtasks (or (ant-find-tasks directory) ant-tasks-default)))
            (setq *ant-tasks-cache*
                  (cons (cons directory newtasks) *ant-tasks-cache*))
          newtasks)))))</code></pre>

<p>The only interesting thing about the above code is the use of <code class=\"inline\">or</code>. In Lisp, <code class=\"inline\">or</code> short circuits and returns the first truthy value—it doesn't convert it to a boolean, so it can easily be used to select the first truthy value from a list of values. That's what's happening there.</p>

<p>I mentioned that I wanted TAB completion on task names so as to not clutter my brain matter with useless task names:</p>

<pre><code class=\"elisp\">(defun ant-get-task (directory)
  (let ((task (completing-read-multiple (concat \"Task (default): \") 
                                        (ant-tasks directory))))
    (if (&gt; (length task) 0)
        (mapconcat 'identity task \" \")
      \"\")))</code></pre>

<p>Well, here it is. Emacs has built in completion via the <code class=\"inline\">completing-read</code> function. Here, we want the ability to issue one or more tasks, so we use <code class=\"inline\">completing-read-multiple</code> to get the job done. Notice we're calling our function from above, <code class=\"inline\">ant-tasks</code>.</p>

<p>You'll notice <code class=\"inline\">mapconcat</code> above. It's like <code class=\"inline\">mapcar</code> from above, in that it takes a list of things and transforms them, but instead of returning a new list, it concatenates the elements into a string using the last argument (here just a space) as a separator. <code class=\"inline\">completing-read-multiple</code> returns to us a list, which we need to turn into a string with spaces between the targets in order to issue the build command.</p>

<pre><code class=\"elisp\">(defun ant-find-root (indicator)
  (let ((cwd default-directory))
    (while (and (not (file-exists-p (concat cwd indicator)))
                (not (string-equal (expand-file-name cwd) \"/\")))
      (setq cwd (concat cwd \"../\")))
    (if (file-exists-p (concat cwd indicator))
        (expand-file-name cwd)
      nil)))</code></pre>

<p>The above function locates the base directory of the project, given the current file being edited. It just loops up the file system looking for the first directory it finds that has a build file in it. When I originally wrote this function, I didn't realize that Emacs already had this functionality built into it with the function <code class=\"inline\">locate-dominating-file</code>.<sup><a href=\"http://sigusr2.net/tags/emacs.xml#dominating-4\">[4]</a></sup>

</p><p><code class=\"inline\">ant-kill-cache</code>,</p>

<pre><code class=\"elisp\">(defun ant-kill-cache ()
  (interactive)
  (setq *ant-tasks-cache* '()))</code></pre>

<p>does exactly what it says it does. It destroys the cache that is built up from <code class=\"inline\">ant-tasks</code>.

</p><p>The main entry point, <code class=\"inline\">ant</code>, is fairly trivial as well. It sets the variable <code class=\"inline\">default-directory</code>, which is Emacs' current working directory, to the project directory, reads a task from the reader (if being called interactively) and calls <code class=\"inline\">compile</code>, which is the main entry point into Compilation Mode.</p>

<pre><code class=\"elisp\">(defun ant (&amp;optional task)
  \"Run ant `task` in project root directory.\"
  (interactive)
  (let ((default-directory (ant-find-root ant-build-file-name)))
    (if default-directory
        (let ((task (or task (ant-get-task default-directory))))
          (setq ant-last-task task)
          (compile (concat ant-command \" \" task)))
      (message \"Couldn't find an ant project.\"))))</code></pre>

<p>In the first code block, there was a variable, <code class=\"inline\">ant-last-task</code>, defined that is used above to store the last target run. After a target is given, it's saved off in there.</p>

<pre><code class=\"elisp\">(defun ant-last ()
  \"Run the last ant task in project\"
  (interactive)
  (ant (or ant-last-task \"\")))

(defun ant-compile ()
  (interactive)
  (ant \"compile\"))

(defun ant-clean ()
  (interactive)
  (ant \"clean\"))

(defun ant-test ()
  (interactive)
  (ant \"test\"))</code></pre>

<p>The rest of the code above, just defines some convenient, interactive commands for common targets. <code class=\"inline\">M-x ant-compile</code> will just issue the compile target, likewise for <code class=\"inline\">ant-clean</code>. The only moderately interesting interactive command here is <code class=\"inline\">ant-last</code> which reuses the variable <code class=\"inline\">ant-last-task</code> from above to redo the last compilation.</p>

<p>It doesn't feel like much code, and in all reality it's not. However, it has saved me quite a bit of time, as I don't have to go running to a terminal (either switching buffers, or switching windows entirely) in order to issue an ant task. I just do something I've grown very accustomed to—I issue another Emacs command, and let Emacs take care of it for me.</p>

<ol class=\"footnotes\">
    <li id=\"hiring-1\">We're hiring for <a href=\"http://www.meetup.com/jobs\">most positions</a>.</li>
    <li id=\"output-2\">Most of what I do is related to our product's infrastructure—not interaction, and not engineering new features. My work would be visible if some error leaked to your browser, and that'd probably be bad.</li> 
    <li id=\"errors-3\">It's fairly difficult to trick the compiler, but in Java, for instance, you can write type-safe code using Generics that it can't prove is safe. If you do that though, you should make use the SuppressWarnings annotation to tell the compiler it's OK.</li>
    <li id=\"dominating-4\">Actually, I wasn't surprised that Emacs actually had the functionality, just that the name is non-trivial. I gave up looking for it after a couple of minutes and just rolled my own. I'll replace it in a future version, but the existing code works for now.</li>
</ol>") (author nil (name nil "Andrew Gwozdziewycz") (uri nil "http://sigusr2.net/")) (source nil (title ((type . "html")) "SIGUSR2: tagged emacs") (link ((rel . "self") (href . "http://sigusr2.net/tags/emacs.xml"))) (id nil "md5:ec2c8804a8dac6a866e1a43cfce32fc1"))) (entry nil (title ((type . "html")) "Matt Harrison: Python and emacs (7): Buffer navigation (point history)") (link ((href . "http://panela.blog-city.com/python_and_emacs_7_buffer_navigation_point_history.htm"))) (id nil "http://panela.blog-city.com/python_and_emacs_7_buffer_navigation_point_history.htm") (updated nil "2010-10-28T16:51:00+00:00") (content ((type . "html")) "<p>(Not really Python specific, but useful when navigating/editing Python files.)</p>
<p>Emacs has a notion of current location known as the \"point\".  A while back I wanted a way of keeping track of point history (similar to browser history), so if say I jumped to another buffer and location I could come back later.  I figured this would be an existing feature, just hidden in the bowels of emacs somewhere.  I ended up finding half a solution in <a href=\"http://www.emacswiki.org/emacs/JohnConnors\">John Connors' emacswiki page</a>.  I say half because I wanted the forward buttons (to use my browser metaphor), which he didn't have.  Alas, <a href=\"http://github.com/mattharrison/point-stack\">point-stack</a> is now on github.</p>
<p>Here's a simple screencast:</p>
<center>
<img src=\"http://files.blog-city.com/files/F05/96843/p/f/screenie.gif\" title=\"screenie.gif\" />
</center>
<p>With point stack, I can push my current location to a stack with f5.  (I can push multiple locations too).  To jump back I hit f6 (multiple times if needed).  To go back forward, f7.</p>") (author nil (name nil "Matt") (uri nil "http://panela.blog-city.com/")) (source nil (title ((type . "html")) "emacs @ panela.blog-city.com") (subtitle ((type . "html")) "(emacs) Discussion of python, open source, linux, wiimotes, development, ajax, etc.") (link ((rel . "self") (href . "http://panela.blog-city.com/read/emacs.rss"))) (id nil "http://panela.blog-city.com/") (rights ((type . "html")) "Copyright 2010 panela.blog-city.com"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Gabriel Saldaña: Good bye Shyam Karanat") (link ((href . "http://blog.nethazard.net/good-bye-shyam-karanat/#utm_source=feed&utm_medium=feed&utm_campaign=feed"))) (id nil "http://blog.nethazard.net/?p=714") (updated nil "2010-10-27T06:16:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p><a href=\"http://www.flickr.com/photos/niyam/2399712870/\" title=\"Shyam Karanattu by niyam bhushan, on Flickr\"><img alt=\"Shyam Karanattu\" height=\"180\" src=\"http://farm4.static.flickr.com/3126/2399712870_246f540dfd_m.jpg\" width=\"240\" /></a></p>

<p>This weekend I recieved the sad news that Shyam Karanat passed away.</p>

<p>Although we never met in person, he was a good friend. We mostly talked about <a href=\"http://blog.nethazard.net/identica-mode-for-emacs/#utm_source=feed&amp;utm_medium=feed&amp;utm_campaign=feed\">Emacs Identica-mode</a>, where he made several contributions. Actually, his patches to use url.el were key to releasing the 1.0 version so Identica-mode wouldn’t freeze Emacs anymore while waiting for a server response.</p>

<p>A very smart guy, who also contributed to free software in India a lot (a fact I didn’t know until now). More details on his contributions and his passing in this <a href=\"http://mm.gnu.org.in/pipermail/fsf-friends/2010-September/006587.html\">FSF friends email</a>.</p>

<p>Its very sad news, and he will be missed by his friends and collegues.</p>

<div class=\"sociable\">
<div class=\"sociable_tagline\">
<strong>Share:</strong>
</div>
<ul>
	<li class=\"sociablefirst\"><a href=\"http://digg.com/submit?phase=2&amp;url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;bodytext=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"Digg\"><img alt=\"Digg\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/digg.png\" title=\"Digg\" /></a></li>
	<li><a href=\"http://delicious.com/post?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;notes=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"del.icio.us\"><img alt=\"del.icio.us\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/delicious.png\" title=\"del.icio.us\" /></a></li>
	<li><a href=\"http://technorati.com/faves?add=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Technorati\"><img alt=\"Technorati\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/technorati.png\" title=\"Technorati\" /></a></li>
	<li><a href=\"http://reddit.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/reddit.png\" title=\"Reddit\" /></a></li>
	<li><a href=\"http://www.stumbleupon.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"StumbleUpon\"><img alt=\"StumbleUpon\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/stumbleupon.png\" title=\"StumbleUpon\" /></a></li>
	<li><a href=\"http://www.facebook.com/share.php?u=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;t=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/facebook.png\" title=\"Facebook\" /></a></li>
	<li><a href=\"http://meneame.net/submit.php?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Meneame\"><img alt=\"Meneame\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/meneame.png\" title=\"Meneame\" /></a></li>
	<li><a href=\"http://www.friendfeed.com/share?title=Good%20bye%20Shyam%20Karanat&amp;link=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"FriendFeed\"><img alt=\"FriendFeed\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/friendfeed.png\" title=\"FriendFeed\" /></a></li>
	<li><a href=\"http://identi.ca/notice/new?status_textarea=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Identi.ca\"><img alt=\"Identi.ca\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/identica.png\" title=\"Identi.ca\" /></a></li>
	<li><a href=\"http://twitter.com/home?status=Good%20bye%20Shyam%20Karanat%20-%20http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/twitter.png\" title=\"Twitter\" /></a></li>
	<li class=\"sociablelast\"><a href=\"http://www.google.com/bookmarks/mark?op=edit&amp;bkmk=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;annotation=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"Google Bookmarks\"><img alt=\"Google Bookmarks\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/googlebookmark.png\" title=\"Google Bookmarks\" /></a></li>
</ul>
</div>
<img alt=\"\" src=\"http://blog.nethazard.net/?ak_action=api_record_view&amp;id=714&amp;type=feed\" />

<p>Related posts:</p><ol><li><a href=\"http://blog.nethazard.net/identica-mode-for-emacs-update-support-for-any-laconica-server/\" rel=\"bookmark\" title=\"Permanent Link: Identica mode for Emacs update: support for any Laconica server\">Identica mode for Emacs update: support for any Laconica server</a></li>
<li><a href=\"http://blog.nethazard.net/emacs-identica-mode-with-multiple-timelines-and-direct-messages/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode with multiple timelines and direct messages\">Emacs identica-mode with multiple timelines and direct messages</a></li>
<li><a href=\"http://blog.nethazard.net/5-ways-to-promote-identi-ca-and-open-microblogging-over-twitter/\" rel=\"bookmark\" title=\"Permanent Link: 5 ways to promote Identi.ca and Open Microblogging over Twitter\">5 ways to promote Identi.ca and Open Microblogging over Twitter</a></li>
</ol><p></p>") (author nil (name nil "Gabriel Saldaña") (uri nil "http://blog.nethazard.net")) (source nil (title ((type . "html")) "Nethazard.net » Emacs") (subtitle ((type . "html")) "Gabriel Saldana's blog about web development, free software and other lifestyle topics") (link ((rel . "self") (href . "http://blog.nethazard.net/category/emacs/feed/"))) (id nil "http://blog.nethazard.net"))) (entry nil (title ((type . "html")) "Yoni Rabkin Katzenell: rtliberation.py revamp: embrace the breakage") (link ((href . "http://yrk.livejournal.com/284984.html"))) (id nil "urn:lj:livejournal.com:atom1:yrk:284984") (updated nil "2010-10-26T02:48:14+00:00") (content ((type . "html")) "I've updated rtliberation.py in two ways: First of all I took the opportunity to make the script more \"Pythonic\". Let me translate that for you: I had fun re-writing parts which worked fine into code I don't really understand which will now break in ways I don't know how to debug. Second is that the script will wait and retry the command a set number of times with a set delay until finally giving up; which is useful for gliding over server hiccups.<br /><br />Read below if you don't know what is rtliberation.py:<br /><br /><i>rtliberation.py</i> is a short Python script which uses the <a href=\"http://wiki.bestpractical.com/view/CLI\">RT CLI</a> to download tickets from RT to a local ticket flatfile database. The local flatfile database is just a hierarchy of directories containing the year, month and finally <i>.txt</i> files named after the ticket ID number.<br /><br />It can also list all of the tickets which are on-disk but were deleted from the server. This is useful if you delete spam and such _after_ it reaches RT.<br /><br />You can <b>git clone <a href=\"http://yrk.nfshost.com/repos/rtliberation/\">http://yrk.nfshost.com/repos/rtliberation/</a></b> to get a copy of rtliberation.py.<br /><br />Once again: no relation to <i>rt-liberation.el</i>, my GNU/Emacs interface to RT.") (author nil (name nil "yrk") (uri nil "http://yrk.livejournal.com/")) (source nil (title ((type . "html")) "Talk is talk, kill is kill") (subtitle ((type . "html")) "The online journal of yrk") (link ((rel . "self") (href . "http://yrk.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:yrk"))) (entry nil (title ((type . "html")) "Trey Jackson: Emacs Tip #38: Automatically diff binary files using hexl-mode") (link ((href . "http://trey-jackson.blogspot.com/2010/10/emacs-tip-38-automatically-diff-binary.html"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968.post-1498412805827285430") (updated nil "2010-10-25T03:12:45+00:00") (content ((type . "html")) "I saw a question on Stack Overflow which referred to a non-free (as in beer) file comparison application.  My first thought was, \"people pay for this?\"  Sure enough, there are quite a few non-free file comparison tools.  Which leads to the question, what do they offer that I'm not getting in Emacs (using ediff).  From the table on Wikipedia, it appears not too much.  I updated a couple of fields") (author nil (name nil "BFW") (email nil "noreply@blogger.com") (uri nil "http://trey-jackson.blogspot.com/")) (source nil (title ((type . "html")) "Life Is Too Short For Bad Code") (subtitle ((type . "html")) "Random musings about programming, software, technical interviews, and of course Emacs - a tip every week for new and experienced users.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/2304251215826746968/posts/default"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968"))) (entry nil (title ((type . "html")) "Emacs-fu: auto-complete-mode") (link ((href . "http://emacs-fu.blogspot.com/2010/10/auto-complete-mode.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-3394448227791083888") (updated nil "2010-10-24T15:07:55+00:00") (content ((type . "html")) "<p>Recently, we <a href=\"http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html\">discussed CEDET</a> in the interview with Eric Ludlam. CEDET has a deep
understanding of the source code, and assists the development process by
exploiting that knowledge. For example by drawing class diagrams (<a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a>) or
providing auto-completion for function names and parameters.
</p>
<p>
Currently, however, CEDET is also be a bit hard to set up effectively, and may
also not support your programming language yet. Therefore, it's still useful to
look at some other packages that can substitute (part of) the functionality.
</p>
<p>
For me, <a href=\"http://cx4a.org/software/auto-complete/\">auto-complete-mode</a> has been very useful for that. It's not as fancy as
CEDET in the sense that it does not really <i>understand</i> the code – but in
practice I found it to work quite well for both C/C++, Elisp and shell scripts.
It can even display the docstrings of functions. And when editing shell-scripts,
it can complete path names as you are editing the scripts; very nice.
</p>
<p>
To install, follow the <a href=\"http://cx4a.org/software/auto-complete/manual.html#Installation\">instructions</a>. Then, in your <code>.emacs</code>, have something
like:
</p>


<pre class=\"src src-elisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">auto-complete-config</span> nil 'noerror) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't break if not installed </span>
(add-to-list 'ac-dictionary-directories <span class=\"org-string\">\"~/.emacs.d/ac-dict\"</span>)
  (<span class=\"org-keyword\">setq</span> ac-comphist-file  <span class=\"org-string\">\"~/.emacs.d/ac-comphist.dat\"</span>)
  (ac-config-default))
</pre>



<p>
After that, <code>M-x auto-complete-mode</code> to start using it. Alternatively, there's a
<a href=\"http://www.youtube.com/watch?v=rGVVnDxwJYE\">YouTube-video</a> explaining how to install and use <code>auto-complete-mode</code>;
recommended. In any case, it is <a href=\"http://cx4a.org/software/auto-complete/manual.html\">fully documented</a>.
</p>
<p>
<code>auto-complete-mode</code> uses a configurable set of <i>sources</i> from which it takes it
knowledge about what can be completed. For example, when writing in <code>org-mode</code>,
it takes its input from
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-abbrev ac-source-dictionary
 ac-source-words-in-same-mode-buffers)
</pre>


<p>
while in a <code>c-mode</code> buffer it is (in my case):
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-yasnippet ac-source-gtags ac-source-abbrev
ac-source-dictionary ac-source-words-in-same-mode-buffers)
</pre>


<p>
You can customize this, and (for the more ambitious), it's possible to add your
own sources as well.
</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-3394448227791083888?l=emacs-fu.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': emacs-muse-slidy") (link ((href . "http://www.flickr.com/photos/arciniegas/5108022392/"))) (id nil "tag:flickr.com,2004:/photo/5108022392") (updated nil "2010-10-23T17:05:00+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/arciniegas/\">Fabio Arciniegas</a> posted a video:</p>
	
<p><a href=\"http://www.flickr.com/photos/arciniegas/5108022392/\" title=\"emacs-muse-slidy\"><img alt=\"emacs-muse-slidy\" height=\"180\" src=\"http://farm2.static.flickr.com/1141/5108022392_3eb3bd0f60_m.jpg\" width=\"240\" /></a></p>

<p><a href=\"http://code.google.com/p/muse-html-slidy/\" rel=\"nofollow\">code.google.com/p/muse-html-slidy/</a><br />
<br />
A quick way to replace PPT for emacs users. The user writes simple text files with a minimal wiki-like format and the output is a full presentation.<br />
<br />
The project relies on emacs muse for parsing and html-slidy for slide functionality. It provides a number of useful features like the embedding of local images inside the xhtml file.</p>") (author nil (name nil "Fabio Arciniegas") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "Matt Keller: Announce: mk-project 1.5") (link ((href . "http://www.littleredbat.net/mk/blog/story/86/"))) (id nil "urn:uuid:02328007-4896-3C9E-8139-DFB5B3DD3D31") (updated nil "2010-10-23T11:53:48+00:00") (content ((type . "html")) "<p>I've just pushed release 1.5.1 of mk-project to <a href=\"http://github.com/mattkeller/mk-project/tree/1.5.1\">github</a> and <a href=\"http://www.emacswiki.org/emacs/mk-project.el\">the emacs wiki</a>. The changes since release 1.4 include ideas and code contributed by Andreas Raster. Here's a summary of the improvements:</p>

<ul>
<li>Previously, a project's compile command could only be a string to be interpreted as a shell command (think \"make\"). Now the compile command can also be a Emacs lisp function name. Flexibility is good.</li>
<li>The project-status command now prints the project status to buffer *project-status* instead of *Messages*.</li>
<li>Several commands now have optional arguments which allow them to be called programmatically as well as interactively. The affected commands are project-load, project-grep, and project-ack. So now you can call <code>(project-load \"my-project\")</code> or <code>(project-grep \"TODO\")</code> from your own code.</li>
<li>The code will now ignore \"_darcs\" directories if you set the vcs type to 'darcs.</li>
<li>Finally, mk-project now has a menu!</li>
</ul>

<p><img alt=\"mk-project's menu screenshot\" src=\"http://www.littleredbat.net/mk/files/mk-project-menu.png\" /></p>

<p>Enjoy!</p>") (author nil (name nil "Matt Keller") (uri nil "http://www.littleredbat.net/mk/blog/category/emacs/")) (source nil (title ((type . "html")) "littleredbat.net/mk: blog (emacs)") (link ((rel . "self") (href . "http://www.littleredbat.net/mk/blog/atom-emacs.xml"))) (id nil "urn:uuid:1CA2AE66-F282-3C75-813F-B51A729C8B6E") (rights ((type . "html")) "http://creativecommons.org/licenses/by/2.5/"))) (entry nil (title ((type . "html")) "Yoni Rabkin Katzenell: an opening!") (link ((href . "http://yrk.livejournal.com/284901.html"))) (id nil "urn:lj:livejournal.com:atom1:yrk:284901") (updated nil "2010-10-23T03:10:50+00:00") (content ((type . "html")) "I wrote my sole Python program, rt-liberation.py, back at the end of 2008 and it has been humming quietly on an FSF server ever since. But now that I received a feature request I have the excuse to do some more Python. I'm grateful for the opportunity.<br /><br />So I got a copy of <a href=\"http://www.logilab.org/857\">pylint</a> and started to follow <a href=\"http://www.emacswiki.org/emacs/PythonProgrammingInEmacs\">the instructions on the Python Programming page</a>... which got me nowhere. Especially since I remembered that I don't like flymake any more than I'd like someone standing next to me and tapping my shoulder every other second while I try to write.<br /><br />Then I found that pylint comes with an <code>elisp</code> directory which includes <code>pylint.el</code>. You have to add a <code>(provide 'pylint)</code> to the end of the file if you want to load it in the standard manner but other than that it allows me to hammer out <b>M-x pylint</b> and get an endless buffer of errors, comments and warnings.<br /><br />I should add a special mode to pylint.el: After outputting over 300 lines of complaints it should add one at the end: \"...you don't really know Python, do you...\"") (author nil (name nil "yrk") (uri nil "http://yrk.livejournal.com/")) (source nil (title ((type . "html")) "Talk is talk, kill is kill") (subtitle ((type . "html")) "The online journal of yrk") (link ((rel . "self") (href . "http://yrk.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:yrk"))) (entry nil (title ((type . "html")) "Matt Harrison: Proof that Python and Academia mesh") (link ((href . "http://panela.blog-city.com/proof_that_python_and_academia_mesh.htm"))) (id nil "http://panela.blog-city.com/proof_that_python_and_academia_mesh.htm") (updated nil "2010-10-22T04:04:00+00:00") (content ((type . "html")) "<center><img src=\"http://files.blog-city.com/files/F05/96843/p/f/greek.png\" /></center>
<p><a href=\"http://github.com/ehamberg/vim-cute-python\">A link on reddit python</a> led to fun <a href=\"http://github.com/mattharrison/pretty-mode\">tweaking of emacs</a>.</p>") (author nil (name nil "Matt") (uri nil "http://panela.blog-city.com/")) (source nil (title ((type . "html")) "emacs @ panela.blog-city.com") (subtitle ((type . "html")) "(emacs) Discussion of python, open source, linux, wiimotes, development, ajax, etc.") (link ((rel . "self") (href . "http://panela.blog-city.com/read/emacs.rss"))) (id nil "http://panela.blog-city.com/") (rights ((type . "html")) "Copyright 2010 panela.blog-city.com"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Ruslan Spivak: Swapping lines") (link ((href . "http://ruslanspivak.com/2010/10/21/swapping-lines/"))) (id nil "http://ruslanspivak.com/?p=486") (updated nil "2010-10-22T02:05:53+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Being able to swap lines in Emacs with <strong><em>C-x C-t</em></strong> comes in handy when I edit Python code and want to prettify some imports:</p>
<pre style=\"color: #f8f8f8; background-color: #0c1021; font-size: 8pt;\"><span style=\"color: #fbde2d;\">import</span> sys
<span style=\"color: #fbde2d;\">import</span> os</pre>
<p>I move cursor to a line that I want to swap, in this case <strong><em>import os</em></strong>, and press <strong><em>C-x C-t</em></strong> which exchanges the current line and a previous line:</p>
<pre style=\"color: #f8f8f8; background-color: #0c1021; font-size: 8pt;\"><span style=\"color: #fbde2d;\">import</span> os
<span style=\"color: #fbde2d;\">import</span> sys</pre>
<p>A very basic and simple operation. And while the same can be accomplished with cutting and pasting – swapping is faster in this case.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ruslanspivak.wordpress.com/486/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ruslanspivak.com&amp;blog=1522719&amp;post=486&amp;subd=ruslanspivak&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "Ruslan Spivak") (uri nil "http://ruslanspivak.com")) (source nil (title ((type . "html")) "Ruslan's Blog » emacs") (subtitle ((type . "html")) "Musings on dynamic languages and more than that") (link ((rel . "self") (href . "http://ruslanspivak.com/category/emacs/feed/"))) (id nil "http://ruslanspivak.com"))) (entry nil (title ((type . "html")) "Bryan Murdock: My .emacs is now in Mercurial") (link ((href . "http://bryan-murdock.blogspot.com/2010/10/my-emacs-is-now-in-mercurial.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-6340277618022645653") (updated nil "2010-10-21T21:45:19+00:00") (content ((type . "html")) "<p>A while ago I decided to start maintaining my .emacs file under revision control.  I picked git because it seemed like the cool thing to do.  I put it <a href=\"http://gitorious.org/bryan-s-dot-emacs\">on gitorious</a> so that I could easily sync it with my home and work machines, and it was public in the off chance that it might help out some other emacs user.  Today I <a href=\"http://stackoverflow.com/questions/491554/how-do-i-convert-a-git-repository-to-mercurial\">converted</a> it from git to mercurial, because for some reason</p>

<pre><code>hg incoming</code></pre>

<p>is more intuitive and easier for me to remember than</p>

<pre><code>git fetch &amp;&amp; git log ..origin/master</code></pre><p></p>

<p>Maybe I'm weird that way.  Anyway, the new repo is <a href=\"http://bitbucket.org/krupan/bryans-dot-emacs/\">on bitbucket</a>.  That is all.</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3669809752172683097-6340277618022645653?l=bryan-murdock.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097"))) (entry nil (title ((type . "html")) "Bryan Murdock: How to Disable Ubuntu command-not-found") (link ((href . "http://bryan-murdock.blogspot.com/2010/10/how-to-disable-ubuntu-command-not-found.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-179516258916309439") (updated nil "2010-10-21T15:46:55+00:00") (content ((type . "html")) "<p>Ubuntu, in all its helpfulness, has a feature that tries to guess what you mean when you type commands at the bash prompt.  If you type a command that's found, it runs it, of course.  If you type a command that it can't find, it takes a moment to search available packages for install and suggest what you might do to make that command available.  It sometimes looks like this:

</p><pre><code>$ foo
No command 'foo' found, did you mean:
 Command 'xoo' from package 'xoo' (universe)
 Command 'fop' from package 'fop' (universe)
 Command 'fox' from package 'objcryst-fox' (universe)
 Command 'zoo' from package 'zoo' (universe)
 Command 'goo' from package 'goo' (universe)
foo: command not found
</code></pre>

It's great when you have a new system and you haven't yet installed everything you need.  Type <code>emacs</code> before emacs has been installed, and it will helpfully tell you the exact command to use to install it.  After a while, though, you have all the packages you need, and the only time you see this feature in action is when you mistype something.  When this happens to me, all the package suggestions and apt-get commands are just annoying.  This, for example, is not helpful:

<pre><code>$ les foo.txt
The program 'les' is currently not installed.  You can install it by typing:
sudo apt-get install atm-tools
les: command not found
</code></pre>

I'd much rather see this quick, short message so that I can get on with fixing my mistake by adding another 's':

<pre><code>$ les foo.txt
-bash: les: command not found
</code></pre>

I finally found <a href=\"http://techthrob.com/2010/06/04/how-to-disable-command-not-found-in-ubuntu/comment-page-1/#comment-12448\">how to fix it</a>.  Put this line in your <code>.bashrc</code>:

<pre><code>unset command_not_found_handle</code></pre>

Much better.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3669809752172683097-179516258916309439?l=bryan-murdock.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Vinh Nguyen: Emacs’ universal/prefix argument") (link ((href . "http://blog.nguyenvq.com/2010/10/20/emacs-universalprefix-argument/"))) (id nil "http://blog.nguyenvq.com/?p=749") (updated nil "2010-10-20T20:53:38+00:00") (content ((type . "html") (xml:lang . "en")) "<div class=\"topsy_widget_data topsy_theme_jade\" style=\"float: right; margin-left: 0.75em;\"></div>
<p>I’ve used <code>C-u</code> as a prefix to many key presses in emacs and conkeror before.  I never really knew what it did.  Recently, I read <a href=\"http://emacs-fu.blogspot.com/2010/07/some-handy-key-bindings.html\">this</a> that show you how to repeat commands by typing <code>M-#</code>, where <code>#</code> is a number such as 5 or 100, before a command, such as <code>C-n</code> or <code>0</code>.  I’ve also read function definitions in different <code>.el</code> files or emacs’ documentation that speaks of function arguments.  I knew that emacs commands correspond to functions, but I never knew how to pass in arguments.</p>

<p>Basically, <code>C-u #</code> and <code>M-#</code> (substitute <code>#</code> with a number) passes numeric arguments to the function called.  <code>C-u</code> without <code>#</code> is equivalent to <code>M-4</code>.  Read <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Arguments.html\">this</a> for a more thorough explanation.  <a href=\"http://www.emacswiki.org/emacs/PrefixArgument\">This</a> shows how one can “overload” a function using the prefix argument.</p>") (author nil (name nil "Vinh Nguyen") (uri nil "http://blog.nguyenvq.com")) (source nil (title ((type . "html")) "Super Nerdy Cool » emacs") (subtitle ((type . "html")) "My (technical) adventures through the professional world...") (link ((rel . "self") (href . "http://blog.nguyenvq.com/category/emacs/feed/"))) (id nil "http://blog.nguyenvq.com"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: No more dashes in Emacs 24 mode-line") (link ((href . "http://julien.danjou.info/blog/index.html#No_more_dashes_in_Emacs__mode-line"))) (id nil "http://julien.danjou.info/blog/index.html#No_more_dashes_in_Emacs__mode-line") (updated nil "2010-10-20T11:01:00+00:00") (content ((type . "html")) "<p class=\"first\">We all know the good old Emacs mode-line you got under every window. Since
the beginning (a long time ago), it starts and ends with dashes. I've
proposed <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2010-10/msg00675.html\">a patch</a> to remove them.</p>

<p>Before:</p>

<center>
<p><img alt=\"\" src=\"http://julien.danjou.info/images/emacs-dashes.png\" /></p>
</center>

<p>After:</p>

<center>
<p><img alt=\"\" src=\"http://julien.danjou.info/images/emacs-no-dashes.png\" /></p>
</center>

<p>This has been merged in Emacs 24. You won't see any more ugly dashes in
graphical mode.</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html"))) (entry nil (title ((type . "html")) "Johan Andersson: Enclose and Wrap Region") (link ((href . "http://blog.tuxicity.se/elisp/emacs/2010/10/20/enclose-and-wrap-region.html"))) (id nil "http://blog.tuxicity.se/elisp/emacs/2010/10/20/enclose-and-wrap-region") (updated nil "2010-10-20T00:00:00+00:00") (content ((type . "html")) "<p>Wrap Region is an Emacs minor mode that wraps a region with
punctuations, much like in TextMate.</p>

<p>When no region is selected and a wrap key is pressed, Wrap Region
would insert both punctuations and place the cursor in between, also
much like in TextMate.</p>

<p>In my opinion, since I like to keep things to the point, Wrap Region
should do one job (wrap text) and do that good. That's why I decided
to split up Wrap Region into <strong>Wrap Region</strong> and <strong>Enclose</strong>.</p>

<h2>Wrap Region</h2>

<pre>Wraps selected text with punctuations or tag. If no region is selected, fall back.</pre>


<p>Works like before, only that the double insertion of punctuations is gone.</p>

<p>Source: <a href=\"http://github.com/rejeep/wrap-region\">http://github.com/rejeep/wrap-region</a></p>

<h2>Enclose</h2>

<pre>Enclose cursor within punctuations. If region is selected, fall back.</pre>


<p>Enclose mode was built from scratch, with inspiration taken from
TextMate. Enclose keeps a hash with keys that will enclose. Pressing
any of those keys will insert that key and its right buddy, and place
the cursor in between.</p>

<p>When cursor is in focus (not moved since inserting punctuations),
pressing <strong>DEL</strong> will remove both punctuations, and pressing the right
punctuation, will jump right over it.</p>

<p>See source for installation and usage examples.</p>

<p>Source: <a href=\"http://github.com/rejeep/enclose\">http://github.com/rejeep/enclose</a></p>") (author nil (name nil "Johan Andersson") (uri nil "http://blog.tuxicity.se/")) (source nil (title ((type . "html")) "Tuxicity - Emacs") (link ((rel . "self") (href . "http://blog.tuxicity.se/atom-emacs.xml"))) (id nil "http://blog.tuxicity.se/"))) (entry nil (title ((type . "html")) "Justin Heyes-Jones: rgrep on windows 7 for emacs") (link ((href . "http://justinsboringpage.blogspot.com/2010/10/rgrep-on-windows-7-for-emacs.html"))) (id nil "tag:blogger.com,1999:blog-4777243148323391813.post-3950018987680156658") (updated nil "2010-10-19T23:15:05+00:00") (content ((type . "html")) "I lost an hour configuring this, so seems worthy of a blog post.<br /><br />A fresh install of <a href=\"http://ftp.gnu.org/gnu/emacs/windows/\">emacs for windows</a> will have functionality that does not work because it depends on unix style utilities.<br /><br />One very useful example is the command rgrep, which searches files recursively through subfolders looking for a regular expression in those files.<br /><br />Under the hood it uses the unix command line tools find, and egrep. Unfortunately the windows version of find takes entirely different parameters and will not function. In fact you will get an error that looks like this:<br /><br />FIND: Wrong parameter format<br /><br />Using the set of native ports of Unix command line tools <a href=\"http://sourceforge.net/projects/unxutils/\">UnxUtils </a>you can easily fix this:<br /><br /><ol><li>Download the zip file and extract it to c:\\unxutils</li><li>Add the following path to the very front of your path by editing your system environment variables C:\\unxutils\\usr\\local\\wbin\\;</li></ol><div>That's it. You can run rgrep now and hopefully you're up and running. </div><div><br /></div><div>If not make sure you have restarted emacs so it picks up the new setting of PATH. Open a shell in emacs and type 'find --version'. You should see something like this if your path is configured correctly:</div><div><br /></div><div><div>c:\\find --version</div><div>find --version</div><div>GNU find version 4.1</div></div><div><br /></div><div>and if not you will see:</div><div><br /></div><div><div>C:\\Windows\\system32&gt;find --help</div><div>FIND: Parameter format not correct</div></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/4777243148323391813-3950018987680156658?l=justinsboringpage.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Justin") (email nil "noreply@blogger.com") (uri nil "http://justinsboringpage.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "justinhj's coding blog") (subtitle ((type . "html")) "Programming related tips and comments. Lots of emacs, C++, some game AI, common lisp, python, java, c#, sql and whatever else I'm working on.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/4777243148323391813/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-4777243148323391813"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: Enhancing Emacs mouse avoidance") (link ((href . "http://julien.danjou.info/blog/index.html#Enhancing_Emacs_mouse_avoidance"))) (id nil "http://julien.danjou.info/blog/index.html#Enhancing_Emacs_mouse_avoidance") (updated nil "2010-10-19T17:23:00+00:00") (content ((type . "html")) "<p class=\"first\">Recent Emacs versions have a wonderful capacity to hide the mouse pointer as
soon as you type and insert characters in a buffer. This is controlled by
the <em>`make-pointer-invisible'</em> variable, which is set to t by default.</p>

<p>However that does not hide the pointer when simply moving the cursor on
screen. Therefore, I've started to use <em>`mouse-avoidance-mode'</em>, which make
the mouse pointer jump if your cursor hits it.</p>

<p>Unfortunately, if your cursor hits the invisible mouse pointer,
<em>`mouse-avoidance-mode'</em> makes it jump too, because it does not know it is
invisible.</p>

<p>Well, it <em>did</em> not know. Now it does, <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2010-10/msg00574.html\">thanks to my patches</a> which have been
merged in Emacs 24. Using the new function <strong>`frame-pointer-invisible-p'</strong>, one
can know if the mouse pointer has been hidden by Emacs. Therefore I enhanced
`mouse-avoidance-mode' to use it, and everything is alright now. :-)</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html"))) (entry nil (title ((type . "html") (xml:lang . "es")) "suso: Publicado el Manual de Hyperbole para Emacs") (link ((href . "http://gnu.manticore.es/node/786"))) (id nil "http://gnu.manticore.es/786 at http://gnu.manticore.es") (updated nil "2010-10-19T04:53:04+00:00") (content ((type . "html")) "<p>Doy por finalizada la fase alfa de la traducción del Manual de Hyperbole,<br />
correspondiente a su quinta edición, elimino los ficheros de texto<br />
provisionales y paso el manual a HTML.</p>
<p>Como es posible que se sepa, Hyperbole es un paquete histórico para<br />
la gestión avanzada de la información.  Desde hace ya tiempo es un<br />
paquete oficial de GNU, pero no va incluido dentro de la distribución<br />
de GNU Emacs.</p>
<p>Primera prueba alfa de la traducción, como siempre.</p>
<p>El texto del manual se puede alcanzar en la sección Libros, Mundo<br />
Emacs.</p>
<p>Copyright de la traducción: TMJQ, S.L.</p>
<p><a href=\"http://gnu.manticore.es/node/786\" target=\"_blank\">leer más</a></p>") (author nil (name nil "suso") (uri nil "http://gnu.manticore.es/taxonomy/term/1/0")) (source nil (title ((type . "html")) "GNU + Emacs en español para usuarios finales - Emacs") (link ((rel . "self") (href . "http://gnu.manticore.es/taxonomy/term/1/0/feed"))) (id nil "http://gnu.manticore.es/taxonomy/term/1/0"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "@emacs: emacs: Here's how to run a shell command with the region as input, replacing the selection with the command's output: C-u M-|") (link ((href . "http://twitter.com/emacs/statuses/27465247938"))) (id nil "http://twitter.com/emacs/statuses/27465247938") (updated nil "2010-10-15T18:02:30+00:00") (content ((type . "html")) "emacs: Here's how to run a shell command with the region as input, replacing the selection with the command's output: C-u M-|") (author nil (name nil "@emacs") (uri nil "http://twitter.com/emacs")) (source nil (title ((type . "html")) "Twitter / emacs") (subtitle ((type . "html")) "Twitter updates from emacs / emacs.") (link ((rel . "self") (href . "http://twitter.com/statuses/user_timeline/9492852.rss"))) (id nil "http://twitter.com/emacs"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Aidan McQuay: Displaying Inline Images in Emacs org-mode") (link ((href . "http://floatsolutions.com/blog/2010/10/displaying-inline-images-in-emacs-org-mode/"))) (id nil "http://floatsolutions.com/?p=269") (updated nil "2010-10-15T08:17:36+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I had to patch together some various emacs from around the web to get inline images with iimage.el working in emacs exactly the way I wanted.   Here’s some info:</p>
<ul>
<li>Load and displays images in org files on initial load</li>
<li>Provides a function that allows you to toggle images on and off</li>
<li>Specify images you would like to load with the [[file://file.png]] org link type</li>
</ul>
<p><a href=\"http://floatsolutions.com/wp-content/uploads/2010/10/inline_image_screenshot.png\"><img alt=\"\" class=\"aligncenter size-full wp-image-277\" height=\"361\" src=\"http://floatsolutions.com/wp-content/uploads/2010/10/inline_image_screenshot.png\" title=\"inline_image_screenshot\" width=\"501\" /></a></p>
<p>Here’s the code, you can add it anywhere in your <em>.emacs</em><br />
</p><pre><code>;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
  (cons (concat \"\\\\[\\\\[file:\\\\(~?\" iimage-mode-image-filename-regex \"\\\\)\\\\]\")  1))
;;  add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
  \"display images in your org file\"
  (interactive)
  (turn-on-iimage-mode)
  (set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
  \"display images in your org file\"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (call-interactively 'iimage-mode))
</code></pre> <p></p>
<p>I have this function bound to C-l with a call like this:<br />
</p><pre><code>
(define-key org-mode-map (kbd \"C-S-a\") 'org-archive-subtree)</code></pre><p></p>") (author nil (name nil "Aidan McQuay") (uri nil "http://floatsolutions.com")) (source nil (title ((type . "html")) "Float Solutions » Emacs") (link ((rel . "self") (href . "http://floatsolutions.com/blog/category/emacs/feed/"))) (id nil "http://floatsolutions.com"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Aidan McQuay: Tramp and NTEmacs") (link ((href . "http://floatsolutions.com/blog/2010/10/tramp-and-ntemacs/"))) (id nil "http://floatsolutions.com/?p=255") (updated nil "2010-10-15T03:16:50+00:00") (content ((type . "html") (xml:lang . "en")) "<p>After a few failed attempted at getting tramp working in NTEmacs the solution ended up being pretty simple.</p>
<p><strong>1)</strong> Download <a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\">Plink.exe</a>.</p>
<p><strong>2)</strong> Place Plink.exe somewhere in your windows PATH, doesn’t matter where but you have to be able to run in from a command line anywhere on your system.</p>
<p><strong>3)</strong> Add the following line somewhere in your <em>.emacs</em>.<br />
</p><pre><code>(setq tramp-default-method \"plink\")
</code></pre><p></p>
<p>From there you should be able to use <em>find-file</em> (C-x C-f) and a command like the following to bring up a remote file:<br />
</p><pre><code>/user@host.com:/path/to/file.ext
</code></pre><p></p>") (author nil (name nil "Aidan McQuay") (uri nil "http://floatsolutions.com")) (source nil (title ((type . "html")) "Float Solutions » Emacs") (link ((rel . "self") (href . "http://floatsolutions.com/blog/category/emacs/feed/"))) (id nil "http://floatsolutions.com"))) (entry nil (title ((type . "html")) "Flickr tag 'emacs': Church of Emacs (progress)") (link ((href . "http://www.flickr.com/photos/azuriblue/5082019905/"))) (id nil "tag:flickr.com,2004:/photo/5082019905") (updated nil "2010-10-14T23:56:41+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/azuriblue/\">Azuriblue8</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/azuriblue/5082019905/\" title=\"Church of Emacs (progress)\"><img alt=\"Church of Emacs (progress)\" height=\"240\" src=\"http://farm5.static.flickr.com/4111/5082019905_f84f0a258a_m.jpg\" width=\"180\" /></a></p>") (author nil (name nil "Azuriblue8") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/"))) (entry nil (title ((type . "html")) "Got Emacs?: First Emacs binaries of October available") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/EBWHvtkFwO0/first-emacs-binaries-of-october.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-8147437168873963545") (updated nil "2010-10-13T18:39:29+00:00") (content ((type . "html")) "The<a href=\"http://permalink.gmane.org/gmane.emacs.devel/131625\"> latest Emacs binaries trunk build</a> are available <a href=\"http://alpha.gnu.org/gnu/emacs/windows/\">here</a>.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-8147437168873963545?l=emacsworld.blogspot.com\" width=\"1\" /></div>
<p><a href=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/0/di\" /></a><br />
<a href=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/1/di\" /></a></p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/EBWHvtkFwO0\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420"))) (entry nil (title ((type . "html") (xml:lang . "en")) "Ruslan Spivak: Nuke whitespaces on file saving") (link ((href . "http://ruslanspivak.com/2010/10/11/nuke-whitespaces-on-file-saving/"))) (id nil "http://ruslanspivak.com/?p=375") (updated nil "2010-10-12T04:17:19+00:00") (content ((type . "html") (xml:lang . "en")) "<p>In one of my <a href=\"http://ruslanspivak.com/2010/09/27/keep-track-of-whitespaces-and-column-80-overflow/\">previous posts</a> I wrote how I kept track of whitespaces and a column 80 overflow. And in my config you could see that I used <em>delete-trailing-whitespace</em> with <em>write-file-hooks</em></p>
<pre style=\"color: #F8F8F8; background-color: #0C1021; font-size: 8pt;\"><span style=\"color: #AEAEAE; font-style: italic;\">;; </span><span style=\"color: #AEAEAE; font-style: italic;\">nuke trailing whitespaces when writing to a file
</span>(add-hook 'write-file-hooks 'delete-trailing-whitespace)
</pre>
<p>What I wanted to use with <em>write-file-hooks</em> was <em><strong>whitespace-cleanup</strong></em>, but somehow it didn’t work for me with that hook (whitespaces were removed when saving a file, but buffer was marked as containing changes).</p>
<p>Thanks to Valeriy Zamarayev who, <a href=\"http://ruslanspivak.com/2010/09/27/keep-track-of-whitespaces-and-column-80-overflow/#comment-712\">in his comment to my post</a>, mentioned save hook and whitespace-cleanup. This is what I use now to remove whitespaces when saving a file:</p>
<pre style=\"color: #F8F8F8; background-color: #0C1021; font-size: 8pt;\"><span style=\"color: #AEAEAE; font-style: italic;\">;; </span><span style=\"color: #AEAEAE; font-style: italic;\">nuke whitespaces when writing to a file
</span>(add-hook 'before-save-hook 'whitespace-cleanup)
</pre>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ruslanspivak.wordpress.com/375/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ruslanspivak.com&amp;blog=1522719&amp;post=375&amp;subd=ruslanspivak&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "Ruslan Spivak") (uri nil "http://ruslanspivak.com")) (source nil (title ((type . "html")) "Ruslan's Blog » emacs") (subtitle ((type . "html")) "Musings on dynamic languages and more than that") (link ((rel . "self") (href . "http://ruslanspivak.com/category/emacs/feed/"))) (id nil "http://ruslanspivak.com"))) (entry nil (title ((type . "html") (xml:lang . "en-us")) "@emacs: emacs: @jf of course there wasn't. How can you laugh about me?  But watch for the Zuck joke in the Sorkin docudrama about RMS—it's M-x hysterical.") (link ((href . "http://twitter.com/emacs/statuses/27094280109"))) (id nil "http://twitter.com/emacs/statuses/27094280109") (updated nil "2010-10-12T01:56:24+00:00") (content ((type . "html")) "emacs: @jf of course there wasn't. How can you laugh about me?  But watch for the Zuck joke in the Sorkin docudrama about RMS—it's M-x hysterical.") (author nil (name nil "@emacs") (uri nil "http://twitter.com/emacs")) (source nil (title ((type . "html")) "Twitter / emacs") (subtitle ((type . "html")) "Twitter updates from emacs / emacs.") (link ((rel . "self") (href . "http://twitter.com/statuses/user_timeline/9492852.rss"))) (id nil "http://twitter.com/emacs"))) (entry nil (title ((type . "html")) "David's World: Link Soup: October.  What's cooking (in the world)") (link ((href . "http://www.davids-world.com/archives/2010/10/link_soup_octob.html"))) (id nil "tag:www.davids-world.com,2010://1.258") (updated nil "2010-10-11T17:56:14+00:00") (content ((type . "html") (xml:lang . "en")) "Interesting reads and sights that didn't get broad attention in the mainstream press:

<a href=\"http://news.mongabay.com/2010/1010-vontsira_madagascar.html\">Durrell's vontsira</a> - a novel carnivore species discovered on
Madagascar.  And a cute one!  (<a href=\"http://www.smugmug.com/gallery/14098495_FzBEP#1038952598_MwDEf-A-LB\">Big pictures here.</a>)

The Guardian about Jon Stweart, who misses <a href=\"http://www.guardian.co.uk/media/2010/oct/03/jon-stewart-barack-obama\">an imaginary Hero-Obama</a>.

<a href=\"http://www.guardian.co.uk/world/2010/sep/18/ingrid-betancourt-i-still-have-nightmares\">Ingrid Betancourt</a> about her time in captivity.

People (and politicians) do what's best for them - even if that isn't immediately obvious: <a href=\"http://www.ted.com/talks/elizabeth_pisani_sex_drugs_and_hiv_let_s_get_rational_1.html\">Elizabeth Pisani's TED talk</a>.



<a href=\"http://rtw.ml.cmu.edu/rtw/overview\">NELL</a> - the never-ending learning system learns about semantics.
A <a href=\"http://techcrunch.com/2010/10/09/nell-computer-language-carnegie-tctv/\">15-minute interview</a> with CMU Machine-Learning professor Tom
Mitchell, whose team created this.") (author nil (name nil "David Reitter") (uri nil "http://www.davids-world.com/")) (source nil (title ((type . "html")) "David's World") (subtitle ((type . "html")) "... looms large and daunting.") (link ((rel . "self") (href . "http://www.davids-world.com/atom.xml"))) (id nil "tag:www.davids-world.com,2010://1"))) (entry nil (title ((type . "html")) "Trey Jackson: Emacs Tip #37: fic-mode.el") (link ((href . "http://trey-jackson.blogspot.com/2010/10/emacs-tip-37-fic-modeel.html"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968.post-7679013447638879119") (updated nil "2010-10-10T18:25:16+00:00") (content ((type . "html")) "I saw this question on Stack Overflow asking to highlight FIXME (and similar strings) in your code, but only in comments and strings.The current fixme-mode.el found on the Emacs Wiki is kind of clunky (it's really a major mode) and awkward to read.  So I took the challenge to write a new minor-mode which answers the question.I give you fic-mode.el.  It's named fic as an acronym for Fixme In") (author nil (name nil "BFW") (email nil "noreply@blogger.com") (uri nil "http://trey-jackson.blogspot.com/")) (source nil (title ((type . "html")) "Life Is Too Short For Bad Code") (subtitle ((type . "html")) "Random musings about programming, software, technical interviews, and of course Emacs - a tip every week for new and experienced users.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/2304251215826746968/posts/default"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968"))))) ("Alex Bennée: More on TRAMP" "<p>I’ve mentioned <a href=\"http://www.bennee.com/~alex/blog/2010/07/29/the-power-of-tramp/\">TRAMP before</a>. It’s a very handy way of editing remote files. However I’ve been having a few problems with it today.</p>
<p>The most common access method used by TRAMP to access files these days is via <em>ssh</em>. It basically uses a remote terminal session to navigate the remote file system and fetch files back and forth. However it does take a few things for granted and one of those is the shell environment on the far end. For most *nix users this will be <a href=\"http://en.wikipedia.org/wiki/Bash_(Unix_shell)\">Bash</a>. Long time command line hackers like myself usually have a rather <a href=\"http://github.com/stsquad/dotfiles\">heavily customised</a> shell environment which can cause problems for TRAMP, especially if you pull tricks with customising the command prompt. In an effort to handle this a little better I <a href=\"http://github.com/stsquad/dotfiles/commit/126f32ff538214e3de4b40993a3406a15379ec45\">modified</a> my .bashrc to treat ‘dumb’ terminals as non-interactive. It works but it still seems a little hacky. I would welcome any better suggestions for detecting TRAMP sessions my start-up files.</p>
<p>I was still experiencing a problem navigating to one of the directories on my remote machine. Whatever I did when I got to the root of my code tree I couldn’t navigate into the correct directory. The prompt would only offer me an old (since moved away) directory. Tricks like opening <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html\">dired mode</a> and navigating in would cause the session to spin consuming 100% cpu. In the end I tracked it down to <a href=\"http://www.emacswiki.org/emacs/InteractivelyDoThings\">IDO</a> and the old directory existing in my ~/.ido.last file. Once removed and emacs restarted the problem went away. I’m hoping this is just a peculiarity of the interaction between ido and TRAMP but is was certainly annoying.</p>" "http://www.bennee.com/~alex/blog/2010/10/29/more-on-tramp/" (19658 43922) new 1 nil nil ((title ((type . "html") (xml:lang . "en")) "Alex Bennée: More on TRAMP") (link ((href . "http://www.bennee.com/~alex/blog/2010/10/29/more-on-tramp/"))) (id nil "http://www.bennee.com/~alex/blog/?p=2059") (updated nil "2010-10-29T11:10:10+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I’ve mentioned <a href=\"http://www.bennee.com/~alex/blog/2010/07/29/the-power-of-tramp/\">TRAMP before</a>. It’s a very handy way of editing remote files. However I’ve been having a few problems with it today.</p>
<p>The most common access method used by TRAMP to access files these days is via <em>ssh</em>. It basically uses a remote terminal session to navigate the remote file system and fetch files back and forth. However it does take a few things for granted and one of those is the shell environment on the far end. For most *nix users this will be <a href=\"http://en.wikipedia.org/wiki/Bash_(Unix_shell)\">Bash</a>. Long time command line hackers like myself usually have a rather <a href=\"http://github.com/stsquad/dotfiles\">heavily customised</a> shell environment which can cause problems for TRAMP, especially if you pull tricks with customising the command prompt. In an effort to handle this a little better I <a href=\"http://github.com/stsquad/dotfiles/commit/126f32ff538214e3de4b40993a3406a15379ec45\">modified</a> my .bashrc to treat ‘dumb’ terminals as non-interactive. It works but it still seems a little hacky. I would welcome any better suggestions for detecting TRAMP sessions my start-up files.</p>
<p>I was still experiencing a problem navigating to one of the directories on my remote machine. Whatever I did when I got to the root of my code tree I couldn’t navigate into the correct directory. The prompt would only offer me an old (since moved away) directory. Tricks like opening <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Dired.html\">dired mode</a> and navigating in would cause the session to spin consuming 100% cpu. In the end I tracked it down to <a href=\"http://www.emacswiki.org/emacs/InteractivelyDoThings\">IDO</a> and the old directory existing in my ~/.ido.last file. Once removed and emacs restarted the problem went away. I’m hoping this is just a peculiarity of the interaction between ido and TRAMP but is was certainly annoying.</p>") (author nil (name nil "Alex") (uri nil "http://www.bennee.com/~alex/blog")) (source nil (title ((type . "html")) "Alex's Adventures on the Infobahn » emacs") (subtitle ((type . "html")) "the wanderings of a supposed digital native") (link ((rel . "self") (href . "http://www.bennee.com/~alex/blog/tag/emacs/feed/"))) (id nil "http://www.bennee.com/~alex/blog")))) ("Johan Andersson: ruby-end, automatically close ruby blocks" "<p>In Ruby all blocks are closed with the <strong>end</strong> keyword. The Emacs mode
<strong>ruby-electric</strong> automatically inserts <strong>end</strong> when typing a block
keyword, followed by a space.</p>
<p>This is a nice feature, but unfortunately ruby-electric comes with
some other stuff, such as inserting <strong>{}</strong> and placing the cursor
between, when pressing <strong>{</strong>.</p>
<p>Since I already have that functionality from
<a href=\"https://github.com/rejeep/enclose\">enclose-mode</a>, I don't want to use
ruby-electric, so I created a new mode <strong>ruby-end</strong> that does exactly
one thing and that is closing blocks.</p>
<p>The closing block functionality is a very simple task so creating a
function seemed best at first, but I decided to create a minor mode
<strong>ruby-end</strong>, because it's easier to test
(<a href=\"https://github.com/rejeep/ruby-end/blob/master/features/ruby-end.feature\">https://github.com/rejeep/ruby-end/blob/master/features/ruby-end.feature</a>)
and you can turn it off.</p>
<p>Check it out at Github: <a href=\"https://github.com/rejeep/ruby-end\">https://github.com/rejeep/ruby-end</a></p>" "http://blog.tuxicity.se/elisp/emacs/ruby/2010/10/29/ruby-end-automatically-close-ruby-blocks.html" (19658 3712) new 2 nil nil ((title ((type . "html")) "Johan Andersson: ruby-end, automatically close ruby blocks") (link ((href . "http://blog.tuxicity.se/elisp/emacs/ruby/2010/10/29/ruby-end-automatically-close-ruby-blocks.html"))) (id nil "http://blog.tuxicity.se/elisp/emacs/ruby/2010/10/29/ruby-end-automatically-close-ruby-blocks") (updated nil "2010-10-29T00:00:00+00:00") (content ((type . "html")) "<p>In Ruby all blocks are closed with the <strong>end</strong> keyword. The Emacs mode
<strong>ruby-electric</strong> automatically inserts <strong>end</strong> when typing a block
keyword, followed by a space.</p>

<p>This is a nice feature, but unfortunately ruby-electric comes with
some other stuff, such as inserting <strong>{}</strong> and placing the cursor
between, when pressing <strong>{</strong>.</p>

<p>Since I already have that functionality from
<a href=\"https://github.com/rejeep/enclose\">enclose-mode</a>, I don't want to use
ruby-electric, so I created a new mode <strong>ruby-end</strong> that does exactly
one thing and that is closing blocks.</p>

<p>The closing block functionality is a very simple task so creating a
function seemed best at first, but I decided to create a minor mode
<strong>ruby-end</strong>, because it's easier to test
(<a href=\"https://github.com/rejeep/ruby-end/blob/master/features/ruby-end.feature\">https://github.com/rejeep/ruby-end/blob/master/features/ruby-end.feature</a>)
and you can turn it off.</p>

<p>Check it out at Github: <a href=\"https://github.com/rejeep/ruby-end\">https://github.com/rejeep/ruby-end</a></p>") (author nil (name nil "Johan Andersson") (uri nil "http://blog.tuxicity.se/")) (source nil (title ((type . "html")) "Tuxicity - Emacs") (link ((rel . "self") (href . "http://blog.tuxicity.se/atom-emacs.xml"))) (id nil "http://blog.tuxicity.se/")))) ("Andrew Gwozdziewycz: ant.el: A Code Walkthrough" "<p><span class=\"preamble\">In April of last year, I blogged about <a href=\"http://sigusr2.net/2009/Apr/30/the-power-that-is-gnu-emacs.html\">how powerful Emacs</a> is, and shared my enlightenment story.</span></p>
<p>Today, I'm even closer to Emacs than I was before, having an extra year and a half of experience than I did then. My daily interactions with Emacs are still very much in the same vain—I am still a programmer after all, but I've also discovered some more frustrations which were fairly easy to rectify.</p>
<p>In July of this year, I started <a href=\"http://www.meetup.com/\">a new job</a><sup><a href=\"http://sigusr2.net/tags/emacs.xml#hiring-1\">[1]</a></sup>. My role at Meetup has been different in many regards than my previous jobs. It's the first role I've had since entering into the industry that someone doesn't see the output of my code. In fact, if they do see the output of my code, I've sort of failed.<sup><a href=\"http://sigusr2.net/tags/emacs.xml#output-2\">[2]</a></sup> It also represents the first time that I've primarily used a compiled language (outside of college), targetted the <a href=\"http://en.wikipedia.org/wiki/JVM\">JVM</a> and used <a href=\"http://java.sun.com/\">Java</a> for the bulk of my work.</p>
<p>Naturally, Emacs could help me. <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html\">Compilation Mode</a>, for instance allows you to do <code class=\"inline\">M-x compile</code> to run <a href=\"http://en.wikipedia.org/wiki/Make_(software)\">make</a>, or <a href=\"http://ant.apache.org/\">ant</a> (with <code class=\"inline\">-emacs</code>) or some other build tool that generates compilation mode compatible output, that the mode will then mark up and allow you to easily jump to places the compiler thinks<sup><a href=\"http://sigusr2.net/tags/emacs.xml#errors-3\">[3]</a></sup> are errors.</p>
<p>Compilation Mode by default is fine, but complicated Java source trees are normally nested quite complexly and ant isn't the greatest at locating a suitable build file. What I needed were some interactive functions that I could use to run ant properly, in Compilation Mode using the project's build file. What I <a href=\"http://github.com/apgwoz/ant-el\">came up with</a> after a few hours, works fairly well.</p>
<p>Basically, instead of <code class=\"inline\">M-x compile</code>, I type <code class=\"inline\">M-x ant</code>, or <code class=\"inline\">M-x ant-compile</code>, or <code class=\"inline\">M-x ant</code> and then TAB complete all the available build targets. This allows me to save some typing, and save some precious brain cells, since I don't have to remember all 40 build targets.</p>
<p>The code is fairly simple, and I think it's a great candidate for a walk through on how to solve your own problems using Emacs Lisp, so I'd like to go through it here.</p>
<p>The code starts out simply enough:</p>
<pre><code class=\"elisp\">(defvar ant-last-task \"compile\")
(defvar ant-build-file-name \"build.xml\")
(defvar ant-command \"ant -emacs\")
(defvar *ant-tasks-cache* '())
(defvar *ant-tasks-command* \"grep -e '&lt;target.*name=\\\"[^\\-][^\\\"]*.*$'\")
(defvar ant-tasks-default '(\"compile\" \"test\" \"clean\"))</code></pre>
<p>We just define a bunch of global variables that can be overridden by a user if they need to be. We do however create <code class=\"inline\">*ant-tasks-cache*</code> and <code class=\"inline\">*ant-tasks-command*</code> which are meant to be internal state. In elisp, and other Lisps, wrapping * around a variable normally indicates that the variable is special in someway, here it means it's a global and shouldn't be modified outside of the functions defined within.</p>
<p>Next we have a helper function, <code class=\"inline\">ant-find-tasks</code>, which, given a directory, issues a shell command <code class=\"inline\">*ant-tasks-command*</code> that is used to extract the lines from the ant build file that declare targets:</p>
<pre><code class=\"elisp\">(defun ant-find-tasks (directory)
(let ((output (shell-command-to-string (concat *ant-tasks-command* \" \"
directory \"/\"
ant-build-file-name))))
(if (&gt; (length output) 0)
(mapcar '(lambda (x) (replace-regexp-in-string \".*&lt;target.*name=\\\"\\\\([^\\-][^\\\"]*\\\\).*\" \"\\\\1\" x))
(split-string output \"[\\n]\"))
nil)))</code></pre>
<p>Essentially, we first save the output of the shell command that gets built up to the variable <code class=\"inline\">output</code>. If the length of <code class=\"inline\">output</code> is greater than 0, we split the output (<code class=\"inline\">split-string</code>) into individual lines, and iteratively replace the junk in the line with just the name of the target (<code class=\"inline\">replace-regexp-in-string</code>). The only non-obvious thing in here is <code class=\"inline\">mapcar</code> which is a fancy way of transforming a list into another list via the function passed as the first argument.</p>
<p>That gives us all the tasks defined in the build file—well for most cases anyway. It doesn't handle all possible, valid build.xml files, but should work if the <code class=\"inline\">target</code>'s declaration and name attribute appear on the same line.</p>
<p>When we need a list of tasks for a project, we call <code class=\"inline\">ant-tasks</code>. This function really just caches the returned value of <code class=\"inline\">ant-find-tasks</code> into the global variable <code class=\"inline\">*ant-tasks-cache*</code> for the current project:</p>
<pre><code class=\"elisp\">(defun ant-tasks (directory)
(let ((tasks (assoc-string directory *ant-tasks-cache*)))
(or tasks
(progn
(let ((newtasks (or (ant-find-tasks directory) ant-tasks-default)))
(setq *ant-tasks-cache*
(cons (cons directory newtasks) *ant-tasks-cache*))
newtasks)))))</code></pre>
<p>The only interesting thing about the above code is the use of <code class=\"inline\">or</code>. In Lisp, <code class=\"inline\">or</code> short circuits and returns the first truthy value—it doesn't convert it to a boolean, so it can easily be used to select the first truthy value from a list of values. That's what's happening there.</p>
<p>I mentioned that I wanted TAB completion on task names so as to not clutter my brain matter with useless task names:</p>
<pre><code class=\"elisp\">(defun ant-get-task (directory)
(let ((task (completing-read-multiple (concat \"Task (default): \")
(ant-tasks directory))))
(if (&gt; (length task) 0)
(mapconcat 'identity task \" \")
\"\")))</code></pre>
<p>Well, here it is. Emacs has built in completion via the <code class=\"inline\">completing-read</code> function. Here, we want the ability to issue one or more tasks, so we use <code class=\"inline\">completing-read-multiple</code> to get the job done. Notice we're calling our function from above, <code class=\"inline\">ant-tasks</code>.</p>
<p>You'll notice <code class=\"inline\">mapconcat</code> above. It's like <code class=\"inline\">mapcar</code> from above, in that it takes a list of things and transforms them, but instead of returning a new list, it concatenates the elements into a string using the last argument (here just a space) as a separator. <code class=\"inline\">completing-read-multiple</code> returns to us a list, which we need to turn into a string with spaces between the targets in order to issue the build command.</p>
<pre><code class=\"elisp\">(defun ant-find-root (indicator)
(let ((cwd default-directory))
(while (and (not (file-exists-p (concat cwd indicator)))
(not (string-equal (expand-file-name cwd) \"/\")))
(setq cwd (concat cwd \"../\")))
(if (file-exists-p (concat cwd indicator))
(expand-file-name cwd)
nil)))</code></pre>
<p>The above function locates the base directory of the project, given the current file being edited. It just loops up the file system looking for the first directory it finds that has a build file in it. When I originally wrote this function, I didn't realize that Emacs already had this functionality built into it with the function <code class=\"inline\">locate-dominating-file</code>.<sup><a href=\"http://sigusr2.net/tags/emacs.xml#dominating-4\">[4]</a></sup>
</p><p><code class=\"inline\">ant-kill-cache</code>,</p>
<pre><code class=\"elisp\">(defun ant-kill-cache ()
(interactive)
(setq *ant-tasks-cache* '()))</code></pre>
<p>does exactly what it says it does. It destroys the cache that is built up from <code class=\"inline\">ant-tasks</code>.
</p><p>The main entry point, <code class=\"inline\">ant</code>, is fairly trivial as well. It sets the variable <code class=\"inline\">default-directory</code>, which is Emacs' current working directory, to the project directory, reads a task from the reader (if being called interactively) and calls <code class=\"inline\">compile</code>, which is the main entry point into Compilation Mode.</p>
<pre><code class=\"elisp\">(defun ant (&amp;optional task)
\"Run ant `task` in project root directory.\"
(interactive)
(let ((default-directory (ant-find-root ant-build-file-name)))
(if default-directory
(let ((task (or task (ant-get-task default-directory))))
(setq ant-last-task task)
(compile (concat ant-command \" \" task)))
(message \"Couldn't find an ant project.\"))))</code></pre>
<p>In the first code block, there was a variable, <code class=\"inline\">ant-last-task</code>, defined that is used above to store the last target run. After a target is given, it's saved off in there.</p>
<pre><code class=\"elisp\">(defun ant-last ()
\"Run the last ant task in project\"
(interactive)
(ant (or ant-last-task \"\")))
(defun ant-compile ()
(interactive)
(ant \"compile\"))
(defun ant-clean ()
(interactive)
(ant \"clean\"))
(defun ant-test ()
(interactive)
(ant \"test\"))</code></pre>
<p>The rest of the code above, just defines some convenient, interactive commands for common targets. <code class=\"inline\">M-x ant-compile</code> will just issue the compile target, likewise for <code class=\"inline\">ant-clean</code>. The only moderately interesting interactive command here is <code class=\"inline\">ant-last</code> which reuses the variable <code class=\"inline\">ant-last-task</code> from above to redo the last compilation.</p>
<p>It doesn't feel like much code, and in all reality it's not. However, it has saved me quite a bit of time, as I don't have to go running to a terminal (either switching buffers, or switching windows entirely) in order to issue an ant task. I just do something I've grown very accustomed to—I issue another Emacs command, and let Emacs take care of it for me.</p>
<ol class=\"footnotes\">
<li id=\"hiring-1\">We're hiring for <a href=\"http://www.meetup.com/jobs\">most positions</a>.</li>
<li id=\"output-2\">Most of what I do is related to our product's infrastructure—not interaction, and not engineering new features. My work would be visible if some error leaked to your browser, and that'd probably be bad.</li>
<li id=\"errors-3\">It's fairly difficult to trick the compiler, but in Java, for instance, you can write type-safe code using Generics that it can't prove is safe. If you do that though, you should make use the SuppressWarnings annotation to tell the compiler it's OK.</li>
<li id=\"dominating-4\">Actually, I wasn't surprised that Emacs actually had the functionality, just that the name is non-trivial. I gave up looking for it after a couple of minutes and just rolled my own. I'll replace it in a future version, but the existing code works for now.</li>
</ol>" "http://sigusr2.net/2010/Oct/29/ant-el-a-code-walkthrough.html" (19658 3712) new 3 nil nil ((title ((type . "html")) "Andrew Gwozdziewycz: ant.el: A Code Walkthrough") (link ((href . "http://sigusr2.net/2010/Oct/29/ant-el-a-code-walkthrough.html"))) (id nil "md5:190c53e1eb58b5488ccc339134ad7766") (updated nil "2010-10-29T00:00:00+00:00") (content ((type . "html")) "<p><span class=\"preamble\">In April of last year, I blogged about <a href=\"http://sigusr2.net/2009/Apr/30/the-power-that-is-gnu-emacs.html\">how powerful Emacs</a> is, and shared my enlightenment story.</span></p>

<p>Today, I'm even closer to Emacs than I was before, having an extra year and a half of experience than I did then. My daily interactions with Emacs are still very much in the same vain—I am still a programmer after all, but I've also discovered some more frustrations which were fairly easy to rectify.</p>

<p>In July of this year, I started <a href=\"http://www.meetup.com/\">a new job</a><sup><a href=\"http://sigusr2.net/tags/emacs.xml#hiring-1\">[1]</a></sup>. My role at Meetup has been different in many regards than my previous jobs. It's the first role I've had since entering into the industry that someone doesn't see the output of my code. In fact, if they do see the output of my code, I've sort of failed.<sup><a href=\"http://sigusr2.net/tags/emacs.xml#output-2\">[2]</a></sup> It also represents the first time that I've primarily used a compiled language (outside of college), targetted the <a href=\"http://en.wikipedia.org/wiki/JVM\">JVM</a> and used <a href=\"http://java.sun.com/\">Java</a> for the bulk of my work.</p>

<p>Naturally, Emacs could help me. <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Compilation-Mode.html\">Compilation Mode</a>, for instance allows you to do <code class=\"inline\">M-x compile</code> to run <a href=\"http://en.wikipedia.org/wiki/Make_(software)\">make</a>, or <a href=\"http://ant.apache.org/\">ant</a> (with <code class=\"inline\">-emacs</code>) or some other build tool that generates compilation mode compatible output, that the mode will then mark up and allow you to easily jump to places the compiler thinks<sup><a href=\"http://sigusr2.net/tags/emacs.xml#errors-3\">[3]</a></sup> are errors.</p>

<p>Compilation Mode by default is fine, but complicated Java source trees are normally nested quite complexly and ant isn't the greatest at locating a suitable build file. What I needed were some interactive functions that I could use to run ant properly, in Compilation Mode using the project's build file. What I <a href=\"http://github.com/apgwoz/ant-el\">came up with</a> after a few hours, works fairly well.</p>

<p>Basically, instead of <code class=\"inline\">M-x compile</code>, I type <code class=\"inline\">M-x ant</code>, or <code class=\"inline\">M-x ant-compile</code>, or <code class=\"inline\">M-x ant</code> and then TAB complete all the available build targets. This allows me to save some typing, and save some precious brain cells, since I don't have to remember all 40 build targets.</p>

<p>The code is fairly simple, and I think it's a great candidate for a walk through on how to solve your own problems using Emacs Lisp, so I'd like to go through it here.</p>

<p>The code starts out simply enough:</p>

<pre><code class=\"elisp\">(defvar ant-last-task \"compile\")
(defvar ant-build-file-name \"build.xml\")
(defvar ant-command \"ant -emacs\")
(defvar *ant-tasks-cache* '())
(defvar *ant-tasks-command* \"grep -e '&lt;target.*name=\\\"[^\\-][^\\\"]*.*$'\")
(defvar ant-tasks-default '(\"compile\" \"test\" \"clean\"))</code></pre>

<p>We just define a bunch of global variables that can be overridden by a user if they need to be. We do however create <code class=\"inline\">*ant-tasks-cache*</code> and <code class=\"inline\">*ant-tasks-command*</code> which are meant to be internal state. In elisp, and other Lisps, wrapping * around a variable normally indicates that the variable is special in someway, here it means it's a global and shouldn't be modified outside of the functions defined within.</p>

<p>Next we have a helper function, <code class=\"inline\">ant-find-tasks</code>, which, given a directory, issues a shell command <code class=\"inline\">*ant-tasks-command*</code> that is used to extract the lines from the ant build file that declare targets:</p>

<pre><code class=\"elisp\">(defun ant-find-tasks (directory)
  (let ((output (shell-command-to-string (concat *ant-tasks-command* \" \"
                                                 directory \"/\"
                                                 ant-build-file-name))))
    (if (&gt; (length output) 0)
        (mapcar '(lambda (x) (replace-regexp-in-string \".*&lt;target.*name=\\\"\\\\([^\\-][^\\\"]*\\\\).*\" \"\\\\1\" x)) 
                (split-string output \"[\\n]\"))
      nil)))</code></pre>

<p>Essentially, we first save the output of the shell command that gets built up to the variable <code class=\"inline\">output</code>. If the length of <code class=\"inline\">output</code> is greater than 0, we split the output (<code class=\"inline\">split-string</code>) into individual lines, and iteratively replace the junk in the line with just the name of the target (<code class=\"inline\">replace-regexp-in-string</code>). The only non-obvious thing in here is <code class=\"inline\">mapcar</code> which is a fancy way of transforming a list into another list via the function passed as the first argument.</p>

<p>That gives us all the tasks defined in the build file—well for most cases anyway. It doesn't handle all possible, valid build.xml files, but should work if the <code class=\"inline\">target</code>'s declaration and name attribute appear on the same line.</p>

<p>When we need a list of tasks for a project, we call <code class=\"inline\">ant-tasks</code>. This function really just caches the returned value of <code class=\"inline\">ant-find-tasks</code> into the global variable <code class=\"inline\">*ant-tasks-cache*</code> for the current project:</p>

<pre><code class=\"elisp\">(defun ant-tasks (directory)
  (let ((tasks (assoc-string directory *ant-tasks-cache*)))
    (or tasks
        (progn 
          (let ((newtasks (or (ant-find-tasks directory) ant-tasks-default)))
            (setq *ant-tasks-cache*
                  (cons (cons directory newtasks) *ant-tasks-cache*))
          newtasks)))))</code></pre>

<p>The only interesting thing about the above code is the use of <code class=\"inline\">or</code>. In Lisp, <code class=\"inline\">or</code> short circuits and returns the first truthy value—it doesn't convert it to a boolean, so it can easily be used to select the first truthy value from a list of values. That's what's happening there.</p>

<p>I mentioned that I wanted TAB completion on task names so as to not clutter my brain matter with useless task names:</p>

<pre><code class=\"elisp\">(defun ant-get-task (directory)
  (let ((task (completing-read-multiple (concat \"Task (default): \") 
                                        (ant-tasks directory))))
    (if (&gt; (length task) 0)
        (mapconcat 'identity task \" \")
      \"\")))</code></pre>

<p>Well, here it is. Emacs has built in completion via the <code class=\"inline\">completing-read</code> function. Here, we want the ability to issue one or more tasks, so we use <code class=\"inline\">completing-read-multiple</code> to get the job done. Notice we're calling our function from above, <code class=\"inline\">ant-tasks</code>.</p>

<p>You'll notice <code class=\"inline\">mapconcat</code> above. It's like <code class=\"inline\">mapcar</code> from above, in that it takes a list of things and transforms them, but instead of returning a new list, it concatenates the elements into a string using the last argument (here just a space) as a separator. <code class=\"inline\">completing-read-multiple</code> returns to us a list, which we need to turn into a string with spaces between the targets in order to issue the build command.</p>

<pre><code class=\"elisp\">(defun ant-find-root (indicator)
  (let ((cwd default-directory))
    (while (and (not (file-exists-p (concat cwd indicator)))
                (not (string-equal (expand-file-name cwd) \"/\")))
      (setq cwd (concat cwd \"../\")))
    (if (file-exists-p (concat cwd indicator))
        (expand-file-name cwd)
      nil)))</code></pre>

<p>The above function locates the base directory of the project, given the current file being edited. It just loops up the file system looking for the first directory it finds that has a build file in it. When I originally wrote this function, I didn't realize that Emacs already had this functionality built into it with the function <code class=\"inline\">locate-dominating-file</code>.<sup><a href=\"http://sigusr2.net/tags/emacs.xml#dominating-4\">[4]</a></sup>

</p><p><code class=\"inline\">ant-kill-cache</code>,</p>

<pre><code class=\"elisp\">(defun ant-kill-cache ()
  (interactive)
  (setq *ant-tasks-cache* '()))</code></pre>

<p>does exactly what it says it does. It destroys the cache that is built up from <code class=\"inline\">ant-tasks</code>.

</p><p>The main entry point, <code class=\"inline\">ant</code>, is fairly trivial as well. It sets the variable <code class=\"inline\">default-directory</code>, which is Emacs' current working directory, to the project directory, reads a task from the reader (if being called interactively) and calls <code class=\"inline\">compile</code>, which is the main entry point into Compilation Mode.</p>

<pre><code class=\"elisp\">(defun ant (&amp;optional task)
  \"Run ant `task` in project root directory.\"
  (interactive)
  (let ((default-directory (ant-find-root ant-build-file-name)))
    (if default-directory
        (let ((task (or task (ant-get-task default-directory))))
          (setq ant-last-task task)
          (compile (concat ant-command \" \" task)))
      (message \"Couldn't find an ant project.\"))))</code></pre>

<p>In the first code block, there was a variable, <code class=\"inline\">ant-last-task</code>, defined that is used above to store the last target run. After a target is given, it's saved off in there.</p>

<pre><code class=\"elisp\">(defun ant-last ()
  \"Run the last ant task in project\"
  (interactive)
  (ant (or ant-last-task \"\")))

(defun ant-compile ()
  (interactive)
  (ant \"compile\"))

(defun ant-clean ()
  (interactive)
  (ant \"clean\"))

(defun ant-test ()
  (interactive)
  (ant \"test\"))</code></pre>

<p>The rest of the code above, just defines some convenient, interactive commands for common targets. <code class=\"inline\">M-x ant-compile</code> will just issue the compile target, likewise for <code class=\"inline\">ant-clean</code>. The only moderately interesting interactive command here is <code class=\"inline\">ant-last</code> which reuses the variable <code class=\"inline\">ant-last-task</code> from above to redo the last compilation.</p>

<p>It doesn't feel like much code, and in all reality it's not. However, it has saved me quite a bit of time, as I don't have to go running to a terminal (either switching buffers, or switching windows entirely) in order to issue an ant task. I just do something I've grown very accustomed to—I issue another Emacs command, and let Emacs take care of it for me.</p>

<ol class=\"footnotes\">
    <li id=\"hiring-1\">We're hiring for <a href=\"http://www.meetup.com/jobs\">most positions</a>.</li>
    <li id=\"output-2\">Most of what I do is related to our product's infrastructure—not interaction, and not engineering new features. My work would be visible if some error leaked to your browser, and that'd probably be bad.</li> 
    <li id=\"errors-3\">It's fairly difficult to trick the compiler, but in Java, for instance, you can write type-safe code using Generics that it can't prove is safe. If you do that though, you should make use the SuppressWarnings annotation to tell the compiler it's OK.</li>
    <li id=\"dominating-4\">Actually, I wasn't surprised that Emacs actually had the functionality, just that the name is non-trivial. I gave up looking for it after a couple of minutes and just rolled my own. I'll replace it in a future version, but the existing code works for now.</li>
</ol>") (author nil (name nil "Andrew Gwozdziewycz") (uri nil "http://sigusr2.net/")) (source nil (title ((type . "html")) "SIGUSR2: tagged emacs") (link ((rel . "self") (href . "http://sigusr2.net/tags/emacs.xml"))) (id nil "md5:ec2c8804a8dac6a866e1a43cfce32fc1")))) ("Matt Harrison: Python and emacs (7): Buffer navigation (point history)" "<p>(Not really Python specific, but useful when navigating/editing Python files.)</p>
<p>Emacs has a notion of current location known as the \"point\".  A while back I wanted a way of keeping track of point history (similar to browser history), so if say I jumped to another buffer and location I could come back later.  I figured this would be an existing feature, just hidden in the bowels of emacs somewhere.  I ended up finding half a solution in <a href=\"http://www.emacswiki.org/emacs/JohnConnors\">John Connors' emacswiki page</a>.  I say half because I wanted the forward buttons (to use my browser metaphor), which he didn't have.  Alas, <a href=\"http://github.com/mattharrison/point-stack\">point-stack</a> is now on github.</p>
<p>Here's a simple screencast:</p>
<center>
<img src=\"http://files.blog-city.com/files/F05/96843/p/f/screenie.gif\" title=\"screenie.gif\" />
</center>
<p>With point stack, I can push my current location to a stack with f5.  (I can push multiple locations too).  To jump back I hit f6 (multiple times if needed).  To go back forward, f7.</p>" "http://panela.blog-city.com/python_and_emacs_7_buffer_navigation_point_history.htm" (19657 43508) new 4 nil nil ((title ((type . "html")) "Matt Harrison: Python and emacs (7): Buffer navigation (point history)") (link ((href . "http://panela.blog-city.com/python_and_emacs_7_buffer_navigation_point_history.htm"))) (id nil "http://panela.blog-city.com/python_and_emacs_7_buffer_navigation_point_history.htm") (updated nil "2010-10-28T16:51:00+00:00") (content ((type . "html")) "<p>(Not really Python specific, but useful when navigating/editing Python files.)</p>
<p>Emacs has a notion of current location known as the \"point\".  A while back I wanted a way of keeping track of point history (similar to browser history), so if say I jumped to another buffer and location I could come back later.  I figured this would be an existing feature, just hidden in the bowels of emacs somewhere.  I ended up finding half a solution in <a href=\"http://www.emacswiki.org/emacs/JohnConnors\">John Connors' emacswiki page</a>.  I say half because I wanted the forward buttons (to use my browser metaphor), which he didn't have.  Alas, <a href=\"http://github.com/mattharrison/point-stack\">point-stack</a> is now on github.</p>
<p>Here's a simple screencast:</p>
<center>
<img src=\"http://files.blog-city.com/files/F05/96843/p/f/screenie.gif\" title=\"screenie.gif\" />
</center>
<p>With point stack, I can push my current location to a stack with f5.  (I can push multiple locations too).  To jump back I hit f6 (multiple times if needed).  To go back forward, f7.</p>") (author nil (name nil "Matt") (uri nil "http://panela.blog-city.com/")) (source nil (title ((type . "html")) "emacs @ panela.blog-city.com") (subtitle ((type . "html")) "(emacs) Discussion of python, open source, linux, wiimotes, development, ajax, etc.") (link ((rel . "self") (href . "http://panela.blog-city.com/read/emacs.rss"))) (id nil "http://panela.blog-city.com/") (rights ((type . "html")) "Copyright 2010 panela.blog-city.com")))) ("Gabriel Saldaña: Good bye Shyam Karanat" "<p><a href=\"http://www.flickr.com/photos/niyam/2399712870/\" title=\"Shyam Karanattu by niyam bhushan, on Flickr\"><img alt=\"Shyam Karanattu\" height=\"180\" src=\"http://farm4.static.flickr.com/3126/2399712870_246f540dfd_m.jpg\" width=\"240\" /></a></p>
<p>This weekend I recieved the sad news that Shyam Karanat passed away.</p>
<p>Although we never met in person, he was a good friend. We mostly talked about <a href=\"http://blog.nethazard.net/identica-mode-for-emacs/#utm_source=feed&amp;utm_medium=feed&amp;utm_campaign=feed\">Emacs Identica-mode</a>, where he made several contributions. Actually, his patches to use url.el were key to releasing the 1.0 version so Identica-mode wouldn’t freeze Emacs anymore while waiting for a server response.</p>
<p>A very smart guy, who also contributed to free software in India a lot (a fact I didn’t know until now). More details on his contributions and his passing in this <a href=\"http://mm.gnu.org.in/pipermail/fsf-friends/2010-September/006587.html\">FSF friends email</a>.</p>
<p>Its very sad news, and he will be missed by his friends and collegues.</p>
<div class=\"sociable\">
<div class=\"sociable_tagline\">
<strong>Share:</strong>
</div>
<ul>
<li class=\"sociablefirst\"><a href=\"http://digg.com/submit?phase=2&amp;url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;bodytext=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"Digg\"><img alt=\"Digg\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/digg.png\" title=\"Digg\" /></a></li>
<li><a href=\"http://delicious.com/post?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;notes=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"del.icio.us\"><img alt=\"del.icio.us\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/delicious.png\" title=\"del.icio.us\" /></a></li>
<li><a href=\"http://technorati.com/faves?add=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Technorati\"><img alt=\"Technorati\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/technorati.png\" title=\"Technorati\" /></a></li>
<li><a href=\"http://reddit.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/reddit.png\" title=\"Reddit\" /></a></li>
<li><a href=\"http://www.stumbleupon.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"StumbleUpon\"><img alt=\"StumbleUpon\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/stumbleupon.png\" title=\"StumbleUpon\" /></a></li>
<li><a href=\"http://www.facebook.com/share.php?u=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;t=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/facebook.png\" title=\"Facebook\" /></a></li>
<li><a href=\"http://meneame.net/submit.php?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Meneame\"><img alt=\"Meneame\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/meneame.png\" title=\"Meneame\" /></a></li>
<li><a href=\"http://www.friendfeed.com/share?title=Good%20bye%20Shyam%20Karanat&amp;link=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"FriendFeed\"><img alt=\"FriendFeed\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/friendfeed.png\" title=\"FriendFeed\" /></a></li>
<li><a href=\"http://identi.ca/notice/new?status_textarea=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Identi.ca\"><img alt=\"Identi.ca\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/identica.png\" title=\"Identi.ca\" /></a></li>
<li><a href=\"http://twitter.com/home?status=Good%20bye%20Shyam%20Karanat%20-%20http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/twitter.png\" title=\"Twitter\" /></a></li>
<li class=\"sociablelast\"><a href=\"http://www.google.com/bookmarks/mark?op=edit&amp;bkmk=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;annotation=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"Google Bookmarks\"><img alt=\"Google Bookmarks\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/googlebookmark.png\" title=\"Google Bookmarks\" /></a></li>
</ul>
</div>
<img alt=\"\" src=\"http://blog.nethazard.net/?ak_action=api_record_view&amp;id=714&amp;type=feed\" />
<p>Related posts:</p><ol><li><a href=\"http://blog.nethazard.net/identica-mode-for-emacs-update-support-for-any-laconica-server/\" rel=\"bookmark\" title=\"Permanent Link: Identica mode for Emacs update: support for any Laconica server\">Identica mode for Emacs update: support for any Laconica server</a></li>
<li><a href=\"http://blog.nethazard.net/emacs-identica-mode-with-multiple-timelines-and-direct-messages/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode with multiple timelines and direct messages\">Emacs identica-mode with multiple timelines and direct messages</a></li>
<li><a href=\"http://blog.nethazard.net/5-ways-to-promote-identi-ca-and-open-microblogging-over-twitter/\" rel=\"bookmark\" title=\"Permanent Link: 5 ways to promote Identi.ca and Open Microblogging over Twitter\">5 ways to promote Identi.ca and Open Microblogging over Twitter</a></li>
</ol><p></p>" "http://blog.nethazard.net/good-bye-shyam-karanat/#utm_source=feed&utm_medium=feed&utm_campaign=feed" (19655 50080) new 5 nil nil ((title ((type . "html") (xml:lang . "en")) "Gabriel Saldaña: Good bye Shyam Karanat") (link ((href . "http://blog.nethazard.net/good-bye-shyam-karanat/#utm_source=feed&utm_medium=feed&utm_campaign=feed"))) (id nil "http://blog.nethazard.net/?p=714") (updated nil "2010-10-27T06:16:00+00:00") (content ((type . "html") (xml:lang . "en")) "<p><a href=\"http://www.flickr.com/photos/niyam/2399712870/\" title=\"Shyam Karanattu by niyam bhushan, on Flickr\"><img alt=\"Shyam Karanattu\" height=\"180\" src=\"http://farm4.static.flickr.com/3126/2399712870_246f540dfd_m.jpg\" width=\"240\" /></a></p>

<p>This weekend I recieved the sad news that Shyam Karanat passed away.</p>

<p>Although we never met in person, he was a good friend. We mostly talked about <a href=\"http://blog.nethazard.net/identica-mode-for-emacs/#utm_source=feed&amp;utm_medium=feed&amp;utm_campaign=feed\">Emacs Identica-mode</a>, where he made several contributions. Actually, his patches to use url.el were key to releasing the 1.0 version so Identica-mode wouldn’t freeze Emacs anymore while waiting for a server response.</p>

<p>A very smart guy, who also contributed to free software in India a lot (a fact I didn’t know until now). More details on his contributions and his passing in this <a href=\"http://mm.gnu.org.in/pipermail/fsf-friends/2010-September/006587.html\">FSF friends email</a>.</p>

<p>Its very sad news, and he will be missed by his friends and collegues.</p>

<div class=\"sociable\">
<div class=\"sociable_tagline\">
<strong>Share:</strong>
</div>
<ul>
	<li class=\"sociablefirst\"><a href=\"http://digg.com/submit?phase=2&amp;url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;bodytext=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"Digg\"><img alt=\"Digg\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/digg.png\" title=\"Digg\" /></a></li>
	<li><a href=\"http://delicious.com/post?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;notes=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"del.icio.us\"><img alt=\"del.icio.us\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/delicious.png\" title=\"del.icio.us\" /></a></li>
	<li><a href=\"http://technorati.com/faves?add=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Technorati\"><img alt=\"Technorati\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/technorati.png\" title=\"Technorati\" /></a></li>
	<li><a href=\"http://reddit.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"Reddit\"><img alt=\"Reddit\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/reddit.png\" title=\"Reddit\" /></a></li>
	<li><a href=\"http://www.stumbleupon.com/submit?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"StumbleUpon\"><img alt=\"StumbleUpon\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/stumbleupon.png\" title=\"StumbleUpon\" /></a></li>
	<li><a href=\"http://www.facebook.com/share.php?u=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;t=Good%20bye%20Shyam%20Karanat\" rel=\"nofollow\" target=\"_blank\" title=\"Facebook\"><img alt=\"Facebook\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/facebook.png\" title=\"Facebook\" /></a></li>
	<li><a href=\"http://meneame.net/submit.php?url=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Meneame\"><img alt=\"Meneame\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/meneame.png\" title=\"Meneame\" /></a></li>
	<li><a href=\"http://www.friendfeed.com/share?title=Good%20bye%20Shyam%20Karanat&amp;link=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"FriendFeed\"><img alt=\"FriendFeed\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/friendfeed.png\" title=\"FriendFeed\" /></a></li>
	<li><a href=\"http://identi.ca/notice/new?status_textarea=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Identi.ca\"><img alt=\"Identi.ca\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/identica.png\" title=\"Identi.ca\" /></a></li>
	<li><a href=\"http://twitter.com/home?status=Good%20bye%20Shyam%20Karanat%20-%20http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F\" rel=\"nofollow\" target=\"_blank\" title=\"Twitter\"><img alt=\"Twitter\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/twitter.png\" title=\"Twitter\" /></a></li>
	<li class=\"sociablelast\"><a href=\"http://www.google.com/bookmarks/mark?op=edit&amp;bkmk=http%3A%2F%2Fblog.nethazard.net%2Fgood-bye-shyam-karanat%2F&amp;title=Good%20bye%20Shyam%20Karanat&amp;annotation=%0D%0A%0D%0AThis%20weekend%20I%20recieved%20the%20sad%20news%20that%20Shyam%20Karanat%20passed%20away.%0D%0A%0D%0AAlthough%20we%20never%20met%20in%20person%2C%20he%20was%20a%20good%20friend.%20We%20mostly%20talked%20about%20Emacs%20Identica-mode%2C%20where%20he%20made%20several%20contributions.%20Actually%2C%20his%20patches%20to%20use%20url.el%20we\" rel=\"nofollow\" target=\"_blank\" title=\"Google Bookmarks\"><img alt=\"Google Bookmarks\" class=\"sociable-hovers\" src=\"http://blog.nethazard.net/wp-content/plugins/sociable/images/googlebookmark.png\" title=\"Google Bookmarks\" /></a></li>
</ul>
</div>
<img alt=\"\" src=\"http://blog.nethazard.net/?ak_action=api_record_view&amp;id=714&amp;type=feed\" />

<p>Related posts:</p><ol><li><a href=\"http://blog.nethazard.net/identica-mode-for-emacs-update-support-for-any-laconica-server/\" rel=\"bookmark\" title=\"Permanent Link: Identica mode for Emacs update: support for any Laconica server\">Identica mode for Emacs update: support for any Laconica server</a></li>
<li><a href=\"http://blog.nethazard.net/emacs-identica-mode-with-multiple-timelines-and-direct-messages/\" rel=\"bookmark\" title=\"Permanent Link: Emacs identica-mode with multiple timelines and direct messages\">Emacs identica-mode with multiple timelines and direct messages</a></li>
<li><a href=\"http://blog.nethazard.net/5-ways-to-promote-identi-ca-and-open-microblogging-over-twitter/\" rel=\"bookmark\" title=\"Permanent Link: 5 ways to promote Identi.ca and Open Microblogging over Twitter\">5 ways to promote Identi.ca and Open Microblogging over Twitter</a></li>
</ol><p></p>") (author nil (name nil "Gabriel Saldaña") (uri nil "http://blog.nethazard.net")) (source nil (title ((type . "html")) "Nethazard.net » Emacs") (subtitle ((type . "html")) "Gabriel Saldana's blog about web development, free software and other lifestyle topics") (link ((rel . "self") (href . "http://blog.nethazard.net/category/emacs/feed/"))) (id nil "http://blog.nethazard.net")))) ("Yoni Rabkin Katzenell: rtliberation.py revamp: embrace the breakage" "I've updated rtliberation.py in two ways: First of all I took the opportunity to make the script more \"Pythonic\". Let me translate that for you: I had fun re-writing parts which worked fine into code I don't really understand which will now break in ways I don't know how to debug. Second is that the script will wait and retry the command a set number of times with a set delay until finally giving up; which is useful for gliding over server hiccups.<br /><br />Read below if you don't know what is rtliberation.py:<br /><br /><i>rtliberation.py</i> is a short Python script which uses the <a href=\"http://wiki.bestpractical.com/view/CLI\">RT CLI</a> to download tickets from RT to a local ticket flatfile database. The local flatfile database is just a hierarchy of directories containing the year, month and finally <i>.txt</i> files named after the ticket ID number.<br /><br />It can also list all of the tickets which are on-disk but were deleted from the server. This is useful if you delete spam and such _after_ it reaches RT.<br /><br />You can <b>git clone <a href=\"http://yrk.nfshost.com/repos/rtliberation/\">http://yrk.nfshost.com/repos/rtliberation/</a></b> to get a copy of rtliberation.py.<br /><br />Once again: no relation to <i>rt-liberation.el</i>, my GNU/Emacs interface to RT." "http://yrk.livejournal.com/284984.html" (19654 16750) new 6 nil nil ((title ((type . "html")) "Yoni Rabkin Katzenell: rtliberation.py revamp: embrace the breakage") (link ((href . "http://yrk.livejournal.com/284984.html"))) (id nil "urn:lj:livejournal.com:atom1:yrk:284984") (updated nil "2010-10-26T02:48:14+00:00") (content ((type . "html")) "I've updated rtliberation.py in two ways: First of all I took the opportunity to make the script more \"Pythonic\". Let me translate that for you: I had fun re-writing parts which worked fine into code I don't really understand which will now break in ways I don't know how to debug. Second is that the script will wait and retry the command a set number of times with a set delay until finally giving up; which is useful for gliding over server hiccups.<br /><br />Read below if you don't know what is rtliberation.py:<br /><br /><i>rtliberation.py</i> is a short Python script which uses the <a href=\"http://wiki.bestpractical.com/view/CLI\">RT CLI</a> to download tickets from RT to a local ticket flatfile database. The local flatfile database is just a hierarchy of directories containing the year, month and finally <i>.txt</i> files named after the ticket ID number.<br /><br />It can also list all of the tickets which are on-disk but were deleted from the server. This is useful if you delete spam and such _after_ it reaches RT.<br /><br />You can <b>git clone <a href=\"http://yrk.nfshost.com/repos/rtliberation/\">http://yrk.nfshost.com/repos/rtliberation/</a></b> to get a copy of rtliberation.py.<br /><br />Once again: no relation to <i>rt-liberation.el</i>, my GNU/Emacs interface to RT.") (author nil (name nil "yrk") (uri nil "http://yrk.livejournal.com/")) (source nil (title ((type . "html")) "Talk is talk, kill is kill") (subtitle ((type . "html")) "The online journal of yrk") (link ((rel . "self") (href . "http://yrk.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:yrk")))) ("Trey Jackson: Emacs Tip #38: Automatically diff binary files using hexl-mode" "I saw a question on Stack Overflow which referred to a non-free (as in beer) file comparison application.  My first thought was, \"people pay for this?\"  Sure enough, there are quite a few non-free file comparison tools.  Which leads to the question, what do they offer that I'm not getting in Emacs (using ediff).  From the table on Wikipedia, it appears not too much.  I updated a couple of fields" "http://trey-jackson.blogspot.com/2010/10/emacs-tip-38-automatically-diff-binary.html" (19652 62893) new 7 nil nil ((title ((type . "html")) "Trey Jackson: Emacs Tip #38: Automatically diff binary files using hexl-mode") (link ((href . "http://trey-jackson.blogspot.com/2010/10/emacs-tip-38-automatically-diff-binary.html"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968.post-1498412805827285430") (updated nil "2010-10-25T03:12:45+00:00") (content ((type . "html")) "I saw a question on Stack Overflow which referred to a non-free (as in beer) file comparison application.  My first thought was, \"people pay for this?\"  Sure enough, there are quite a few non-free file comparison tools.  Which leads to the question, what do they offer that I'm not getting in Emacs (using ediff).  From the table on Wikipedia, it appears not too much.  I updated a couple of fields") (author nil (name nil "BFW") (email nil "noreply@blogger.com") (uri nil "http://trey-jackson.blogspot.com/")) (source nil (title ((type . "html")) "Life Is Too Short For Bad Code") (subtitle ((type . "html")) "Random musings about programming, software, technical interviews, and of course Emacs - a tip every week for new and experienced users.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/2304251215826746968/posts/default"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968")))) ("Emacs-fu: auto-complete-mode" "<p>Recently, we <a href=\"http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html\">discussed CEDET</a> in the interview with Eric Ludlam. CEDET has a deep
understanding of the source code, and assists the development process by
exploiting that knowledge. For example by drawing class diagrams (<a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a>) or
providing auto-completion for function names and parameters.
</p>
<p>
Currently, however, CEDET is also be a bit hard to set up effectively, and may
also not support your programming language yet. Therefore, it's still useful to
look at some other packages that can substitute (part of) the functionality.
</p>
<p>
For me, <a href=\"http://cx4a.org/software/auto-complete/\">auto-complete-mode</a> has been very useful for that. It's not as fancy as
CEDET in the sense that it does not really <i>understand</i> the code – but in
practice I found it to work quite well for both C/C++, Elisp and shell scripts.
It can even display the docstrings of functions. And when editing shell-scripts,
it can complete path names as you are editing the scripts; very nice.
</p>
<p>
To install, follow the <a href=\"http://cx4a.org/software/auto-complete/manual.html#Installation\">instructions</a>. Then, in your <code>.emacs</code>, have something
like:
</p>
<pre class=\"src src-elisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">auto-complete-config</span> nil 'noerror) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't break if not installed </span>
(add-to-list 'ac-dictionary-directories <span class=\"org-string\">\"~/.emacs.d/ac-dict\"</span>)
(<span class=\"org-keyword\">setq</span> ac-comphist-file  <span class=\"org-string\">\"~/.emacs.d/ac-comphist.dat\"</span>)
(ac-config-default))
</pre>
<p>
After that, <code>M-x auto-complete-mode</code> to start using it. Alternatively, there's a
<a href=\"http://www.youtube.com/watch?v=rGVVnDxwJYE\">YouTube-video</a> explaining how to install and use <code>auto-complete-mode</code>;
recommended. In any case, it is <a href=\"http://cx4a.org/software/auto-complete/manual.html\">fully documented</a>.
</p>
<p>
<code>auto-complete-mode</code> uses a configurable set of <i>sources</i> from which it takes it
knowledge about what can be completed. For example, when writing in <code>org-mode</code>,
it takes its input from
</p>
<pre class=\"src src-elisp\">(ac-source-filename ac-source-abbrev ac-source-dictionary
ac-source-words-in-same-mode-buffers)
</pre>
<p>
while in a <code>c-mode</code> buffer it is (in my case):
</p>
<pre class=\"src src-elisp\">(ac-source-filename ac-source-yasnippet ac-source-gtags ac-source-abbrev
ac-source-dictionary ac-source-words-in-same-mode-buffers)
</pre>
<p>
You can customize this, and (for the more ambitious), it's possible to add your
own sources as well.
</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-3394448227791083888?l=emacs-fu.blogspot.com\" width=\"1\" /></div>" "http://emacs-fu.blogspot.com/2010/10/auto-complete-mode.html" (19652 19403) new 8 nil nil ((title ((type . "html")) "Emacs-fu: auto-complete-mode") (link ((href . "http://emacs-fu.blogspot.com/2010/10/auto-complete-mode.html"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-3394448227791083888") (updated nil "2010-10-24T15:07:55+00:00") (content ((type . "html")) "<p>Recently, we <a href=\"http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html\">discussed CEDET</a> in the interview with Eric Ludlam. CEDET has a deep
understanding of the source code, and assists the development process by
exploiting that knowledge. For example by drawing class diagrams (<a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a>) or
providing auto-completion for function names and parameters.
</p>
<p>
Currently, however, CEDET is also be a bit hard to set up effectively, and may
also not support your programming language yet. Therefore, it's still useful to
look at some other packages that can substitute (part of) the functionality.
</p>
<p>
For me, <a href=\"http://cx4a.org/software/auto-complete/\">auto-complete-mode</a> has been very useful for that. It's not as fancy as
CEDET in the sense that it does not really <i>understand</i> the code – but in
practice I found it to work quite well for both C/C++, Elisp and shell scripts.
It can even display the docstrings of functions. And when editing shell-scripts,
it can complete path names as you are editing the scripts; very nice.
</p>
<p>
To install, follow the <a href=\"http://cx4a.org/software/auto-complete/manual.html#Installation\">instructions</a>. Then, in your <code>.emacs</code>, have something
like:
</p>


<pre class=\"src src-elisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">auto-complete-config</span> nil 'noerror) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't break if not installed </span>
(add-to-list 'ac-dictionary-directories <span class=\"org-string\">\"~/.emacs.d/ac-dict\"</span>)
  (<span class=\"org-keyword\">setq</span> ac-comphist-file  <span class=\"org-string\">\"~/.emacs.d/ac-comphist.dat\"</span>)
  (ac-config-default))
</pre>



<p>
After that, <code>M-x auto-complete-mode</code> to start using it. Alternatively, there's a
<a href=\"http://www.youtube.com/watch?v=rGVVnDxwJYE\">YouTube-video</a> explaining how to install and use <code>auto-complete-mode</code>;
recommended. In any case, it is <a href=\"http://cx4a.org/software/auto-complete/manual.html\">fully documented</a>.
</p>
<p>
<code>auto-complete-mode</code> uses a configurable set of <i>sources</i> from which it takes it
knowledge about what can be completed. For example, when writing in <code>org-mode</code>,
it takes its input from
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-abbrev ac-source-dictionary
 ac-source-words-in-same-mode-buffers)
</pre>


<p>
while in a <code>c-mode</code> buffer it is (in my case):
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-yasnippet ac-source-gtags ac-source-abbrev
ac-source-dictionary ac-source-words-in-same-mode-buffers)
</pre>


<p>
You can customize this, and (for the more ambitious), it's possible to add your
own sources as well.
</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3992530807750384868-3394448227791083888?l=emacs-fu.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "djcb") (email nil "noreply@blogger.com") (uri nil "http://emacs-fu.blogspot.com/search/label/new")) (source nil (title ((type . "html")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/-/new"))) (id nil "tag:blogger.com,1999:blog-3992530807750384868")))) ("Flickr tag 'emacs': emacs-muse-slidy" "<p><a href=\"http://www.flickr.com/people/arciniegas/\">Fabio Arciniegas</a> posted a video:</p>
<p><a href=\"http://www.flickr.com/photos/arciniegas/5108022392/\" title=\"emacs-muse-slidy\"><img alt=\"emacs-muse-slidy\" height=\"180\" src=\"http://farm2.static.flickr.com/1141/5108022392_3eb3bd0f60_m.jpg\" width=\"240\" /></a></p>
<p><a href=\"http://code.google.com/p/muse-html-slidy/\" rel=\"nofollow\">code.google.com/p/muse-html-slidy/</a><br />
<br />
A quick way to replace PPT for emacs users. The user writes simple text files with a minimal wiki-like format and the output is a full presentation.<br />
<br />
The project relies on emacs muse for parsing and html-slidy for slide functionality. It provides a number of useful features like the embedding of local images inside the xhtml file.</p>" "http://www.flickr.com/photos/arciniegas/5108022392/" (19651 5564) new 9 nil nil ((title ((type . "html")) "Flickr tag 'emacs': emacs-muse-slidy") (link ((href . "http://www.flickr.com/photos/arciniegas/5108022392/"))) (id nil "tag:flickr.com,2004:/photo/5108022392") (updated nil "2010-10-23T17:05:00+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/arciniegas/\">Fabio Arciniegas</a> posted a video:</p>
	
<p><a href=\"http://www.flickr.com/photos/arciniegas/5108022392/\" title=\"emacs-muse-slidy\"><img alt=\"emacs-muse-slidy\" height=\"180\" src=\"http://farm2.static.flickr.com/1141/5108022392_3eb3bd0f60_m.jpg\" width=\"240\" /></a></p>

<p><a href=\"http://code.google.com/p/muse-html-slidy/\" rel=\"nofollow\">code.google.com/p/muse-html-slidy/</a><br />
<br />
A quick way to replace PPT for emacs users. The user writes simple text files with a minimal wiki-like format and the output is a full presentation.<br />
<br />
The project relies on emacs muse for parsing and html-slidy for slide functionality. It provides a number of useful features like the embedding of local images inside the xhtml file.</p>") (author nil (name nil "Fabio Arciniegas") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Matt Keller: Announce: mk-project 1.5" "<p>I've just pushed release 1.5.1 of mk-project to <a href=\"http://github.com/mattkeller/mk-project/tree/1.5.1\">github</a> and <a href=\"http://www.emacswiki.org/emacs/mk-project.el\">the emacs wiki</a>. The changes since release 1.4 include ideas and code contributed by Andreas Raster. Here's a summary of the improvements:</p>
<ul>
<li>Previously, a project's compile command could only be a string to be interpreted as a shell command (think \"make\"). Now the compile command can also be a Emacs lisp function name. Flexibility is good.</li>
<li>The project-status command now prints the project status to buffer *project-status* instead of *Messages*.</li>
<li>Several commands now have optional arguments which allow them to be called programmatically as well as interactively. The affected commands are project-load, project-grep, and project-ack. So now you can call <code>(project-load \"my-project\")</code> or <code>(project-grep \"TODO\")</code> from your own code.</li>
<li>The code will now ignore \"_darcs\" directories if you set the vcs type to 'darcs.</li>
<li>Finally, mk-project now has a menu!</li>
</ul>
<p><img alt=\"mk-project's menu screenshot\" src=\"http://www.littleredbat.net/mk/files/mk-project-menu.png\" /></p>
<p>Enjoy!</p>" "http://www.littleredbat.net/mk/blog/story/86/" (19650 52428) new 10 nil nil ((title ((type . "html")) "Matt Keller: Announce: mk-project 1.5") (link ((href . "http://www.littleredbat.net/mk/blog/story/86/"))) (id nil "urn:uuid:02328007-4896-3C9E-8139-DFB5B3DD3D31") (updated nil "2010-10-23T11:53:48+00:00") (content ((type . "html")) "<p>I've just pushed release 1.5.1 of mk-project to <a href=\"http://github.com/mattkeller/mk-project/tree/1.5.1\">github</a> and <a href=\"http://www.emacswiki.org/emacs/mk-project.el\">the emacs wiki</a>. The changes since release 1.4 include ideas and code contributed by Andreas Raster. Here's a summary of the improvements:</p>

<ul>
<li>Previously, a project's compile command could only be a string to be interpreted as a shell command (think \"make\"). Now the compile command can also be a Emacs lisp function name. Flexibility is good.</li>
<li>The project-status command now prints the project status to buffer *project-status* instead of *Messages*.</li>
<li>Several commands now have optional arguments which allow them to be called programmatically as well as interactively. The affected commands are project-load, project-grep, and project-ack. So now you can call <code>(project-load \"my-project\")</code> or <code>(project-grep \"TODO\")</code> from your own code.</li>
<li>The code will now ignore \"_darcs\" directories if you set the vcs type to 'darcs.</li>
<li>Finally, mk-project now has a menu!</li>
</ul>

<p><img alt=\"mk-project's menu screenshot\" src=\"http://www.littleredbat.net/mk/files/mk-project-menu.png\" /></p>

<p>Enjoy!</p>") (author nil (name nil "Matt Keller") (uri nil "http://www.littleredbat.net/mk/blog/category/emacs/")) (source nil (title ((type . "html")) "littleredbat.net/mk: blog (emacs)") (link ((rel . "self") (href . "http://www.littleredbat.net/mk/blog/atom-emacs.xml"))) (id nil "urn:uuid:1CA2AE66-F282-3C75-813F-B51A729C8B6E") (rights ((type . "html")) "http://creativecommons.org/licenses/by/2.5/")))) ("Yoni Rabkin Katzenell: an opening!" "I wrote my sole Python program, rt-liberation.py, back at the end of 2008 and it has been humming quietly on an FSF server ever since. But now that I received a feature request I have the excuse to do some more Python. I'm grateful for the opportunity.<br /><br />So I got a copy of <a href=\"http://www.logilab.org/857\">pylint</a> and started to follow <a href=\"http://www.emacswiki.org/emacs/PythonProgrammingInEmacs\">the instructions on the Python Programming page</a>... which got me nowhere. Especially since I remembered that I don't like flymake any more than I'd like someone standing next to me and tapping my shoulder every other second while I try to write.<br /><br />Then I found that pylint comes with an <code>elisp</code> directory which includes <code>pylint.el</code>. You have to add a <code>(provide 'pylint)</code> to the end of the file if you want to load it in the standard manner but other than that it allows me to hammer out <b>M-x pylint</b> and get an endless buffer of errors, comments and warnings.<br /><br />I should add a special mode to pylint.el: After outputting over 300 lines of complaints it should add one at the end: \"...you don't really know Python, do you...\"" "http://yrk.livejournal.com/284901.html" (19650 21050) new 11 nil nil ((title ((type . "html")) "Yoni Rabkin Katzenell: an opening!") (link ((href . "http://yrk.livejournal.com/284901.html"))) (id nil "urn:lj:livejournal.com:atom1:yrk:284901") (updated nil "2010-10-23T03:10:50+00:00") (content ((type . "html")) "I wrote my sole Python program, rt-liberation.py, back at the end of 2008 and it has been humming quietly on an FSF server ever since. But now that I received a feature request I have the excuse to do some more Python. I'm grateful for the opportunity.<br /><br />So I got a copy of <a href=\"http://www.logilab.org/857\">pylint</a> and started to follow <a href=\"http://www.emacswiki.org/emacs/PythonProgrammingInEmacs\">the instructions on the Python Programming page</a>... which got me nowhere. Especially since I remembered that I don't like flymake any more than I'd like someone standing next to me and tapping my shoulder every other second while I try to write.<br /><br />Then I found that pylint comes with an <code>elisp</code> directory which includes <code>pylint.el</code>. You have to add a <code>(provide 'pylint)</code> to the end of the file if you want to load it in the standard manner but other than that it allows me to hammer out <b>M-x pylint</b> and get an endless buffer of errors, comments and warnings.<br /><br />I should add a special mode to pylint.el: After outputting over 300 lines of complaints it should add one at the end: \"...you don't really know Python, do you...\"") (author nil (name nil "yrk") (uri nil "http://yrk.livejournal.com/")) (source nil (title ((type . "html")) "Talk is talk, kill is kill") (subtitle ((type . "html")) "The online journal of yrk") (link ((rel . "self") (href . "http://yrk.livejournal.com/data/atom"))) (id nil "urn:lj:livejournal.com:atom1:yrk")))) ("Matt Harrison: Proof that Python and Academia mesh" "<center><img src=\"http://files.blog-city.com/files/F05/96843/p/f/greek.png\" /></center>
<p><a href=\"http://github.com/ehamberg/vim-cute-python\">A link on reddit python</a> led to fun <a href=\"http://github.com/mattharrison/pretty-mode\">tweaking of emacs</a>.</p>" "http://panela.blog-city.com/proof_that_python_and_academia_mesh.htm" (19649 3376) new 12 nil nil ((title ((type . "html")) "Matt Harrison: Proof that Python and Academia mesh") (link ((href . "http://panela.blog-city.com/proof_that_python_and_academia_mesh.htm"))) (id nil "http://panela.blog-city.com/proof_that_python_and_academia_mesh.htm") (updated nil "2010-10-22T04:04:00+00:00") (content ((type . "html")) "<center><img src=\"http://files.blog-city.com/files/F05/96843/p/f/greek.png\" /></center>
<p><a href=\"http://github.com/ehamberg/vim-cute-python\">A link on reddit python</a> led to fun <a href=\"http://github.com/mattharrison/pretty-mode\">tweaking of emacs</a>.</p>") (author nil (name nil "Matt") (uri nil "http://panela.blog-city.com/")) (source nil (title ((type . "html")) "emacs @ panela.blog-city.com") (subtitle ((type . "html")) "(emacs) Discussion of python, open source, linux, wiimotes, development, ajax, etc.") (link ((rel . "self") (href . "http://panela.blog-city.com/read/emacs.rss"))) (id nil "http://panela.blog-city.com/") (rights ((type . "html")) "Copyright 2010 panela.blog-city.com")))) ("Ruslan Spivak: Swapping lines" "<p>Being able to swap lines in Emacs with <strong><em>C-x C-t</em></strong> comes in handy when I edit Python code and want to prettify some imports:</p>
<pre style=\"color: #f8f8f8; background-color: #0c1021; font-size: 8pt;\"><span style=\"color: #fbde2d;\">import</span> sys
<span style=\"color: #fbde2d;\">import</span> os</pre>
<p>I move cursor to a line that I want to swap, in this case <strong><em>import os</em></strong>, and press <strong><em>C-x C-t</em></strong> which exchanges the current line and a previous line:</p>
<pre style=\"color: #f8f8f8; background-color: #0c1021; font-size: 8pt;\"><span style=\"color: #fbde2d;\">import</span> os
<span style=\"color: #fbde2d;\">import</span> sys</pre>
<p>A very basic and simple operation. And while the same can be accomplished with cutting and pasting – swapping is faster in this case.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ruslanspivak.wordpress.com/486/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ruslanspivak.com&amp;blog=1522719&amp;post=486&amp;subd=ruslanspivak&amp;ref=&amp;feed=1\" width=\"1\" />" "http://ruslanspivak.com/2010/10/21/swapping-lines/" (19648 61825) new 13 nil nil ((title ((type . "html") (xml:lang . "en")) "Ruslan Spivak: Swapping lines") (link ((href . "http://ruslanspivak.com/2010/10/21/swapping-lines/"))) (id nil "http://ruslanspivak.com/?p=486") (updated nil "2010-10-22T02:05:53+00:00") (content ((type . "html") (xml:lang . "en")) "<p>Being able to swap lines in Emacs with <strong><em>C-x C-t</em></strong> comes in handy when I edit Python code and want to prettify some imports:</p>
<pre style=\"color: #f8f8f8; background-color: #0c1021; font-size: 8pt;\"><span style=\"color: #fbde2d;\">import</span> sys
<span style=\"color: #fbde2d;\">import</span> os</pre>
<p>I move cursor to a line that I want to swap, in this case <strong><em>import os</em></strong>, and press <strong><em>C-x C-t</em></strong> which exchanges the current line and a previous line:</p>
<pre style=\"color: #f8f8f8; background-color: #0c1021; font-size: 8pt;\"><span style=\"color: #fbde2d;\">import</span> os
<span style=\"color: #fbde2d;\">import</span> sys</pre>
<p>A very basic and simple operation. And while the same can be accomplished with cutting and pasting – swapping is faster in this case.</p>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ruslanspivak.wordpress.com/486/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ruslanspivak.wordpress.com/486/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ruslanspivak.wordpress.com/486/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ruslanspivak.com&amp;blog=1522719&amp;post=486&amp;subd=ruslanspivak&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "Ruslan Spivak") (uri nil "http://ruslanspivak.com")) (source nil (title ((type . "html")) "Ruslan's Blog » emacs") (subtitle ((type . "html")) "Musings on dynamic languages and more than that") (link ((rel . "self") (href . "http://ruslanspivak.com/category/emacs/feed/"))) (id nil "http://ruslanspivak.com")))) ("Bryan Murdock: My .emacs is now in Mercurial" "<p>A while ago I decided to start maintaining my .emacs file under revision control.  I picked git because it seemed like the cool thing to do.  I put it <a href=\"http://gitorious.org/bryan-s-dot-emacs\">on gitorious</a> so that I could easily sync it with my home and work machines, and it was public in the off chance that it might help out some other emacs user.  Today I <a href=\"http://stackoverflow.com/questions/491554/how-do-i-convert-a-git-repository-to-mercurial\">converted</a> it from git to mercurial, because for some reason</p>
<pre><code>hg incoming</code></pre>
<p>is more intuitive and easier for me to remember than</p>
<pre><code>git fetch &amp;&amp; git log ..origin/master</code></pre><p></p>
<p>Maybe I'm weird that way.  Anyway, the new repo is <a href=\"http://bitbucket.org/krupan/bryans-dot-emacs/\">on bitbucket</a>.  That is all.</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3669809752172683097-6340277618022645653?l=bryan-murdock.blogspot.com\" width=\"1\" /></div>" "http://bryan-murdock.blogspot.com/2010/10/my-emacs-is-now-in-mercurial.html" (19648 46191) new 14 nil nil ((title ((type . "html")) "Bryan Murdock: My .emacs is now in Mercurial") (link ((href . "http://bryan-murdock.blogspot.com/2010/10/my-emacs-is-now-in-mercurial.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-6340277618022645653") (updated nil "2010-10-21T21:45:19+00:00") (content ((type . "html")) "<p>A while ago I decided to start maintaining my .emacs file under revision control.  I picked git because it seemed like the cool thing to do.  I put it <a href=\"http://gitorious.org/bryan-s-dot-emacs\">on gitorious</a> so that I could easily sync it with my home and work machines, and it was public in the off chance that it might help out some other emacs user.  Today I <a href=\"http://stackoverflow.com/questions/491554/how-do-i-convert-a-git-repository-to-mercurial\">converted</a> it from git to mercurial, because for some reason</p>

<pre><code>hg incoming</code></pre>

<p>is more intuitive and easier for me to remember than</p>

<pre><code>git fetch &amp;&amp; git log ..origin/master</code></pre><p></p>

<p>Maybe I'm weird that way.  Anyway, the new repo is <a href=\"http://bitbucket.org/krupan/bryans-dot-emacs/\">on bitbucket</a>.  That is all.</p><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3669809752172683097-6340277618022645653?l=bryan-murdock.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097")))) ("Bryan Murdock: How to Disable Ubuntu command-not-found" "<p>Ubuntu, in all its helpfulness, has a feature that tries to guess what you mean when you type commands at the bash prompt.  If you type a command that's found, it runs it, of course.  If you type a command that it can't find, it takes a moment to search available packages for install and suggest what you might do to make that command available.  It sometimes looks like this:
</p><pre><code>$ foo
No command 'foo' found, did you mean:
Command 'xoo' from package 'xoo' (universe)
Command 'fop' from package 'fop' (universe)
Command 'fox' from package 'objcryst-fox' (universe)
Command 'zoo' from package 'zoo' (universe)
Command 'goo' from package 'goo' (universe)
foo: command not found
</code></pre>
It's great when you have a new system and you haven't yet installed everything you need.  Type <code>emacs</code> before emacs has been installed, and it will helpfully tell you the exact command to use to install it.  After a while, though, you have all the packages you need, and the only time you see this feature in action is when you mistype something.  When this happens to me, all the package suggestions and apt-get commands are just annoying.  This, for example, is not helpful:
<pre><code>$ les foo.txt
The program 'les' is currently not installed.  You can install it by typing:
sudo apt-get install atm-tools
les: command not found
</code></pre>
I'd much rather see this quick, short message so that I can get on with fixing my mistake by adding another 's':
<pre><code>$ les foo.txt
-bash: les: command not found
</code></pre>
I finally found <a href=\"http://techthrob.com/2010/06/04/how-to-disable-command-not-found-in-ubuntu/comment-page-1/#comment-12448\">how to fix it</a>.  Put this line in your <code>.bashrc</code>:
<pre><code>unset command_not_found_handle</code></pre>
Much better.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3669809752172683097-179516258916309439?l=bryan-murdock.blogspot.com\" width=\"1\" /></div>" "http://bryan-murdock.blogspot.com/2010/10/how-to-disable-ubuntu-command-not-found.html" (19648 24687) new 15 nil nil ((title ((type . "html")) "Bryan Murdock: How to Disable Ubuntu command-not-found") (link ((href . "http://bryan-murdock.blogspot.com/2010/10/how-to-disable-ubuntu-command-not-found.html"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097.post-179516258916309439") (updated nil "2010-10-21T15:46:55+00:00") (content ((type . "html")) "<p>Ubuntu, in all its helpfulness, has a feature that tries to guess what you mean when you type commands at the bash prompt.  If you type a command that's found, it runs it, of course.  If you type a command that it can't find, it takes a moment to search available packages for install and suggest what you might do to make that command available.  It sometimes looks like this:

</p><pre><code>$ foo
No command 'foo' found, did you mean:
 Command 'xoo' from package 'xoo' (universe)
 Command 'fop' from package 'fop' (universe)
 Command 'fox' from package 'objcryst-fox' (universe)
 Command 'zoo' from package 'zoo' (universe)
 Command 'goo' from package 'goo' (universe)
foo: command not found
</code></pre>

It's great when you have a new system and you haven't yet installed everything you need.  Type <code>emacs</code> before emacs has been installed, and it will helpfully tell you the exact command to use to install it.  After a while, though, you have all the packages you need, and the only time you see this feature in action is when you mistype something.  When this happens to me, all the package suggestions and apt-get commands are just annoying.  This, for example, is not helpful:

<pre><code>$ les foo.txt
The program 'les' is currently not installed.  You can install it by typing:
sudo apt-get install atm-tools
les: command not found
</code></pre>

I'd much rather see this quick, short message so that I can get on with fixing my mistake by adding another 's':

<pre><code>$ les foo.txt
-bash: les: command not found
</code></pre>

I finally found <a href=\"http://techthrob.com/2010/06/04/how-to-disable-command-not-found-in-ubuntu/comment-page-1/#comment-12448\">how to fix it</a>.  Put this line in your <code>.bashrc</code>:

<pre><code>unset command_not_found_handle</code></pre>

Much better.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3669809752172683097-179516258916309439?l=bryan-murdock.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Bryan") (email nil "noreply@blogger.com") (uri nil "http://bryan-murdock.blogspot.com/")) (source nil (title ((type . "html")) "Cyclopedia Square") (link ((rel . "self") (href . "http://www.blogger.com/feeds/3669809752172683097/posts/default"))) (id nil "tag:blogger.com,1999:blog-3669809752172683097")))) ("Vinh Nguyen: Emacs’ universal/prefix argument" "<div class=\"topsy_widget_data topsy_theme_jade\" style=\"float: right; margin-left: 0.75em;\"></div>
<p>I’ve used <code>C-u</code> as a prefix to many key presses in emacs and conkeror before.  I never really knew what it did.  Recently, I read <a href=\"http://emacs-fu.blogspot.com/2010/07/some-handy-key-bindings.html\">this</a> that show you how to repeat commands by typing <code>M-#</code>, where <code>#</code> is a number such as 5 or 100, before a command, such as <code>C-n</code> or <code>0</code>.  I’ve also read function definitions in different <code>.el</code> files or emacs’ documentation that speaks of function arguments.  I knew that emacs commands correspond to functions, but I never knew how to pass in arguments.</p>
<p>Basically, <code>C-u #</code> and <code>M-#</code> (substitute <code>#</code> with a number) passes numeric arguments to the function called.  <code>C-u</code> without <code>#</code> is equivalent to <code>M-4</code>.  Read <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Arguments.html\">this</a> for a more thorough explanation.  <a href=\"http://www.emacswiki.org/emacs/PrefixArgument\">This</a> shows how one can “overload” a function using the prefix argument.</p>" "http://blog.nguyenvq.com/2010/10/20/emacs-universalprefix-argument/" (19647 22226) new 16 nil nil ((title ((type . "html") (xml:lang . "en")) "Vinh Nguyen: Emacs’ universal/prefix argument") (link ((href . "http://blog.nguyenvq.com/2010/10/20/emacs-universalprefix-argument/"))) (id nil "http://blog.nguyenvq.com/?p=749") (updated nil "2010-10-20T20:53:38+00:00") (content ((type . "html") (xml:lang . "en")) "<div class=\"topsy_widget_data topsy_theme_jade\" style=\"float: right; margin-left: 0.75em;\"></div>
<p>I’ve used <code>C-u</code> as a prefix to many key presses in emacs and conkeror before.  I never really knew what it did.  Recently, I read <a href=\"http://emacs-fu.blogspot.com/2010/07/some-handy-key-bindings.html\">this</a> that show you how to repeat commands by typing <code>M-#</code>, where <code>#</code> is a number such as 5 or 100, before a command, such as <code>C-n</code> or <code>0</code>.  I’ve also read function definitions in different <code>.el</code> files or emacs’ documentation that speaks of function arguments.  I knew that emacs commands correspond to functions, but I never knew how to pass in arguments.</p>

<p>Basically, <code>C-u #</code> and <code>M-#</code> (substitute <code>#</code> with a number) passes numeric arguments to the function called.  <code>C-u</code> without <code>#</code> is equivalent to <code>M-4</code>.  Read <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Arguments.html\">this</a> for a more thorough explanation.  <a href=\"http://www.emacswiki.org/emacs/PrefixArgument\">This</a> shows how one can “overload” a function using the prefix argument.</p>") (author nil (name nil "Vinh Nguyen") (uri nil "http://blog.nguyenvq.com")) (source nil (title ((type . "html")) "Super Nerdy Cool » emacs") (subtitle ((type . "html")) "My (technical) adventures through the professional world...") (link ((rel . "self") (href . "http://blog.nguyenvq.com/category/emacs/feed/"))) (id nil "http://blog.nguyenvq.com")))) ("Julien Danjou: No more dashes in Emacs 24 mode-line" "<p class=\"first\">We all know the good old Emacs mode-line you got under every window. Since
the beginning (a long time ago), it starts and ends with dashes. I've
proposed <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2010-10/msg00675.html\">a patch</a> to remove them.</p>
<p>Before:</p>
<center>
<p><img alt=\"\" src=\"http://julien.danjou.info/images/emacs-dashes.png\" /></p>
</center>
<p>After:</p>
<center>
<p><img alt=\"\" src=\"http://julien.danjou.info/images/emacs-no-dashes.png\" /></p>
</center>
<p>This has been merged in Emacs 24. You won't see any more ugly dashes in
graphical mode.</p>
<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>" "http://julien.danjou.info/blog/index.html#No_more_dashes_in_Emacs__mode-line" (19646 52204) new 17 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: No more dashes in Emacs 24 mode-line") (link ((href . "http://julien.danjou.info/blog/index.html#No_more_dashes_in_Emacs__mode-line"))) (id nil "http://julien.danjou.info/blog/index.html#No_more_dashes_in_Emacs__mode-line") (updated nil "2010-10-20T11:01:00+00:00") (content ((type . "html")) "<p class=\"first\">We all know the good old Emacs mode-line you got under every window. Since
the beginning (a long time ago), it starts and ends with dashes. I've
proposed <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2010-10/msg00675.html\">a patch</a> to remove them.</p>

<p>Before:</p>

<center>
<p><img alt=\"\" src=\"http://julien.danjou.info/images/emacs-dashes.png\" /></p>
</center>

<p>After:</p>

<center>
<p><img alt=\"\" src=\"http://julien.danjou.info/images/emacs-no-dashes.png\" /></p>
</center>

<p>This has been merged in Emacs 24. You won't see any more ugly dashes in
graphical mode.</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html")))) ("Johan Andersson: Enclose and Wrap Region" "<p>Wrap Region is an Emacs minor mode that wraps a region with
punctuations, much like in TextMate.</p>
<p>When no region is selected and a wrap key is pressed, Wrap Region
would insert both punctuations and place the cursor in between, also
much like in TextMate.</p>
<p>In my opinion, since I like to keep things to the point, Wrap Region
should do one job (wrap text) and do that good. That's why I decided
to split up Wrap Region into <strong>Wrap Region</strong> and <strong>Enclose</strong>.</p>
<h2>Wrap Region</h2>
<pre>Wraps selected text with punctuations or tag. If no region is selected, fall back.</pre>
<p>Works like before, only that the double insertion of punctuations is gone.</p>
<p>Source: <a href=\"http://github.com/rejeep/wrap-region\">http://github.com/rejeep/wrap-region</a></p>
<h2>Enclose</h2>
<pre>Enclose cursor within punctuations. If region is selected, fall back.</pre>
<p>Enclose mode was built from scratch, with inspiration taken from
TextMate. Enclose keeps a hash with keys that will enclose. Pressing
any of those keys will insert that key and its right buddy, and place
the cursor in between.</p>
<p>When cursor is in focus (not moved since inserting punctuations),
pressing <strong>DEL</strong> will remove both punctuations, and pressing the right
punctuation, will jump right over it.</p>
<p>See source for installation and usage examples.</p>
<p>Source: <a href=\"http://github.com/rejeep/enclose\">http://github.com/rejeep/enclose</a></p>" "http://blog.tuxicity.se/elisp/emacs/2010/10/20/enclose-and-wrap-region.html" (19646 12544) new 18 nil nil ((title ((type . "html")) "Johan Andersson: Enclose and Wrap Region") (link ((href . "http://blog.tuxicity.se/elisp/emacs/2010/10/20/enclose-and-wrap-region.html"))) (id nil "http://blog.tuxicity.se/elisp/emacs/2010/10/20/enclose-and-wrap-region") (updated nil "2010-10-20T00:00:00+00:00") (content ((type . "html")) "<p>Wrap Region is an Emacs minor mode that wraps a region with
punctuations, much like in TextMate.</p>

<p>When no region is selected and a wrap key is pressed, Wrap Region
would insert both punctuations and place the cursor in between, also
much like in TextMate.</p>

<p>In my opinion, since I like to keep things to the point, Wrap Region
should do one job (wrap text) and do that good. That's why I decided
to split up Wrap Region into <strong>Wrap Region</strong> and <strong>Enclose</strong>.</p>

<h2>Wrap Region</h2>

<pre>Wraps selected text with punctuations or tag. If no region is selected, fall back.</pre>


<p>Works like before, only that the double insertion of punctuations is gone.</p>

<p>Source: <a href=\"http://github.com/rejeep/wrap-region\">http://github.com/rejeep/wrap-region</a></p>

<h2>Enclose</h2>

<pre>Enclose cursor within punctuations. If region is selected, fall back.</pre>


<p>Enclose mode was built from scratch, with inspiration taken from
TextMate. Enclose keeps a hash with keys that will enclose. Pressing
any of those keys will insert that key and its right buddy, and place
the cursor in between.</p>

<p>When cursor is in focus (not moved since inserting punctuations),
pressing <strong>DEL</strong> will remove both punctuations, and pressing the right
punctuation, will jump right over it.</p>

<p>See source for installation and usage examples.</p>

<p>Source: <a href=\"http://github.com/rejeep/enclose\">http://github.com/rejeep/enclose</a></p>") (author nil (name nil "Johan Andersson") (uri nil "http://blog.tuxicity.se/")) (source nil (title ((type . "html")) "Tuxicity - Emacs") (link ((rel . "self") (href . "http://blog.tuxicity.se/atom-emacs.xml"))) (id nil "http://blog.tuxicity.se/")))) ("Justin Heyes-Jones: rgrep on windows 7 for emacs" "I lost an hour configuring this, so seems worthy of a blog post.<br /><br />A fresh install of <a href=\"http://ftp.gnu.org/gnu/emacs/windows/\">emacs for windows</a> will have functionality that does not work because it depends on unix style utilities.<br /><br />One very useful example is the command rgrep, which searches files recursively through subfolders looking for a regular expression in those files.<br /><br />Under the hood it uses the unix command line tools find, and egrep. Unfortunately the windows version of find takes entirely different parameters and will not function. In fact you will get an error that looks like this:<br /><br />FIND: Wrong parameter format<br /><br />Using the set of native ports of Unix command line tools <a href=\"http://sourceforge.net/projects/unxutils/\">UnxUtils </a>you can easily fix this:<br /><br /><ol><li>Download the zip file and extract it to c:\\unxutils</li><li>Add the following path to the very front of your path by editing your system environment variables C:\\unxutils\\usr\\local\\wbin\\;</li></ol><div>That's it. You can run rgrep now and hopefully you're up and running. </div><div><br /></div><div>If not make sure you have restarted emacs so it picks up the new setting of PATH. Open a shell in emacs and type 'find --version'. You should see something like this if your path is configured correctly:</div><div><br /></div><div><div>c:\\find --version</div><div>find --version</div><div>GNU find version 4.1</div></div><div><br /></div><div>and if not you will see:</div><div><br /></div><div><div>C:\\Windows\\system32&gt;find --help</div><div>FIND: Parameter format not correct</div></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/4777243148323391813-3950018987680156658?l=justinsboringpage.blogspot.com\" width=\"1\" /></div>" "http://justinsboringpage.blogspot.com/2010/10/rgrep-on-windows-7-for-emacs.html" (19646 9849) new 19 nil nil ((title ((type . "html")) "Justin Heyes-Jones: rgrep on windows 7 for emacs") (link ((href . "http://justinsboringpage.blogspot.com/2010/10/rgrep-on-windows-7-for-emacs.html"))) (id nil "tag:blogger.com,1999:blog-4777243148323391813.post-3950018987680156658") (updated nil "2010-10-19T23:15:05+00:00") (content ((type . "html")) "I lost an hour configuring this, so seems worthy of a blog post.<br /><br />A fresh install of <a href=\"http://ftp.gnu.org/gnu/emacs/windows/\">emacs for windows</a> will have functionality that does not work because it depends on unix style utilities.<br /><br />One very useful example is the command rgrep, which searches files recursively through subfolders looking for a regular expression in those files.<br /><br />Under the hood it uses the unix command line tools find, and egrep. Unfortunately the windows version of find takes entirely different parameters and will not function. In fact you will get an error that looks like this:<br /><br />FIND: Wrong parameter format<br /><br />Using the set of native ports of Unix command line tools <a href=\"http://sourceforge.net/projects/unxutils/\">UnxUtils </a>you can easily fix this:<br /><br /><ol><li>Download the zip file and extract it to c:\\unxutils</li><li>Add the following path to the very front of your path by editing your system environment variables C:\\unxutils\\usr\\local\\wbin\\;</li></ol><div>That's it. You can run rgrep now and hopefully you're up and running. </div><div><br /></div><div>If not make sure you have restarted emacs so it picks up the new setting of PATH. Open a shell in emacs and type 'find --version'. You should see something like this if your path is configured correctly:</div><div><br /></div><div><div>c:\\find --version</div><div>find --version</div><div>GNU find version 4.1</div></div><div><br /></div><div>and if not you will see:</div><div><br /></div><div><div>C:\\Windows\\system32&gt;find --help</div><div>FIND: Parameter format not correct</div></div><div><br /></div><div><br /></div><div><br /></div><div><br /></div><div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/4777243148323391813-3950018987680156658?l=justinsboringpage.blogspot.com\" width=\"1\" /></div>") (author nil (name nil "Justin") (email nil "noreply@blogger.com") (uri nil "http://justinsboringpage.blogspot.com/search/label/emacs")) (source nil (title ((type . "html")) "justinhj's coding blog") (subtitle ((type . "html")) "Programming related tips and comments. Lots of emacs, C++, some game AI, common lisp, python, java, c#, sql and whatever else I'm working on.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/4777243148323391813/posts/default/-/emacs"))) (id nil "tag:blogger.com,1999:blog-4777243148323391813")))) ("Julien Danjou: Enhancing Emacs mouse avoidance" "<p class=\"first\">Recent Emacs versions have a wonderful capacity to hide the mouse pointer as
soon as you type and insert characters in a buffer. This is controlled by
the <em>`make-pointer-invisible'</em> variable, which is set to t by default.</p>
<p>However that does not hide the pointer when simply moving the cursor on
screen. Therefore, I've started to use <em>`mouse-avoidance-mode'</em>, which make
the mouse pointer jump if your cursor hits it.</p>
<p>Unfortunately, if your cursor hits the invisible mouse pointer,
<em>`mouse-avoidance-mode'</em> makes it jump too, because it does not know it is
invisible.</p>
<p>Well, it <em>did</em> not know. Now it does, <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2010-10/msg00574.html\">thanks to my patches</a> which have been
merged in Emacs 24. Using the new function <strong>`frame-pointer-invisible-p'</strong>, one
can know if the mouse pointer has been hidden by Emacs. Therefore I enhanced
`mouse-avoidance-mode' to use it, and everything is alright now. :-)</p>
<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>" "http://julien.danjou.info/blog/index.html#Enhancing_Emacs_mouse_avoidance" (19645 54260) new 20 nil nil ((title ((type . "html") (xml:lang . "en-us")) "Julien Danjou: Enhancing Emacs mouse avoidance") (link ((href . "http://julien.danjou.info/blog/index.html#Enhancing_Emacs_mouse_avoidance"))) (id nil "http://julien.danjou.info/blog/index.html#Enhancing_Emacs_mouse_avoidance") (updated nil "2010-10-19T17:23:00+00:00") (content ((type . "html")) "<p class=\"first\">Recent Emacs versions have a wonderful capacity to hide the mouse pointer as
soon as you type and insert characters in a buffer. This is controlled by
the <em>`make-pointer-invisible'</em> variable, which is set to t by default.</p>

<p>However that does not hide the pointer when simply moving the cursor on
screen. Therefore, I've started to use <em>`mouse-avoidance-mode'</em>, which make
the mouse pointer jump if your cursor hits it.</p>

<p>Unfortunately, if your cursor hits the invisible mouse pointer,
<em>`mouse-avoidance-mode'</em> makes it jump too, because it does not know it is
invisible.</p>

<p>Well, it <em>did</em> not know. Now it does, <a href=\"http://lists.gnu.org/archive/html/emacs-devel/2010-10/msg00574.html\">thanks to my patches</a> which have been
merged in Emacs 24. Using the new function <strong>`frame-pointer-invisible-p'</strong>, one
can know if the mouse pointer has been hidden by Emacs. Therefore I enhanced
`mouse-avoidance-mode' to use it, and everything is alright now. :-)</p>



<a href=\"http://flattr.com/thing/47923/Julien-Danjous-blog\" target=\"_blank\">
<img alt=\"Flattr this\" border=\"0\" src=\"http://api.flattr.com/button/button-compact-static-100x17.png\" title=\"Flattr this\" /></a>") (author nil (name nil "Julien Danjou") (email nil "julien@danjou.info") (uri nil "http://julien.danjou.info/blog/index.html")) (source nil (title ((type . "html")) "jd:/dev/blog") (subtitle ((type . "html")) "Julien Danjou's blog") (link ((rel . "self") (href . "http://julien.danjou.info/blog/index.xml"))) (id nil "http://julien.danjou.info/blog/index.html")))) ("suso: Publicado el Manual de Hyperbole para Emacs" "<p>Doy por finalizada la fase alfa de la traducción del Manual de Hyperbole,<br />
correspondiente a su quinta edición, elimino los ficheros de texto<br />
provisionales y paso el manual a HTML.</p>
<p>Como es posible que se sepa, Hyperbole es un paquete histórico para<br />
la gestión avanzada de la información.  Desde hace ya tiempo es un<br />
paquete oficial de GNU, pero no va incluido dentro de la distribución<br />
de GNU Emacs.</p>
<p>Primera prueba alfa de la traducción, como siempre.</p>
<p>El texto del manual se puede alcanzar en la sección Libros, Mundo<br />
Emacs.</p>
<p>Copyright de la traducción: TMJQ, S.L.</p>
<p><a href=\"http://gnu.manticore.es/node/786\" target=\"_blank\">leer más</a></p>" "http://gnu.manticore.es/node/786" (19645 9264) new 21 nil nil ((title ((type . "html") (xml:lang . "es")) "suso: Publicado el Manual de Hyperbole para Emacs") (link ((href . "http://gnu.manticore.es/node/786"))) (id nil "http://gnu.manticore.es/786 at http://gnu.manticore.es") (updated nil "2010-10-19T04:53:04+00:00") (content ((type . "html")) "<p>Doy por finalizada la fase alfa de la traducción del Manual de Hyperbole,<br />
correspondiente a su quinta edición, elimino los ficheros de texto<br />
provisionales y paso el manual a HTML.</p>
<p>Como es posible que se sepa, Hyperbole es un paquete histórico para<br />
la gestión avanzada de la información.  Desde hace ya tiempo es un<br />
paquete oficial de GNU, pero no va incluido dentro de la distribución<br />
de GNU Emacs.</p>
<p>Primera prueba alfa de la traducción, como siempre.</p>
<p>El texto del manual se puede alcanzar en la sección Libros, Mundo<br />
Emacs.</p>
<p>Copyright de la traducción: TMJQ, S.L.</p>
<p><a href=\"http://gnu.manticore.es/node/786\" target=\"_blank\">leer más</a></p>") (author nil (name nil "suso") (uri nil "http://gnu.manticore.es/taxonomy/term/1/0")) (source nil (title ((type . "html")) "GNU + Emacs en español para usuarios finales - Emacs") (link ((rel . "self") (href . "http://gnu.manticore.es/taxonomy/term/1/0/feed"))) (id nil "http://gnu.manticore.es/taxonomy/term/1/0")))) ("@emacs: emacs: Here's how to run a shell command with the region as input, replacing the selection with the command's output: C-u M-|" "emacs: Here's how to run a shell command with the region as input, replacing the selection with the command's output: C-u M-|" "http://twitter.com/emacs/statuses/27465247938" (19640 38710) new 22 nil nil ((title ((type . "html") (xml:lang . "en-us")) "@emacs: emacs: Here's how to run a shell command with the region as input, replacing the selection with the command's output: C-u M-|") (link ((href . "http://twitter.com/emacs/statuses/27465247938"))) (id nil "http://twitter.com/emacs/statuses/27465247938") (updated nil "2010-10-15T18:02:30+00:00") (content ((type . "html")) "emacs: Here's how to run a shell command with the region as input, replacing the selection with the command's output: C-u M-|") (author nil (name nil "@emacs") (uri nil "http://twitter.com/emacs")) (source nil (title ((type . "html")) "Twitter / emacs") (subtitle ((type . "html")) "Twitter updates from emacs / emacs.") (link ((rel . "self") (href . "http://twitter.com/statuses/user_timeline/9492852.rss"))) (id nil "http://twitter.com/emacs")))) ("Aidan McQuay: Displaying Inline Images in Emacs org-mode" "<p>I had to patch together some various emacs from around the web to get inline images with iimage.el working in emacs exactly the way I wanted.   Here’s some info:</p>
<ul>
<li>Load and displays images in org files on initial load</li>
<li>Provides a function that allows you to toggle images on and off</li>
<li>Specify images you would like to load with the [[file://file.png]] org link type</li>
</ul>
<p><a href=\"http://floatsolutions.com/wp-content/uploads/2010/10/inline_image_screenshot.png\"><img alt=\"\" class=\"aligncenter size-full wp-image-277\" height=\"361\" src=\"http://floatsolutions.com/wp-content/uploads/2010/10/inline_image_screenshot.png\" title=\"inline_image_screenshot\" width=\"501\" /></a></p>
<p>Here’s the code, you can add it anywhere in your <em>.emacs</em><br />
</p><pre><code>;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
  (cons (concat \"\\\\[\\\\[file:\\\\(~?\" iimage-mode-image-filename-regex \"\\\\)\\\\]\")  1))
;;  add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
  \"display images in your org file\"
  (interactive)
  (turn-on-iimage-mode)
  (set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
  \"display images in your org file\"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (call-interactively 'iimage-mode))
</code></pre> <p></p>
<p>I have this function bound to C-l with a call like this:<br />
</p><pre><code>
(define-key org-mode-map (kbd \"C-S-a\") 'org-archive-subtree)</code></pre><p></p>" "http://floatsolutions.com/blog/2010/10/displaying-inline-images-in-emacs-org-mode/" (19640 3616) new 23 nil nil ((title ((type . "html") (xml:lang . "en")) "Aidan McQuay: Displaying Inline Images in Emacs org-mode") (link ((href . "http://floatsolutions.com/blog/2010/10/displaying-inline-images-in-emacs-org-mode/"))) (id nil "http://floatsolutions.com/?p=269") (updated nil "2010-10-15T08:17:36+00:00") (content ((type . "html") (xml:lang . "en")) "<p>I had to patch together some various emacs from around the web to get inline images with iimage.el working in emacs exactly the way I wanted.   Here’s some info:</p>
<ul>
<li>Load and displays images in org files on initial load</li>
<li>Provides a function that allows you to toggle images on and off</li>
<li>Specify images you would like to load with the [[file://file.png]] org link type</li>
</ul>
<p><a href=\"http://floatsolutions.com/wp-content/uploads/2010/10/inline_image_screenshot.png\"><img alt=\"\" class=\"aligncenter size-full wp-image-277\" height=\"361\" src=\"http://floatsolutions.com/wp-content/uploads/2010/10/inline_image_screenshot.png\" title=\"inline_image_screenshot\" width=\"501\" /></a></p>
<p>Here’s the code, you can add it anywhere in your <em>.emacs</em><br />
</p><pre><code>;; -- Display images in org mode
;; enable image mode first
(iimage-mode)
;; add the org file link format to the iimage mode regex
(add-to-list 'iimage-mode-image-regex-alist
  (cons (concat \"\\\\[\\\\[file:\\\\(~?\" iimage-mode-image-filename-regex \"\\\\)\\\\]\")  1))
;;  add a hook so we can display images on load
(add-hook 'org-mode-hook '(lambda () (org-turn-on-iimage-in-org)))
;; function to setup images for display on load
(defun org-turn-on-iimage-in-org ()
  \"display images in your org file\"
  (interactive)
  (turn-on-iimage-mode)
  (set-face-underline-p 'org-link nil))
;; function to toggle images in a org bugger
(defun org-toggle-iimage-in-org ()
  \"display images in your org file\"
  (interactive)
  (if (face-underline-p 'org-link)
      (set-face-underline-p 'org-link nil)
      (set-face-underline-p 'org-link t))
  (call-interactively 'iimage-mode))
</code></pre> <p></p>
<p>I have this function bound to C-l with a call like this:<br />
</p><pre><code>
(define-key org-mode-map (kbd \"C-S-a\") 'org-archive-subtree)</code></pre><p></p>") (author nil (name nil "Aidan McQuay") (uri nil "http://floatsolutions.com")) (source nil (title ((type . "html")) "Float Solutions » Emacs") (link ((rel . "self") (href . "http://floatsolutions.com/blog/category/emacs/feed/"))) (id nil "http://floatsolutions.com")))) ("Aidan McQuay: Tramp and NTEmacs" "<p>After a few failed attempted at getting tramp working in NTEmacs the solution ended up being pretty simple.</p>
<p><strong>1)</strong> Download <a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\">Plink.exe</a>.</p>
<p><strong>2)</strong> Place Plink.exe somewhere in your windows PATH, doesn’t matter where but you have to be able to run in from a command line anywhere on your system.</p>
<p><strong>3)</strong> Add the following line somewhere in your <em>.emacs</em>.<br />
</p><pre><code>(setq tramp-default-method \"plink\")
</code></pre><p></p>
<p>From there you should be able to use <em>find-file</em> (C-x C-f) and a command like the following to bring up a remote file:<br />
</p><pre><code>/user@host.com:/path/to/file.ext
</code></pre><p></p>" "http://floatsolutions.com/blog/2010/10/tramp-and-ntemacs/" (19639 51106) new 24 nil nil ((title ((type . "html") (xml:lang . "en")) "Aidan McQuay: Tramp and NTEmacs") (link ((href . "http://floatsolutions.com/blog/2010/10/tramp-and-ntemacs/"))) (id nil "http://floatsolutions.com/?p=255") (updated nil "2010-10-15T03:16:50+00:00") (content ((type . "html") (xml:lang . "en")) "<p>After a few failed attempted at getting tramp working in NTEmacs the solution ended up being pretty simple.</p>
<p><strong>1)</strong> Download <a href=\"http://www.chiark.greenend.org.uk/~sgtatham/putty/download.html\">Plink.exe</a>.</p>
<p><strong>2)</strong> Place Plink.exe somewhere in your windows PATH, doesn’t matter where but you have to be able to run in from a command line anywhere on your system.</p>
<p><strong>3)</strong> Add the following line somewhere in your <em>.emacs</em>.<br />
</p><pre><code>(setq tramp-default-method \"plink\")
</code></pre><p></p>
<p>From there you should be able to use <em>find-file</em> (C-x C-f) and a command like the following to bring up a remote file:<br />
</p><pre><code>/user@host.com:/path/to/file.ext
</code></pre><p></p>") (author nil (name nil "Aidan McQuay") (uri nil "http://floatsolutions.com")) (source nil (title ((type . "html")) "Float Solutions » Emacs") (link ((rel . "self") (href . "http://floatsolutions.com/blog/category/emacs/feed/"))) (id nil "http://floatsolutions.com")))) ("Flickr tag 'emacs': Church of Emacs (progress)" "<p><a href=\"http://www.flickr.com/people/azuriblue/\">Azuriblue8</a> posted a photo:</p>
<p><a href=\"http://www.flickr.com/photos/azuriblue/5082019905/\" title=\"Church of Emacs (progress)\"><img alt=\"Church of Emacs (progress)\" height=\"240\" src=\"http://farm5.static.flickr.com/4111/5082019905_f84f0a258a_m.jpg\" width=\"180\" /></a></p>" "http://www.flickr.com/photos/azuriblue/5082019905/" (19639 39097) new 25 nil nil ((title ((type . "html")) "Flickr tag 'emacs': Church of Emacs (progress)") (link ((href . "http://www.flickr.com/photos/azuriblue/5082019905/"))) (id nil "tag:flickr.com,2004:/photo/5082019905") (updated nil "2010-10-14T23:56:41+00:00") (content ((type . "html")) "<p><a href=\"http://www.flickr.com/people/azuriblue/\">Azuriblue8</a> posted a photo:</p>
	
<p><a href=\"http://www.flickr.com/photos/azuriblue/5082019905/\" title=\"Church of Emacs (progress)\"><img alt=\"Church of Emacs (progress)\" height=\"240\" src=\"http://farm5.static.flickr.com/4111/5082019905_f84f0a258a_m.jpg\" width=\"180\" /></a></p>") (author nil (name nil "Azuriblue8") (email nil "nobody@flickr.com") (uri nil "http://www.flickr.com/photos/tags/emacs/")) (source nil (title ((type . "html")) "Recent Uploads tagged emacs") (link ((rel . "self") (href . "http://api.flickr.com/services/feeds/photos_public.gne?tags=emacs&lang=en-us&format=rss_200"))) (id nil "http://www.flickr.com/photos/tags/emacs/")))) ("Got Emacs?: First Emacs binaries of October available" "The<a href=\"http://permalink.gmane.org/gmane.emacs.devel/131625\"> latest Emacs binaries trunk build</a> are available <a href=\"http://alpha.gnu.org/gnu/emacs/windows/\">here</a>.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-8147437168873963545?l=emacsworld.blogspot.com\" width=\"1\" /></div>
<p><a href=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/0/di\" /></a><br />
<a href=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/1/di\" /></a></p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/EBWHvtkFwO0\" width=\"1\" />" "http://feedproxy.google.com/~r/GotEmacs/~3/EBWHvtkFwO0/first-emacs-binaries-of-october.html" (19637 64737) new 26 nil nil ((title ((type . "html")) "Got Emacs?: First Emacs binaries of October available") (link ((href . "http://feedproxy.google.com/~r/GotEmacs/~3/EBWHvtkFwO0/first-emacs-binaries-of-october.html"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420.post-8147437168873963545") (updated nil "2010-10-13T18:39:29+00:00") (content ((type . "html")) "The<a href=\"http://permalink.gmane.org/gmane.emacs.devel/131625\"> latest Emacs binaries trunk build</a> are available <a href=\"http://alpha.gnu.org/gnu/emacs/windows/\">here</a>.<div class=\"blogger-post-footer\"><img alt=\"\" height=\"1\" src=\"https://blogger.googleusercontent.com/tracker/3165518189103293420-8147437168873963545?l=emacsworld.blogspot.com\" width=\"1\" /></div>
<p><a href=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/0/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/0/di\" /></a><br />
<a href=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/1/da\"><img border=\"0\" ismap=\"true\" src=\"http://feedads.g.doubleclick.net/~a/H1Bl3ykvu-X87jCk82uOja4wbP4/1/di\" /></a></p><img height=\"1\" src=\"http://feeds.feedburner.com/~r/GotEmacs/~4/EBWHvtkFwO0\" width=\"1\" />") (author nil (name nil "sivaram") (email nil "noreply@blogger.com") (uri nil "http://emacsworld.blogspot.com/")) (source nil (title ((type . "html")) "Got Emacs?") (subtitle ((type . "html")) "Postings on living in an Emacs world.  Posts will be mostly on using Emacs, related functions and tools.") (link ((rel . "self") (href . "http://feeds.feedburner.com/GotEmacs"))) (id nil "tag:blogger.com,1999:blog-3165518189103293420")))) ("Ruslan Spivak: Nuke whitespaces on file saving" "<p>In one of my <a href=\"http://ruslanspivak.com/2010/09/27/keep-track-of-whitespaces-and-column-80-overflow/\">previous posts</a> I wrote how I kept track of whitespaces and a column 80 overflow. And in my config you could see that I used <em>delete-trailing-whitespace</em> with <em>write-file-hooks</em></p>
<pre style=\"color: #F8F8F8; background-color: #0C1021; font-size: 8pt;\"><span style=\"color: #AEAEAE; font-style: italic;\">;; </span><span style=\"color: #AEAEAE; font-style: italic;\">nuke trailing whitespaces when writing to a file
</span>(add-hook 'write-file-hooks 'delete-trailing-whitespace)
</pre>
<p>What I wanted to use with <em>write-file-hooks</em> was <em><strong>whitespace-cleanup</strong></em>, but somehow it didn’t work for me with that hook (whitespaces were removed when saving a file, but buffer was marked as containing changes).</p>
<p>Thanks to Valeriy Zamarayev who, <a href=\"http://ruslanspivak.com/2010/09/27/keep-track-of-whitespaces-and-column-80-overflow/#comment-712\">in his comment to my post</a>, mentioned save hook and whitespace-cleanup. This is what I use now to remove whitespaces when saving a file:</p>
<pre style=\"color: #F8F8F8; background-color: #0C1021; font-size: 8pt;\"><span style=\"color: #AEAEAE; font-style: italic;\">;; </span><span style=\"color: #AEAEAE; font-style: italic;\">nuke whitespaces when writing to a file
</span>(add-hook 'before-save-hook 'whitespace-cleanup)
</pre>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ruslanspivak.wordpress.com/375/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ruslanspivak.com&amp;blog=1522719&amp;post=375&amp;subd=ruslanspivak&amp;ref=&amp;feed=1\" width=\"1\" />" "http://ruslanspivak.com/2010/10/11/nuke-whitespaces-on-file-saving/" (19635 57679) new 27 nil nil ((title ((type . "html") (xml:lang . "en")) "Ruslan Spivak: Nuke whitespaces on file saving") (link ((href . "http://ruslanspivak.com/2010/10/11/nuke-whitespaces-on-file-saving/"))) (id nil "http://ruslanspivak.com/?p=375") (updated nil "2010-10-12T04:17:19+00:00") (content ((type . "html") (xml:lang . "en")) "<p>In one of my <a href=\"http://ruslanspivak.com/2010/09/27/keep-track-of-whitespaces-and-column-80-overflow/\">previous posts</a> I wrote how I kept track of whitespaces and a column 80 overflow. And in my config you could see that I used <em>delete-trailing-whitespace</em> with <em>write-file-hooks</em></p>
<pre style=\"color: #F8F8F8; background-color: #0C1021; font-size: 8pt;\"><span style=\"color: #AEAEAE; font-style: italic;\">;; </span><span style=\"color: #AEAEAE; font-style: italic;\">nuke trailing whitespaces when writing to a file
</span>(add-hook 'write-file-hooks 'delete-trailing-whitespace)
</pre>
<p>What I wanted to use with <em>write-file-hooks</em> was <em><strong>whitespace-cleanup</strong></em>, but somehow it didn’t work for me with that hook (whitespaces were removed when saving a file, but buffer was marked as containing changes).</p>
<p>Thanks to Valeriy Zamarayev who, <a href=\"http://ruslanspivak.com/2010/09/27/keep-track-of-whitespaces-and-column-80-overflow/#comment-712\">in his comment to my post</a>, mentioned save hook and whitespace-cleanup. This is what I use now to remove whitespaces when saving a file:</p>
<pre style=\"color: #F8F8F8; background-color: #0C1021; font-size: 8pt;\"><span style=\"color: #AEAEAE; font-style: italic;\">;; </span><span style=\"color: #AEAEAE; font-style: italic;\">nuke whitespaces when writing to a file
</span>(add-hook 'before-save-hook 'whitespace-cleanup)
</pre>
<br />  <a href=\"http://feeds.wordpress.com/1.0/gocomments/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/comments/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godelicious/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/delicious/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gofacebook/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/facebook/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gotwitter/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/twitter/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/gostumble/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/stumble/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/godigg/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/digg/ruslanspivak.wordpress.com/375/\" /></a> <a href=\"http://feeds.wordpress.com/1.0/goreddit/ruslanspivak.wordpress.com/375/\" rel=\"nofollow\"><img alt=\"\" border=\"0\" src=\"http://feeds.wordpress.com/1.0/reddit/ruslanspivak.wordpress.com/375/\" /></a> <img alt=\"\" border=\"0\" height=\"1\" src=\"http://stats.wordpress.com/b.gif?host=ruslanspivak.com&amp;blog=1522719&amp;post=375&amp;subd=ruslanspivak&amp;ref=&amp;feed=1\" width=\"1\" />") (author nil (name nil "Ruslan Spivak") (uri nil "http://ruslanspivak.com")) (source nil (title ((type . "html")) "Ruslan's Blog » emacs") (subtitle ((type . "html")) "Musings on dynamic languages and more than that") (link ((rel . "self") (href . "http://ruslanspivak.com/category/emacs/feed/"))) (id nil "http://ruslanspivak.com")))) ("@emacs: emacs: @jf of course there wasn't. How can you laugh about me?  But watch for the Zuck joke in the Sorkin docudrama about RMS—it's M-x hysterical." "emacs: @jf of course there wasn't. How can you laugh about me?  But watch for the Zuck joke in the Sorkin docudrama about RMS—it's M-x hysterical." "http://twitter.com/emacs/statuses/27094280109" (19635 49224) new 28 nil nil ((title ((type . "html") (xml:lang . "en-us")) "@emacs: emacs: @jf of course there wasn't. How can you laugh about me?  But watch for the Zuck joke in the Sorkin docudrama about RMS—it's M-x hysterical.") (link ((href . "http://twitter.com/emacs/statuses/27094280109"))) (id nil "http://twitter.com/emacs/statuses/27094280109") (updated nil "2010-10-12T01:56:24+00:00") (content ((type . "html")) "emacs: @jf of course there wasn't. How can you laugh about me?  But watch for the Zuck joke in the Sorkin docudrama about RMS—it's M-x hysterical.") (author nil (name nil "@emacs") (uri nil "http://twitter.com/emacs")) (source nil (title ((type . "html")) "Twitter / emacs") (subtitle ((type . "html")) "Twitter updates from emacs / emacs.") (link ((rel . "self") (href . "http://twitter.com/statuses/user_timeline/9492852.rss"))) (id nil "http://twitter.com/emacs")))) ("David's World: Link Soup: October.  What's cooking (in the world)" "Interesting reads and sights that didn't get broad attention in the mainstream press:
<a href=\"http://news.mongabay.com/2010/1010-vontsira_madagascar.html\">Durrell's vontsira</a> - a novel carnivore species discovered on
Madagascar.  And a cute one!  (<a href=\"http://www.smugmug.com/gallery/14098495_FzBEP#1038952598_MwDEf-A-LB\">Big pictures here.</a>)
The Guardian about Jon Stweart, who misses <a href=\"http://www.guardian.co.uk/media/2010/oct/03/jon-stewart-barack-obama\">an imaginary Hero-Obama</a>.
<a href=\"http://www.guardian.co.uk/world/2010/sep/18/ingrid-betancourt-i-still-have-nightmares\">Ingrid Betancourt</a> about her time in captivity.
People (and politicians) do what's best for them - even if that isn't immediately obvious: <a href=\"http://www.ted.com/talks/elizabeth_pisani_sex_drugs_and_hiv_let_s_get_rational_1.html\">Elizabeth Pisani's TED talk</a>.
<a href=\"http://rtw.ml.cmu.edu/rtw/overview\">NELL</a> - the never-ending learning system learns about semantics.
A <a href=\"http://techcrunch.com/2010/10/09/nell-computer-language-carnegie-tctv/\">15-minute interview</a> with CMU Machine-Learning professor Tom
Mitchell, whose team created this." "http://www.davids-world.com/archives/2010/10/link_soup_octob.html" (19635 20414) new 29 nil nil ((title ((type . "html")) "David's World: Link Soup: October.  What's cooking (in the world)") (link ((href . "http://www.davids-world.com/archives/2010/10/link_soup_octob.html"))) (id nil "tag:www.davids-world.com,2010://1.258") (updated nil "2010-10-11T17:56:14+00:00") (content ((type . "html") (xml:lang . "en")) "Interesting reads and sights that didn't get broad attention in the mainstream press:

<a href=\"http://news.mongabay.com/2010/1010-vontsira_madagascar.html\">Durrell's vontsira</a> - a novel carnivore species discovered on
Madagascar.  And a cute one!  (<a href=\"http://www.smugmug.com/gallery/14098495_FzBEP#1038952598_MwDEf-A-LB\">Big pictures here.</a>)

The Guardian about Jon Stweart, who misses <a href=\"http://www.guardian.co.uk/media/2010/oct/03/jon-stewart-barack-obama\">an imaginary Hero-Obama</a>.

<a href=\"http://www.guardian.co.uk/world/2010/sep/18/ingrid-betancourt-i-still-have-nightmares\">Ingrid Betancourt</a> about her time in captivity.

People (and politicians) do what's best for them - even if that isn't immediately obvious: <a href=\"http://www.ted.com/talks/elizabeth_pisani_sex_drugs_and_hiv_let_s_get_rational_1.html\">Elizabeth Pisani's TED talk</a>.



<a href=\"http://rtw.ml.cmu.edu/rtw/overview\">NELL</a> - the never-ending learning system learns about semantics.
A <a href=\"http://techcrunch.com/2010/10/09/nell-computer-language-carnegie-tctv/\">15-minute interview</a> with CMU Machine-Learning professor Tom
Mitchell, whose team created this.") (author nil (name nil "David Reitter") (uri nil "http://www.davids-world.com/")) (source nil (title ((type . "html")) "David's World") (subtitle ((type . "html")) "... looms large and daunting.") (link ((rel . "self") (href . "http://www.davids-world.com/atom.xml"))) (id nil "tag:www.davids-world.com,2010://1")))) ("Trey Jackson: Emacs Tip #37: fic-mode.el" "I saw this question on Stack Overflow asking to highlight FIXME (and similar strings) in your code, but only in comments and strings.The current fixme-mode.el found on the Emacs Wiki is kind of clunky (it's really a major mode) and awkward to read.  So I took the challenge to write a new minor-mode which answers the question.I give you fic-mode.el.  It's named fic as an acronym for Fixme In" "http://trey-jackson.blogspot.com/2010/10/emacs-tip-37-fic-modeel.html" (19634 1292) new 30 nil nil ((title ((type . "html")) "Trey Jackson: Emacs Tip #37: fic-mode.el") (link ((href . "http://trey-jackson.blogspot.com/2010/10/emacs-tip-37-fic-modeel.html"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968.post-7679013447638879119") (updated nil "2010-10-10T18:25:16+00:00") (content ((type . "html")) "I saw this question on Stack Overflow asking to highlight FIXME (and similar strings) in your code, but only in comments and strings.The current fixme-mode.el found on the Emacs Wiki is kind of clunky (it's really a major mode) and awkward to read.  So I took the challenge to write a new minor-mode which answers the question.I give you fic-mode.el.  It's named fic as an acronym for Fixme In") (author nil (name nil "BFW") (email nil "noreply@blogger.com") (uri nil "http://trey-jackson.blogspot.com/")) (source nil (title ((type . "html")) "Life Is Too Short For Bad Code") (subtitle ((type . "html")) "Random musings about programming, software, technical interviews, and of course Emacs - a tip every week for new and experienced users.") (link ((rel . "self") (href . "http://www.blogger.com/feeds/2304251215826746968/posts/default"))) (id nil "tag:blogger.com,1999:blog-2304251215826746968")))))