;; -*- coding: utf-8 -*-
(("emacs-fu" "useful tricks for emacs" nil (19659 25276 852871) feed 0 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868") (updated nil "2010-10-28T05:10:36.316+03:00") (title ((type . "text")) "emacs-fu") (subtitle ((type . "html")) "useful tricks for emacs") (link ((rel . "http://schemas.google.com/g/2005#feed") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/posts/default"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/"))) (link ((rel . "hub") (href . "http://pubsubhubbub.appspot.com/"))) (link ((rel . "next") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default?start-index=26&max-results=25"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com")) (generator ((version . "7.00") (uri . "http://www.blogger.com")) "Blogger") (openSearch:totalResults nil "109") (openSearch:startIndex nil "1") (openSearch:itemsPerPage nil "25") (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-3394448227791083888") (published nil "2010-10-23T15:59:00.006+03:00") (updated nil "2010-10-24T18:07:55.982+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "auto-complete-mode") (content ((type . "html")) "<p>Recently, we <a href=\"http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html\">discussed CEDET</a> in the interview with Eric Ludlam. CEDET has a deep
understanding of the source code, and assists the development process by
exploiting that knowledge. For example by drawing class diagrams (<a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a>) or
providing auto-completion for function names and parameters.
</p>
<p>
Currently, however, CEDET is also be a bit hard to set up effectively, and may
also not support your programming language yet. Therefore, it's still useful to
look at some other packages that can substitute (part of) the functionality.
</p>
<p>
For me, <a href=\"http://cx4a.org/software/auto-complete/\">auto-complete-mode</a> has been very useful for that. It's not as fancy as
CEDET in the sense that it does not really <i>understand</i> the code &ndash; but in
practice I found it to work quite well for both C/C++, Elisp and shell scripts.
It can even display the docstrings of functions. And when editing shell-scripts,
it can complete path names as you are editing the scripts; very nice.
</p>
<p>
To install, follow the <a href=\"http://cx4a.org/software/auto-complete/manual.html#Installation\">instructions</a>. Then, in your <code>.emacs</code>, have something
like:
</p>


<pre class=\"src src-elisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">auto-complete-config</span> nil 'noerror) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't break if not installed </span>
(add-to-list 'ac-dictionary-directories <span class=\"org-string\">\"~/.emacs.d/ac-dict\"</span>)
  (<span class=\"org-keyword\">setq</span> ac-comphist-file  <span class=\"org-string\">\"~/.emacs.d/ac-comphist.dat\"</span>)
  (ac-config-default))
</pre>



<p>
After that, <code>M-x auto-complete-mode</code> to start using it. Alternatively, there's a
<a href=\"http://www.youtube.com/watch?v=rGVVnDxwJYE\">YouTube-video</a> explaining how to install and use <code>auto-complete-mode</code>;
recommended. In any case, it is <a href=\"http://cx4a.org/software/auto-complete/manual.html\">fully documented</a>.
</p>
<p>
<code>auto-complete-mode</code> uses a configurable set of <i>sources</i> from which it takes it
knowledge about what can be completed. For example, when writing in <code>org-mode</code>,
it takes its input from
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-abbrev ac-source-dictionary
 ac-source-words-in-same-mode-buffers)
</pre>


<p>
while in a <code>c-mode</code> buffer it is (in my case):
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-yasnippet ac-source-gtags ac-source-abbrev
ac-source-dictionary ac-source-words-in-same-mode-buffers)
</pre>


<p>
You can customize this, and (for the more ambitious), it's possible to add your
own sources as well.
</p><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-3394448227791083888?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/3394448227791083888/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=3394448227791083888") (title . "6 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3394448227791083888"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3394448227791083888"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/10/auto-complete-mode.html") (title . "auto-complete-mode"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "6")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-8830503538191507740") (published nil "2010-09-27T07:42:00.000+03:00") (updated nil "2010-09-27T07:42:26.149+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "interview"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "programming"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "emacs23"))) (title ((type . "text")) "interview with Eric Ludlam (CEDET)") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<img src=\"http://cedet.sourceforge.net/img-gen/cedet-logo-left.png\" align=\"right\" width=\"400\"/>
<div class=\"outline-text-2\" id=\"text-1\">

<p>
One of the notable new features of <a href=\"http://emacs-fu.blogspot.com/2010/05/emacs-232.html\">emacs 23.2</a> was the inclusion of <a href=\"http://cedet.sourceforge.net/\">CEDET</a>. CEDET adds IDE-type functionality to emacs, and one only needs to read
the responses to the <a href=\"http://emacs-fu.blogspot.com/2010/05/100th-post.html\">100th post</a> to see the great interest in that.
</p>
<p>
The man behind CEDET is Eric Ludlam (<b>EML</b>), a long-time Emacs user and
developer. He kindly answered the many questions we had for him. Thanks, Eric!
</p>


<strong>djcb: Eric, could you tell us a little bit about yourself? And about
that fantastic hobby of yours, building <a
href=\"http://en.wikipedia.org/wiki/Siege_engine\">siege engines</a>?</strong>

<p>
<b>EML</b>: I manage a software engineering team at the <a href=\"http://www.mathworks.com\">MathWorks</a>.  The MathWorks
are the creators of Matlab.  In my spare time I maintain CEDET, the Matlab
support for Emacs, and build replicas of ancient siege engines.
</p>
<p>
I've been building catapults of various types for use at the <a href=\"http://www.worldchampionshippunkinchunkin.com/\">World Championship Punkin' Chunk</a> since 1998. My team started with a traction
trebuchet, then a HCW Trebuchet, then moved to Human Powered Centripetal, and
finally to the torsion division with <a href=\"http://www.siege-engine.com/MistaBallista.shtml\">MistaBallista</a>. As far as I know, Mista
Ballista is the worlds largest farthest throwing currently functional
ballista.
</p>
<p>
Most recently, I got to <a href=\"http://www.siege-engine.com/MathWorksDemo2010.shtml\">help demolish a building where I work</a> by shooting
stuff at it, which was a lot of fun.
</p>


<strong>djcb: How did you get involved with Emacs? Do you spend a lot of time
with it?</strong>

<p>
EML: I've been hacking Emacs since version 18.54 on <a href=\"http://en.wikipedia.org/wiki/Ultrix\">Ultrix</a> because the alternative
was <code>vi</code>.  My first post (and thus contribution to Emacs) was to
<code>gnu.emacs.sources</code> on June 6, 1992.  I've used Emacs to work on C/C++ code for
many years which inspired all the various parts of CEDET, but these days I
don't get much coding time.
</p>
<p>
My work with Emacs and CEDET is seasonal currently.  The summers are usually
busy with family activities, and my falls are busy getting the catapult
ready, so CEDET work usually happens in the winter.
</p>


  <strong>djcb: Can you tell us a bit about the background of CEDET?</strong>

<p>
<b>EML</b>: I started with some really basic editors and eventually with <a href=\"http://en.wikipedia.org/wiki/Language-Sensitive_Editor\">LSE</a> (Language
Sensitive Editor) on VMS.  LSE was pretty cool.  When I switched OSes to
Ultrix and was forced to use Emacs, and discovered you could script it, I was
hooked.  My first big Emacs hack was etalk, an implementation of Unix talk in
Emacs.
</p>
<p>
In one of the Emacs related newsgroups, a spoof story floated around about how
Emacs became sentient, and started writing code for Richard [Stallman] instead
of the other way around.  Since then I've always wanted to get Emacs to start
writing my code for me.  I wrote <code>cparse.el</code>, a regexp nightmare that could
parse almost any C file into a sequence of highly detailed tags.  The tags
could be used to then generate code, and I had a cool comment writing utility,
automatic prototype generation, and some navigation features.  On the whole it
failed for many reasons.
</p>
<p>
The concept, however, continued.  CParse became the basic idea behind what is
now the Semantic package in CEDET, though none of the old stuff remains beyond
some echos in some <a href=\"http://cedet.sourceforge.net/srecode.shtml\">SRecode</a> utilities.
</p>
<p>
My end goal is to provide round-trip code management in Emacs.  Emacs needs to
be able to read your code, allow you to perform transformations in the code in
an abstract way, and then write new code for you.  Everything in CEDET is
building toward that goal.  It is taking a long time, and you can see it
starting to take shape.  Semantic can parse the code, <a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a> can manipulate UML
diagrams representing your code, and you can export diagrams into code through
SRecode.  Unfortunately this isn't a round-trip solution as the generated code
currently should not replace existing hand-written code.
</p>


  <strong>Can you tell us a bit about the CEDET-project?</strong>

<p>
<b>EML</b>: I maintain CEDET and field questions on the <a href=\"http://sourceforge.net/mail/?group_id=17886\">mailing list</a>.  There are
several contributors who either own some tool in the \"contrib\" area, fix bugs,
answer questions or apply patches for new features.  There has always been
someone to pick up the slack when I'm busy elsewhere, and I've greatly
appreciated that.
</p>
<p>
The easiest (and most common) way to contribute code to CEDET is to provide
support for some new language, or to create a language agnostic tool using the
CEDET APIs.  As with Emacs, you need to be able to assign copyright to the FSF
to contribute to CEDET's core, but new language support or utilities can have
a home in the contrib area as well.
</p>


  <strong>djcb: CEDET is part of Emacs since 23.2. Can you tell us a bit about how that
  happened?</strong>

<p>
<b>EML</b>: I've been providing assignments for the parts of CEDET since 1996 or so.
For Emacs 23.1, CEDET was at a stable and useful enough state that Chong
Yidong was willing to do the work to integrate it into Emacs.  My ability to
get a legal release for CEDET in time for Emacs 23.1 failed, so it went into
23.2 instead.  It is my understanding that CEDET's smart completion engine
reached a performance and reliability point that made it desirable to have in
Emacs.
</p>
<p>
Emacs currently includes the parts of CEDET needed to make EDE, the project
management system, Semantic and it's user tools, and SRecode all work from a
user perspective.  Emacs lacks the Semantic development environment, needed
for writing new language support, and COGRE, the UML diagram editing tool.
</p>


<strong>djcb: Are there plans to include those parts as well?</strong>

<p>
Yes.  It is important for users with a stock Emacs to develop new languages
using the missing Semantic development tools.  I don't know if COGRE will ever
go in, though I expect that this will be done via the new package management
system [elpa].
</p>


<strong>djcb: Did you ever try IDEs such as <a
  href=\"http://en.wikipedia.org/wiki/Eclipse_(software)\">Eclipse</a>? How do you
  think CEDET stacks up against such programs?</strong>

<p>
<b>EML</b>: I have used <a href=\"http://en.wikipedia.org/wiki/Visual_studio\">Visual Studio</a> more than Eclipse, and certainly watched demos
on how these and other tools work.
</p>
<p>
These tools win over CEDET's features in that they usually integrate directly
with the compiler, VM or whatever, and have very good completion engines and
UIs that you can interact with.
</p>
<p>
CEDET wins in that you don't need a compiler, or even code that can compile
for it to work and start providing useful completions.  It can infer an awful
lot from a project.
</p>
<p>
CEDET's language support structure is thus simple in comparison, and CEDET
supports many more languages as a side effect.  It also wins because it is in
Emacs, and I've done my best to try and match the \"Emacs Way\".  For an Emacs
user, this is intuitive, but can appear quirky to outsiders.
</p>


  <strong>djcb: What about other development tools for in emacs?</strong>

<p>
<b>EML</b>: There are a lot of language specific solutions like <a href=\"http://cx4a.org/software/gccsense/\">GCCSense</a>, <a href=\"http://common-lisp.net/project/slime/\">slime</a>, <a href=\"http://jdee.sourceforge.net/\">JDEE</a>, and
others out there.  These projects are great in that they take a language, and
push it to the edge of what you can do, and the users generally love that
stuff.  When someone wants to do the same thing, like when <a href=\"http://csde.sourceforge.net/\">CSDE</a> started for
C#, and it tried to copy JDEE, it was just that, a copy that didn't quite make
it.
</p>
<p>
It is my hope that CEDET will become the target of choice for users who want
to make their language support in Emacs the best.  They will save a lot of
time doing so as well.  The same infrastructure for integrating in external
tools can be used to get improved results out of CEDET, but CEDET will handle
converting that into a representation that would then allow any tool built on
CEDET to work.  This is the same model that worked well for <code>comint.el</code>, and
<code>gud.el</code>.
</p>
<p>
<a href=\"http://code.google.com/p/yasnippet/\">Yasnippet</a> is a bit different in the way it \"competes\" with SRecode.  My first
implementation of SRecode tried recycling tempo templates, but I couldn't get
it to work.  In fact all the template systems I investigated fell short of
what I was trying to do, so I had to roll my own, and ended up using a variant
of the Google template format.
</p>
<p>
The key difference is that the goal was for SRecode to provide a series of
base templates for code generation.  A tool writer would then write some tool
to generate code.  A user would then use the tool, and say \"This is great, how
do I change where the <code>{</code> goes?\"
</p>
<p>
The answer is to override the template with that detail in it without
interfering with the system templates.  That only works if the templates are
sufficiently granular that the changed template can be simple.  Template reuse
needs to be high so that if your company formats your methods as:
</p>



<pre class=\"src src-c\"><span class=\"org-type\">int</span> <span class=\"org-function-name\">mymethod</span>() { implementme() };
</pre>



<p>
instead of 
</p>



<pre class=\"src src-c\"><span class=\"org-type\">int</span> <span class=\"org-function-name\">mymethod</span>() {
}
</pre>



<p>
that one template change will allow this to happen for all code generated from
every tool.
</p>
<p>
Thus, the audience for yasnippet and SRecode is quite different.  Of course
you could do yasnippet like things with SRecode if someone took the time to
improve the field-editing feature in SRecode, but that has not been my focus.
</p>


  <strong>djcb: Do you follow the overall Emacs development process? Are there
  things you would like to see changed/improved?</strong>

<p>
<b>EML</b>: I watch the <code>emacs-devel</code> mailing list, mainly to see if anything 
related to CEDET goes by that I can help with, or what the latest cool 
feature might be. My first contribution of <a href=\"http://cedet.sourceforge.net/speedbar.shtml\">Speedbar</a> to Emacs in Emacs 20 
helped drive some features related to overlines, boxes, and other face 
attributes that appeared in Emacs 21.
</p>
<p>
In the future, once CEDET and Emacs cross merge techniques are hashed out, I
would expect some key parts that need performance improvements might move into
C.  Another part of CEDET that I'd love to see become bound closer to Emacs is
<code>mode-local.el</code>.  It tries to simulate mode-local variables and mode-local
functions.  This is critical in a complex system like CEDET that needs to
provide a language support author with fine grained control.  There are good
reasons not to make what is currently implemented \"the Emacs way\", but it
would be nice to resolve those and enable mode authors a with a more powerful
way to customize the user experience.
</p>


<strong>djcb: Do you have specific plans for CEDET in the future?</strong>

<p>
<b>EML</b>: Here is the short list:
</p>
<ul>
<li>
Improve Emacs/CEDET cross merging
</li>
<li>
Offload tag storage to an external process - needed for scalability
</li>
<li>
Design/define a \"CEDET mode\" as a way of simplifying the confusing array of
distinct tools and modes that make up CEDET now.
</li>
<li>
Finish the smart-context menu project
</li>
<li>
Resolve the \"code replacement\" problem of parsing a block of code,
transforming it, and re-creating that code in place reliably.

</li>
</ul>


<strong>djcb: In addition to all these 'generic' improvements, are there
specific areas where new contributors could make a difference?</strong>

<p>
<b>EML</b>: Supporting new \"stuff\" in CEDET is one big win.  Stuff can be:
</p>
<ul>
<li>
New project types under EDE to ease transition from something like Visual
Studio to Emacs.
</li>
<li>
Language support, such as parsers, or mode overrides.  Finding ways to take
existing cool tools, like JDE's beanshell, or slime's inferior lisp process
and allowing it to do work for CEDET is another big win.
</li>
<li>
Templates for code generation in new languages.

</li>
</ul>

<p>Tool writing would also be good.  JDEE's author Paul Kinnucan converted many
bits of JDEE to CEDET and co-designed many of CEDET's parts along the way,
such as semanticdb, and that was a huge help.  ECB's current maintainer Klaus
has also had a big impact on the way concepts are abstracted to a tool that
depends on CEDET.
</p>
<p>
Naturally, joining the mailing list and fixing reported bugs and improving
the doc is also a huge help, but not as exciting as writing new code. :)
</p>


<strong>djcb: Finally, many people want to start using CEDET, but it seems they
have a bit of trouble to get started. Do you have any recommendations for
them?</strong>

<p>
<b>EML</b>: Start with the <code>cedet.info</code> file which has many of the common setup
configurations in it.  If you run into something not explained well or at
all, be sure to join the mailing list and be specific about how that doc
failed.  Very few questions on the mailing list refer to the doc, so the doc
is rarely improved in a way that can help others.
</p>
<p>
Another good starting point is Alex Ott's article <a href=\"http://xtalk.msk.su/~ott/en/writings/emacs-devenv/EmacsCedet.html\">A Gentle Introduction to CEDET</a>, which is very helpful.
</p>


<strong>Thanks a lot for your time, Eric! Wishing you a lot of success with
CEDET and all your other projects!</strong>

</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-8830503538191507740?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/8830503538191507740/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=8830503538191507740") (title . "1 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8830503538191507740"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8830503538191507740"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html") (title . "interview with Eric Ludlam (CEDET)"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "1")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5395938754174547300") (published nil "2010-08-22T14:10:00.001+03:00") (updated nil "2010-08-29T22:48:20.779+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "narrowing buffer contents") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
'Narrowing' is yet another of those many useful emacs features that took me
years to appreciate, mostly because I never really tried it. I may not be the
only one, so here's a short introduction.
</p>
<p>
<i>Narrowing</i> is the concept of hiding the buffer contents except for what you
are currently working on. This is useful when you don't want to be distracted,
but also because it allows you to execute commands <i>only</i> on the narrowed
part. You can narrow different things:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">what's shown</th><th scope=\"col\">name</th><th scope=\"col\">binding</th></tr>
</thead>
<tbody>
<tr><td>region (selection)</td><td><code>narrow-to-region</code></td><td><code>C-x n n</code></td></tr>
<tr><td>current page</td><td><code>narrow-to-page</code></td><td><code>C-x n p</code></td></tr>
<tr><td>function</td><td><code>narrow-to-defun</code></td><td><code>C-x n d</code></td></tr>
</tbody>
<tbody>
<tr><td>everything</td><td><code>widen</code></td><td><code>C-x n w</code></td></tr>
</tbody>
</table>


<p>
I never used narrowing for the current page, but apparently it's used by
e.g. <code>Info-Mode</code> to show only one page.
</p>
<p>
That last one is pretty important to remember; it's not <i>totally obvious</i> how
to get back to 'normal' mode where you can see everything. For this very
reason ('where the #&gt;*$@ did my text go'), always-helpful emacs by defaults
<i>disables</i> <code>narrow-to-region</code> (but, for some reason, not the other ones). To
enable it, put the following in your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(put 'narrow-to-region 'disabled nil)
</pre>



<p>
Also note that the mode-line will show 'Narrow' when you're in narrow mode,
lest you forget.
</p>
<p>
When you're using <code>org-mode</code> there is an additional one you might want to
memorize:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">what's shown</th><th scope=\"col\">name</th><th scope=\"col\">binding</th></tr>
</thead>
<tbody>
<tr><td>subtree</td><td><code>org-narrow-to-subtree</code></td><td><code>C-x n s</code></td></tr>
</tbody>
</table>


<p>
I'm using that last one quite often; I have org-files where I keep meeting notes
etc., and when in a certain meeting, I only want to see the notes for that
specific meeting.
</p>
<p>
One <i>bug</i>? <i>feature</i>? of narrowing is that line-numbering is relative to the
narrowed area rather than the full buffer. I'd prefer to have the <i>real</i> line
numbers.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5395938754174547300?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5395938754174547300/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5395938754174547300") (title . "10 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5395938754174547300"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5395938754174547300"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/08/narrowing-buffer-contents.html") (title . "narrowing buffer contents"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "10")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-176862637301615408") (published nil "2010-07-30T21:23:00.002+03:00") (updated nil "2010-07-30T22:49:00.260+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "some handy key bindings") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
Emacs offers many handy key bindings; every now and then I come across a new
one, which has been hiding there somewhere for a decade or more&hellip; Here are
some of my favorites &ndash; I'm listing those that are (a) often useful, (b) might
not be known by everyone already (c) don't require any external packages or
setup. 
</p>
<ul>
<li>
<code>M-27 x</code> gives you <code>xxxxxxxxxxxxxxxxxxxxxxxxxxx</code>; and, believe it or not,
works also with different characters and numbers;
</li>
<li>
<code>M-m</code> jumps to the first non-whitespace character on the current line;
</li>
<li>
<code>M-^</code> joins two lines into one &ndash; like vi(m)'s <code>:join</code>,
except that point must be on the second line, not the first;
</li>
<li>
<code>M-/</code> auto-completes based on words in all your buffers; there are more
powerful alternatives, but this one does not require any setup;
</li>
<li>
<code>C-h k</code> followed by some key or key combination tells you what it does, <code>C-h     m</code> describes the currently active modes, with their key bindings;
</li>
<li>
<code>C-h f</code> documents the current function, <code>C-h v</code> does the same for
variables. <code>C-h a</code> gives you information about commands - for example to get
<code>date</code>-related commands, press <code>C-h a date</code>. This will, however, also get
you commands related to <code>update</code>; instead, you can use <code>C-h a \\bdate</code>
(because <code>C-h a</code> accepts regular expressions);
</li>
<li>
<code>C-x C-o</code> will delete all the empty lines around your current cursor
position, except for one;
</li>
<li>
<code>M-q</code> re-aligns the current paragraph; I use it all the time when writing
e-mails etc. (you might want to check out <a href=\"http://www.emacswiki.org/emacs/FillAdapt\">filladapt</a> for a version that gives
you a bit more smartness with indentations, lists etc.);
</li>
<li>
<code>C-x 8 RET</code> in a recent emacs version gives you an auto-completable list of
special characters to insert. So if I need, say, the Yen-character, I type
<code>C-x 8 RET ye TAB</code> and I get <code>YEN SIGN</code>, which <code>RET</code> will then insert:
¥. Note that the completion only works on the <i>start</i> of the character name,
so if you'd want to include the α-character, you'd need to know that its
UCS-name is <code>GREEK SMALL LETTER ALPHA</code>&hellip; (you can try <code>*alpha</code> or TAB the
empty string, and search in the results buffer, but that's rather slow);
</li>
<li>
<code>C-h l</code> shows your last 300 key presses ('lossage'). Interesting to see, and
it might be useful when <a href=\"http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html\">defining keyboard macros</a>.

</li>
</ul>

<p>What are your favorites? Please share them in the comments.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-176862637301615408?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/176862637301615408/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=176862637301615408") (title . "22 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/176862637301615408"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/176862637301615408"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/07/some-handy-key-bindings.html") (title . "some handy key bindings"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "22")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-8007676915264290254") (published nil "2010-07-21T17:29:00.000+03:00") (updated nil "2010-07-21T17:29:17.913+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "navigating through files and buffers with the lusty explorer") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
I think quite a few people are using <code>ido-mode</code> to navigate through files an
and buffers; we discussed it here already <a href=\"http://emacs-fu.blogspot.com/2009/02/switching-buffers.html\">a long time ago</a>. I am a happy
<code>ido</code>-user myself &ndash; it took me some time to fully get full accustomed to the
key bindings, but now it feels very natural. Definitely an improvement of my
emacs user experience.
</p>
<p>
However, I am always looking for new things &ndash; and one of those is a sort-of
<code>ido-mode</code> substitute. It's called the <a href=\"http://www.emacswiki.org/emacs/LustyExplorer\">Lusty Explorer</a> and it's the emacs
implementation of an existing <a href=\"http://www.vim.org/scripts/script.php?script_id=1890\">vim-plugin</a>. It's quite similar to <code>ido-mode</code>;
the difference is mainly that it shows all the files or buffers at the same
time, in the way that shells (say, <code>bash</code> or <code>zsh</code>) do auto-completion.
</p>
<p>
The best way to show how it works is using an <a href=\"http://viewglob.sourceforge.net/lusty-explorer.el.animated.gif\">screencast</a> (note, this is of a
slightly older version). Lusty Explorer uses <i>fuzzy matching</i>; that means that
I can type <code>/etc/fo</code>, and all items in <code>/etc/</code> with names <code>f.*o</code> match.
</p>
<p>
To install <code>lusty-explorer</code>, simply copy <a href=\"http://www.emacswiki.org/emacs/download/lusty-explorer.el\">lusty-explorer.el</a> to your
<code>load-path</code>, and put something like the following in your <code>.emacs</code>:0
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">lusty-explorer</span> nil 'noerror)

  <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">overrride the normal file-opening, buffer switching
</span>  (global-set-key (kbd <span class=\"org-string\">\"C-x C-f\"</span>) 'lusty-file-explorer)
  (global-set-key (kbd <span class=\"org-string\">\"C-x b\"</span>)   'lusty-buffer-explorer))

</pre>



<p>
Side-note, the <code>(when (require 'lusty-explorer nil 'noerror) ...)</code> is there
just make sure that no error is raised when <code>lusty-explorer</code> is not found, and
the rest is ignored in that case. I use this construct for all packages that
are not necessarily available everywhere I use my <code>.emacs</code>; thus, they will
simply be ignored and not cause startup errors.
</p>
<p>
I've been using Lusty Explorer for about a week now, and I am quite happy with
it. I still need some time (and maybe some more customization) to get used to
the way it works - for example, I found the way <code>ido-mode</code> handles backspace a
bit smarter. Also, <code>ido-mode</code> can be customized to a much greater extent. That
might merely be a factor of the relative age of the packages &ndash; and I haven't
really felt the need to customize Lusty Explorer too much. For now, I think
I'm going to keep on using it. It's worth a try at least!
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-8007676915264290254?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/8007676915264290254/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=8007676915264290254") (title . "10 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8007676915264290254"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8007676915264290254"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/07/navigating-through-files-and-buffers.html") (title . "navigating through files and buffers with the lusty explorer"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "10")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6197615112978020971") (published nil "2010-07-16T20:34:00.005+03:00") (updated nil "2010-07-24T10:25:41.922+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "keyboard macros") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
Keyboard macros are a truly <i>classic</i> emacs feature. Still, I only started to
use them years after I got sucked into emacs &ndash; not so uncommon for emacs
features&hellip; There may be more people like me, so let's raise the awareness a
bit.
</p>
<p>
Keyboard macros allow you to record a number of keystrokes, and replay those at
some later point. This can be a great time-saver when you need to do repetitive
things. In many cases, they are an easy alternative to writing some elisp to get
a job done. Note, keyboard macros are should not be confused with elisp-macros,
which are something else altogether.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">an example </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
So, when would we want to use a keyboard macro? Let's take some tedious task --
for example, we have a list of a few hundred names:
</p>



<pre class=\"example\">Newton, Isaac
Einstein, Albert
Maxwell, James
Turing, Alan
...
</pre>



<p>
and we want to turn that into:
</p>



<pre class=\"example\">Isaac Newton
James Maxwell
Alan Turing
...
</pre>



<p>
so, roughly, put the last name after the first name, and remove the comma.
</p>
<p>
We can solve this in different ways; we could simple change each line by
hand. That's a fine solution if there are only a few lines, but it gets boring
rather quickly.
</p>
<p>
Another way is to use <i>regular expressions</i> (see <a href=\"http://emacs-fu.blogspot.com/2009/05/building-regular-expression.html\">Building regular expressions</a>);
in this case, it's fairly easy to come up with one (assuming you <i>know</i> regular
expressions). But let's see how we can solve it with a keyboard macro.
</p>
<p>
Schematically, we can solve this with the following:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">action</th><th scope=\"col\">key</th></tr>
</thead>
<tbody>
<tr><td>go to beginning of a line</td><td>C-a</td></tr>
<tr><td>kill (cut) the first word</td><td>M-d</td></tr>
<tr><td>delete the next two characters</td><td>DEL DEL</td></tr>
<tr><td>go to the end of the line</td><td>C-e</td></tr>
<tr><td>insert a space</td><td>SPC</td></tr>
<tr><td>yank (paste)</td><td>C-y</td></tr>
<tr><td>go to the next line</td><td>C-n</td></tr>
</tbody>
</table>



<p>
This may look like some magical incantation, but it comes quite natural when you
are actually doing the editing. 
</p>
<p>
An <b>important</b> thing to remember when working with keyboard macros is that you
do your commands in such a way that they can be repeated for each line. Suppose
you would select <code>Newton</code> with <i>shift-select</i>, i.e., <code>C-SPC</code> at the beginning of
the line and pressing the right arrow key 6 times &ndash; that works for <code>Newton</code>,
but not for <code>Einstein</code>. Instead, we need to use <code>M-d</code> ('<code>kill-word</code>')
instead.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">defining a macro </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
Now that we have solved the problem for a single line, let's make a keyboard
macro.
</p>
<p>
We move the cursor to the first line, and start the definition by pressing
<code>C-x (</code>, or alternatively, <code>F3</code>. Then, we press the commands <code>C-a</code>, <code>M-d</code>, <code>DEL DEL</code>, <code>C-e</code>, <code>SPC</code>, <code>C-y</code>, <code>C-n</code> (as in the list above).  To finish the
definition, press <code>C-x )</code>, (or <code>F4</code>).
</p>
<p>
Hurray, we have our macro. Now, let's use it.
</p>
</div>

</div>

<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">using the macro </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
Now, to execute the last defined macro, you press <code>C-x e</code>. We could repeat that
for our whole list, but fortunately there's an easier way to repeat a macro <i>n</i>
times, using a <i>prefix argument</i>. For example, to repeat the macro 123 times,
you first press <code>C-u 123</code> and then <code>C-x e</code>. 
</p>
<p>
There's a slightly shorter way to do this: instead of <code>C-u 123</code> we can write
<code>M-123</code>, and for <code>C-x e</code> we can use <code>F4</code> (<code>kmacro=end-or-call-macro</code>).
</p>
<p>
You can even repeat the macro until the end of the buffer is reached with <code>C-u 0 C-x e</code>; this only makes sense if the macros ever <i>reaches</i> the end of the buffer
of course. (Remember that you can always terminate with <code>C-g</code>, <code>keyboard-quit</code>)
</p>
<p>
You can also apply your keyboard macro to <i>all lines in the selected area</i>
(region) with <code>M-x apply-macro-to-region-lines</code> (or <code>C-x C-k r</code>). Important to
remember: this will actually move the cursor (point) to the start of each line,
and then execute the macro. If you want your macro like that, the
go-to-the-next-line should <b>not</b> be part of your macro, or you will be skipping
lines.
</p>
</div>

</div>

<div id=\"outline-container-1_4\" class=\"outline-3\">
<h3 id=\"sec-1_4\">saving macros for later use </h3>
<div class=\"outline-text-3\" id=\"text-1_4\">


<p>
If you want to use multiple macros, you can <i>name them</i>. You can do this with
<code>M-x name-last-kbd-macro</code>. If you name your macro, say, <code>foo</code> (inventive as we
are), you can then execute it after that as <code>M-x foo</code>, which will be available
until you exit emacs.
</p>
<p>
If you want to have the macro for future emacs sessions as well, you can use
<code>insert-kbd-macro</code>, which will give you an elisp version of your macro. For our
example, this will look like:
</p>



<pre class=\"src src-emacs-lisp\">(fset 'foo 
   [?\\C-a ?\\M-d delete delete ?\\C-e ?  ?\\C-y ?\\C-n])
</pre>



<p>
Not very readable, but we can put this in <code>.emacs</code>, and we can use it the next
time we start emacs as well. We can also add a key binding for this, for
example:
</p>



<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-c f\"</span>) 'foo)
</pre>



<p>
This will bind <code>foo</code> to <code>C-c f</code>.
</p>
</div>
</div>

</div>

<div id=\"outline-container-2\" class=\"outline-2\">
<h2 id=\"sec-2\">final notes </h2>
<div class=\"outline-text-2\" id=\"text-2\">


<p>
Keyboard macros can be useful and easy, but they are fundamentally connected
to key presses &ndash; so, if you remap your keys to something different, your
macros may not work anymore. Also, the macros are pretty much <i>write-only</i> in
the way we use them here. You can edit them in the <i>macro editor</i> though, with
<code>M-x edit-kbd-macro M-x foo</code>; we'll then get something like:
</p>



<pre class=\"example\">;; Keyboard Macro Editor.  Press C-c C-c to finish; press C-x k RET to cancel.
;; Original keys: C-a M-d 2*&lt;delete&gt; C-e SPC C-y C-n

Command: foo
Key: none

Macro:

C-a                     ;; move-beginning-of-line
M-d                     ;; kill-word
2*&lt;delete&gt;              ;; delete-char
C-e                     ;; move-end-of-line
SPC                     ;; self-insert-command
C-y                     ;; yank
C-n                     ;; next-line
</pre>



<p>
Keyboard macros can be quite a useful trick in your arsenal. And I have not
even gone into more advanced tricks like <i>macros with variations</i> or the
<i>macro ring</i>. Please refer to the section <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros\">Keyboard macros</a> in the emacs
manual (<code>C-h r</code>) for all the details.
</p>
<p>
And, finally, don't let the text-based example limit your imagination &ndash; you
can turn just about any repetitive sequence of tasks into a macro.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6197615112978020971?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6197615112978020971/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6197615112978020971") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6197615112978020971"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6197615112978020971"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html") (title . "keyboard macros"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "14")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2453472948117026214") (published nil "2010-06-30T23:05:00.002+03:00") (updated nil "2010-07-01T19:16:55.939+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "console apps in emacs with multi-term") (content ((type . "html")) "<div><a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s1600/htop.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s320/htop.png\" /></a></div>
<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">multi-term </h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p>
<strong>updated</strong> Whenever it makes sense, I try to use emacs for my computer-based activities;
surely, programs like <a href=\"http://www.gimp.org/\">The Gimp</a> or a graphical web browser cannot <i>yet</i> be
replace by emacs, but I'm making progress. I like the ways emacs gives me to
automate and speed-up my tasks; I get some return-on-time-investment.
</p>
<p>
2010 or not, I still spend quite a bit of time on the console. So why not do
that from within emacs? There different ways to run shells within emacs. 
</p>
<p>
The simplest one is <code>shell</code> (i.e,, <code>M-x shell</code>), which starts a simple shell,
which does not support which does not support 'graphical' console applications,
such as <code>mutt</code>, <code>mc</code>, <code>htop</code>. 
</p>
<p>
Then there are <code>term</code> and <code>ansi-term</code> (<code>M-x ansi-term</code>) that do support such
applications, which <code>ansi-term</code> supporting colors as well (it seems to have
become the default for <code>term</code> in recent emacs versions).
</p>
<p>
Another one is the nifty <a href=\"http://www.emacswiki.org/emacs/CategoryEshell\">EShell</a> (included with emacs), which is not just a
(simple) terminal, but also a full shell environment, and has integration with
other things in emacs.  It's nice, but has some of the limitations that <code>shell</code>
has - you cannot run 'graphical' applications; also, I don't really need a
<i>shell</i>, as I am quite happy with <a href=\"http://zsh.org\">zsh</a> (zed shell) already, which is more
powerful, and I prefer a shell that works both inside and outside emacs.
</p>
<p>
For all these reasons, I am using <a href=\"http://www.emacswiki.org/emacs/MultiTerm\">MultiTerm</a>, which has 'graphical' support that
<code>ansi-term</code> has, but adds a nice extra, namely support for multiple terminals
within emacs. I'm not fully up to date with the exact difference in the terminal
support between the two, but I haven't had any problems so far.
</p>
<p>
You can install <code>multi-term</code> (put it in your <code>load-path</code>), and add the
following to your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(autoload 'multi-term <span class=\"org-string\">\"multi-term\"</span> nil t)
(autoload 'multi-term-next <span class=\"org-string\">\"multi-term\"</span> nil t)

(<span class=\"org-keyword\">setq</span> multi-term-program <span class=\"org-string\">\"/bin/bash\"</span>)   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">use bash
</span><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">(</span><span class=\"org-comment\"><span class=\"org-keyword\">setq</span></span><span class=\"org-comment\"> multi-term-program \"/bin/zsh\") ;; or use zsh...
</span>
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">only needed if you use autopair
</span>(<span class=\"org-keyword\">add-hook</span> 'term-mode-hook
  #'(<span class=\"org-keyword\">lambda</span> () (<span class=\"org-keyword\">setq</span> autopair-dont-activate t)))


(global-set-key (kbd <span class=\"org-string\">\"C-c t\"</span>) 'multi-term-next)
(global-set-key (kbd <span class=\"org-string\">\"C-c T\"</span>) 'multi-term) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">create a new one
</span></pre>



<p>
With this, <code>C-c t</code> will jump through your <code>multi-term</code> buffers (create a new one
if it doesn not exist yet), while <code>C-c T</code> unconditionally creates a new
terminal. 
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2453472948117026214?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2453472948117026214/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2453472948117026214") (title . "8 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2453472948117026214"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2453472948117026214"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/06/console-apps-in-emacs-with-multi-term.html") (title . "console apps in emacs with multi-term"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s72-c/htop.png") (height . "72") (width . "72"))) (thr:total nil "8")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5801320037956802309") (published nil "2010-06-17T22:24:00.001+03:00") (updated nil "2010-06-20T14:00:58.297+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "programming"))) (title ((type . "text")) "automatic pairing of brackets and quotes") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
Some text-editors, notably <a href=\"http://en.wikipedia.org/wiki/TextMate\">TextMate</a> for <i>MacOS</i>, have a nice feature where
inserting a opening <b>(</b> will automatically insert the closing <b>)</b>, and put the
cursor in between them (and does same for [], {}, and various quote-marks).
</p>
<p>
Not surprisingly, there are <a href=\"http://www.emacswiki.org/emacs/AutoPairs\">some implementations</a> for emacs as well; the best
one I have found so far is called <a href=\"http://code.google.com/p/autopair/\">autopair</a>, which was written by João
Távora. It usually does things <i>just right</i>. Do things 'just right' is
essential for such a tool; even small annoyances can disturb your
<i>flow</i>. Autopair tries to do whatever makes the most sense for a given mode
(programming language etc.), but it can be tuned as well.
</p>
<p>
After <a href=\"http://code.google.com/p/autopair/\">installation</a>, you can automatically activate it for all modes with (in
your <code>.emacs</code>):
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">autopair</span>)
(autopair-global-mode 1)
</pre>



<p>
Now, evaluate this or restart emacs, and enjoy the autopairing-magic!
</p>
<p>
Except for <i>autopairing</i>, <code>autopair</code> also takes care of <i>autocleaning</i>; that
is, if I press <b>(</b> it turns that into <b>()</b> (the pairing part), and if I press
Backspace then, it removes the whole <b>()</b> (the cleaning part). This makes
things much less annoying if you type a pair by accident. Autopairing is the
kind of thing that can get annoying quickly if it does not things exactly
right &ndash; and autopair succeeds!
</p>
<p>
Another nice trick it offers is <i>autowrapping</i> &ndash; that is, I select a <b>word</b>,
press \", and automatically it's turned into \"<b>word</b>\". To enable that, you need
to add the following:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> autopair-autowrap t)
</pre>



<p>
Note: you might want to see the notes below about <code>delete-selection-mode</code>
and <code>cua-mode</code>.
</p>
<p>
Anyway, <code>autopair</code> with autowrap makes for a really smooth editing
experience, I love it! There are two small issues for me though. First, when the cursor in front of some non-whitespace,
I'd like autopairing <i>not</i> to happen, and second, somehow I can't seem to
get \"-autopairing to work in <code>org-mode</code>; of course, that could be my own
fault. These things might be tunable; I haven't tried very hard yet.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">delete-selection-mode </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
Important to mention here is that <code>autopair</code> is (by default) not fully
compatible with <a href=\"http://www.emacswiki.org/emacs/DeleteSelectionMode\">delete-selection-mode</a>. As you may know, that is the mode that
causes emacs to replace the current selection with a character typed, similar
to what most other programs do. I think many people have it enabled in their
<code>.emacs</code> with something like:
</p>



<pre class=\"src src-emacs-lisp\">(delete-selection-mode 1)
</pre>



<p>
If you want to keep on using that together with <code>autopair</code>, add the
following to your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(put 'autopair-insert-opening 'delete-selection t)
(put 'autopair-skip-close-maybe 'delete-selection t)
(put 'autopair-insert-or-skip-quote 'delete-selection t)
(put 'autopair-extra-insert-opening 'delete-selection t)
(put 'autopair-extra-skip-close-maybe 'delete-selection t)
(put 'autopair-backspace 'delete-selection 'supersede)
(put 'autopair-newline 'delete-selection t)
</pre>



<p>
But, not that that still won't give you the <code>autowrap</code> behavior mentioned
above. For that, we can use <code>cua-mode</code>.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">cua-mode </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
We <a href=\"http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html\">discussed CUA-mode before</a>, focusing on its nice rectangle-editing
features. But CUA-mode can also be an alternative for
<code>delete-selection-mode</code>, and it goes together more nicely with <code>autopair</code>;
so, <i>instead</i> of <code>delete-selection-mode</code> and the <code>put</code>'s, add the following
to your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> cua-enable-cua-keys nil)           <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't add C-x,C-c,C-v
</span>(cua-mode t)                             <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">for rectangles, CUA is nice
</span></pre>



<p>
See the linked CUA-mode article for the 'why' of that first line. With this
change, <code>autopair</code> should be working smoothly, including <code>autowrap</code>.
</p>
</div>

</div>

<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">further customization </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
As I have hinted at, autopair can be tuned for different modes, and can
differentiate between it's behaviour in literal strings, code, comments
etc. The default are usually sane, but if you're interested, have a look at
the documentation, in particular <code>autopair-extra-pairs</code> and the <i>More    tricks</i>-section in the <a href=\"http://code.google.com/p/autopair\">documentation</a>.
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5801320037956802309?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5801320037956802309/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5801320037956802309") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5801320037956802309"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5801320037956802309"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/06/automatic-pairing-of-brackets-and.html") (title . "automatic pairing of brackets and quotes"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "14")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-3875360908688088594") (published nil "2010-06-10T21:57:00.000+03:00") (updated nil "2010-06-10T21:57:48.064+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "org-mode"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "worldcup games in your org-mode agenda") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
A significant part of the world population will be watching the Football World
Cup in South-Africa this month. For people who use <code>org-mode</code> to organize
their lives, find the schedule of all the games <a href=\"http://lists.gnu.org/archive/html/emacs-orgmode/2010-06/msg00217.html\">in this message</a> I sent to the
<code>org-mode</code> mailing list.
</p>
<p>
In order to have the games show up in your agenda, make sure the file is in
your <code>org-agenda-files</code>. If needed, you could add it with something like in
your <code>org-mode</code> settings:
</p>



<pre class=\"src src-emacs-lisp\">(add-to-list 'org-agenda-files <span class=\"org-string\">\"~/org/fifa-worldcup-2010.org\"</span>)
</pre>




<p>
One small issue with the schedule is that it use the South-African times, and
there is no automatic way to adjust times for the local time zone. As a
work-around, Juan Pechiar provided the following function which makes it easy
to update all org-timestamps in a file:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">uphours</span> (n)
  <span class=\"org-doc\">\"update all timestamps n hours\"</span>
  (interactive <span class=\"org-string\">\"nAdd hours: \"</span>)
  (<span class=\"org-keyword\">save-excursion</span>
    (goto-char (point-min))
    (<span class=\"org-keyword\">while</span> (re-search-forward <span class=\"org-string\">\"[[&lt;]\"</span> nil t)
      (<span class=\"org-keyword\">when</span> (org-at-timestamp-p t)
        (org-timestamp-change n 'hour)
        ))))
</pre>




<p>
Evaluate this function (in emacs, put your cursor after the last \")\"), then
press <code>C-x C-e</code>. After that, you can go to the file with the world cup
schedule, and give an <code>M-x uphours</code>, provide the offset for your timezone,
compare to South-African time (positive or negative).
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-3875360908688088594?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/3875360908688088594/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=3875360908688088594") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3875360908688088594"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3875360908688088594"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/06/worldcup-games-in-your-org-mode-agenda.html") (title . "worldcup games in your org-mode agenda"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "4")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6529863840720914346") (published nil "2010-05-20T10:29:00.003+03:00") (updated nil "2010-06-06T18:18:32.624+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "meta"))) (title ((type . "text")) "100th post") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">100 </h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p>
With that <a href=\"http://emacs-fu.blogspot.com/2010/05/using-zenburn-for-org-mode-generated.html\">last post</a>, emacs-fu reached the 100 posts milestone! Hurray! Thank you for all the
support, it's been a great ride so far, and there's so much more to write about - if only there
were 36 hours in a day.
</p>
<p>
Anyway, to celebrate, I'll be off for the coming weeks (Korea), and I'm not sure if I have much
time to blog from there. So, let's take this opportunity for a small reader poll: what would <b>you</b>
be interested to read about? More programming-related stuff, more org-mode, more about integration
with other programs, more interviews, more &hellip;? 
</p>
<p>
Please leave your ideas in the comments. I'd be interested to hear!
</p>
<p>
<b>Update</b>: I am back now; thanks for all the replies. It seems that many people are interested in
CEDET. In fact, I am interested in it myself as well, but am not using it right now, so it will
take a while. For the time being, <a href=\"http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html\">Alex Ott's Gentle Introduction</a> might be the best way to get
started.
</p>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6529863840720914346?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6529863840720914346/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6529863840720914346") (title . "28 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6529863840720914346"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6529863840720914346"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/100th-post.html") (title . "100th post"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "28")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2585483528455545782") (published nil "2010-05-20T10:15:00.003+03:00") (updated nil "2010-05-20T10:18:20.316+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "org-mode"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "zenburn for org-mode-generated html") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
If you read this blog <i>directly</i>, instead of through some aggregator or feed-reader, you can
now see the code blocks rendered in the nice <i>zenburn</i> color theme that I <a href=\"http://emacs-fu.blogspot.com/2010/04/zenburn-color-theme.html\">discussed before</a>. I'm
really enjoying it, so I added some style sheet definitions, so org-mode <code>#+BEGIN_SRC</code> /
<code>#+END_SRC</code> blocks look as such in the web page (and just like they look on my screen), for
instance:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">fibo</span> (n) 
     <span class=\"org-doc\">\"calculate the Nth (N&gt;=0) fibonacci number in a simple yet
  inefficient way\"</span>
    (<span class=\"org-keyword\">cond</span>
      ((= n 0) 0)
      ((= n 1) 1)
      (t (+ (fibo (- n 1)) (fibo (- n 2))))))

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">now, gimme a list of fibo numbers 0..20
</span>(mapcar 'fibo (number-sequence 0 20))
</pre>




<p>
Note, I discussed the use of such code blocks <a href=\"http://emacs-fu.blogspot.com/2009/05/writing-and-blogging-with-org-mode.html\">earlier</a>; it's one of many nice features of
<code>org-mode</code>. Only quite <i>recently</i> I found that I can press <code>C-c '</code> in such a code block to edit
them in a mode-specific little buffer&hellip; something new and obvious to learn every day.
</p>
<p>
Anyhow, to get the nice zenburn-output in the generated HTML, you can use the
following CSS (note, so far I have only done the code blocks):
</p>



<pre class=\"src src-css\"><span class=\"org-comment\">/* zenburnesque code blocks in for html-exported org mode */</span>

<span class=\"org-function-name\">pre.src</span> {
   <span class=\"org-variable-name\">background</span>: #3f3f3f; <span class=\"org-variable-name\">color</span>: #dcdccc; 
}

<span class=\"org-function-name\">.org-preprocessor</span> {
   <span class=\"org-variable-name\">color</span>: #8cd0d3;
}

<span class=\"org-function-name\">.org-preprocessor</span> {
   <span class=\"org-variable-name\">color</span>: #8cd0d3;
}

<span class=\"org-function-name\">.org-variable-name</span> {
   <span class=\"org-variable-name\">color</span>: #f0dfaf;
}

<span class=\"org-function-name\">.org-string</span> {
   <span class=\"org-variable-name\">color</span>: #cc9393;
}

<span class=\"org-function-name\">.org-type</span> {
   <span class=\"org-variable-name\">color</span>: #dfdfbf;
   <span class=\"org-variable-name\">font-weight</span>: bold;
}

<span class=\"org-function-name\">.org-function-name</span> {
   <span class=\"org-variable-name\">color</span>: #8cd0d3;
   <span class=\"org-variable-name\">font-weight</span>: bold;
}

<span class=\"org-function-name\">.org-keyword</span> {
   <span class=\"org-variable-name\">color</span>: #f0dfaf;
   <span class=\"org-variable-name\">font-weight</span>: bold;
}

<span class=\"org-function-name\">.org-comment</span> {
   <span class=\"org-variable-name\">color</span>: #7f9f7f;
}

<span class=\"org-function-name\">.org-doc</span> {
   <span class=\"org-variable-name\">color</span>: #afd8af;
}

<span class=\"org-function-name\">.org-comment-delimiter</span> {
   <span class=\"org-variable-name\">color</span>: #708070;
}

<span class=\"org-function-name\">.org-constant</span> {
   <span class=\"org-variable-name\">color</span>: #dca3ac;
   <span class=\"org-variable-name\">font-weight</span>:bold;
}

<span class=\"org-function-name\">.org-builtin</span> {
   <span class=\"org-variable-name\">color</span>: #7f9f7f;
}
</pre>



<p>
You can save the above CSS-blob in a file (say, <code>zenburn-code.css</code>), and set
the style sheet for the org-html export by putting a <code>#+STYLE:</code>-line in your
<code>org</code> files:
</p>


<pre class=\"src src-org\"><span class=\"org-org-meta-line\">#+STYLE: &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"zenburn-code.css\" /&gt;</span>
</pre>


</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2585483528455545782?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2585483528455545782/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2585483528455545782") (title . "0 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2585483528455545782"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2585483528455545782"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/using-zenburn-for-org-mode-generated.html") (title . "zenburn for org-mode-generated html"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "0")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-1485620013314216183") (published nil "2010-05-14T20:22:00.001+03:00") (updated nil "2010-05-14T20:23:03.808+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "emacs 23.2") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
<a href=\"http://permalink.gmane.org/gmane.emacs.announce/17\">Recently</a>, emacs version <b>23.2</b> was released. It's a quick update after <a href=\"http://emacs-fu.blogspot.com/2009/07/emacs-23-is-very-near.html\">23.1 came out</a> (July 29 of 2009); it seems Chong Yidong / Stefan Monnier
(<a href=\"http://emacs-fu.blogspot.com/2009/08/interview-with-chong-yidong-and-stefan.html\">interview</a>) are doing releases more often than before they took over emacs
maintainership. A welcome change, I would say.

</p>
<p>
The amount of changes is obviously also a bit smaller than in 23.1, but
there are still some interesting updates. Let's go through a couple of those
here; I am not striving for completeness, and I won't really go into the
biggest change (inclusion of the <a href=\"http://cedet.sourceforge.net/\">CEDET</a> IDE-framework), as I haven't been
using that enough to say anything about it. Instead, let's look at some of
the other highlights; for the full list of changes, please refer to the
<a href=\"http://www.gnu.org/software/emacs/NEWS.23.2\">NEWS</a>-file. If you have some other cool new feature that deserves mentioning,
please add a comment.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">Some highlights </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">

<ul>
<li>
Maximum file size increased to 512Mb (this used to be 256 on 32-bit
machines). This may be useful for big log files etc. It does take a while
to load such big files, but after that it's not too slow, at least if you
have enough RAM. For 'normal' files, you're unlikely to ever hit the
limit; e.g. Tolstoy's <a href=\"http://www.gutenberg.org/files/2600/2600.txt\">War and Peace</a> is only 3 MB&hellip; 

<p>
Note, you can set <code>large-file-warning-threshold</code> to set the maximum file
size after which emacs will starting asking you for confirmation when
trying to open (eh, <i>visit</i>) files.
</p>
</li>

<li>
By default, the mouse cursor turns invisible when typing, so there is no
more need for <code>mouse-avoidance-mode</code> and similar tricks. However, if you
insist on seeing the mouse cursor, you can add to your <code>.emacs</code>:

</li>
</ul>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> make-pointer-invisible nil)
</pre>



<ul>
<li>
On X-based systems, emacs now listens for font changes (Xft), and can
automatically use the GNOME mono-spaced font (as set in the GNOME
<i>Appearance preferences</i> dialog). Note that this may not work for all
fonts/settings (at least in my tests, setting the font to <i>italic</i> does
not seem to reflect in emacs). Anyway, to enable this, put the following
in your <code>.emacs</code> (or the moral equivalent):

</li>
</ul>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> font-use-system-font t)
</pre>




<ul>
<li>
On Unix, Emacs 23.2 now follows the <a href=\"http://www.freedesktop.org/wiki/Specifications/trash-spec\">freedesktop trash specification</a> for
file deletion; thus, the hacks we <a href=\"http://emacs-fu.blogspot.com/2009/05/using-systems-trash-when-deleting-files.html\">hacks we mentioned before</a> are no longer
needed.


</li>
<li>
Some cool additions for <a href=\"http://www.gnu.org/software/tramp/\">Tramp</a>, allowing emacs to access files in <code>rsync</code>
and even <code>imap://</code>-locations. On systems supporting <a href=\"http://en.wikipedia.org/wiki/GVFS\">GVFS</a>, emacs can now
directly use e.g. <code>obex://</code>-uris (Bluetooth). I need to play a bit with
these things! Tramp support has also been built into <code>eshell</code>.

</li>

<li>
There are already quite some ways to do auto-completion in emacs using the
<code>TAB</code>-key, and emacs 23.2 makes this a bit easier to set up. You can add
basic auto-completion with:


</li>
</ul>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> tab-always-indent 'complete)
</pre>




<ul>
<li>
After setting that, the <code>TAB</code>-key will (after trying if there's anything to
indent first) provide possible completions. It works pretty well for
Emacs-Lisp (I did not test other languages), although the way it shows the
completions (separate <code>*Completions*</code>-buffer) is a bit clumsier that what
for instance <code>yasnippet</code> or <code>company-mode</code> do.

</li>
<li>
You can also do partial completions now, by appending <code>initials</code> to the
completion style, i.e.:



</li>
</ul>


<pre class=\"src src-emacs-lisp\"><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">there must be a more elegant way...
</span>(<span class=\"org-keyword\">setq</span> completion-styles (append completion-style '(initials)))
</pre>




<ul>
<li>

With this, you can complete on the initials of functions and variables in
the minibuffer, say, typing <code>C-h v tai</code> and then pressing <code>TAB</code> will give
you <code>tab-always-indent</code>.

</li>
<li>
As mentioned, the biggest change is the addition on the CEDET-framework,
which contains things like smart completion, code browsing, UML diagram
creation, project management &ndash; features somewhat similar to those in
e.g. Eclipse. I don't know how well it works in practice, but I will give
it a try. At least, inclusion in Emacs should make setting it up with all
dependencies a bit easier, as there is now a guaranteed-to-work setup for
Emacs 23.2 at least.

</li>
</ul>

<p>Summarizing, 23.2 provides us with some nice updates all around and brings
CEDET to the masses. Chong Yidong / Stefan Monnier have done a very good job
in making faster releases, while still keeping an eye on the quality. On the
other hand, the previous version (23.1) is a very solid release, and if you
don't need CEDET, there is no real need to hurry to 23.2.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">Future releases </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
A lot is happening in the world of GNU/Emacs, with changes being proposed
and implemented in many different places. There's Eli Zaretskii's way work
on making emacs support bidirectional languages (for right-to-left writing
systems such as Hebrew and Arabic; the /bi/directional part is that one
should be able to mix left-to-right and right-to-left). There is Jan
DjÃ¤rv's work on adding UI-tabs to emacs (like e.g. Firefox has them). There
is Ken Raeburn and Andy Wingo's work on <a href=\"http://wingolog.org/archives/2010/04/02/recent-developments-in-guile\">adding Guile Scheme support to emacs</a> - possibly replacing the current Emacs Lisp implementation in the
future. These are just a few of the more prominent projects.

</p>
<p>
Nobody knows in which release these items will be available (if at all),
but it's exciting to see all the directions people are taking emacs.
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1485620013314216183?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/1485620013314216183/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=1485620013314216183") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1485620013314216183"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1485620013314216183"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/emacs-232.html") (title . "emacs 23.2"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "5")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5564809285695465242") (published nil "2010-05-12T00:02:00.005+03:00") (updated nil "2010-05-12T07:33:42.360+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "cleaning up the mode-line") (content ((type . "html")) "Emacs' version on a status-bar is called the <i>mode-line</i>, and contains all
kind of information – the current buffer name, the cursor position and a
lot of other things, depending on what major and minor modes are active.
<br />
<br />
Customizing the mode-line is, unfortunately, rather hard. One day, I'll
write something about that… but for now at least we may be able to improve
things a little bit, by reducing mode line pollution. Mode line pollution?
Well, many parts of emacs like to announce their presence and state in the
mode line. With the limited space available there, this can become a bit of
an issue, the <code>(Lisp Interaction company Yas abbrev)</code> takes quite some
space:
<br />
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s1600/Screenshot-djcb%40mindcrime.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"86\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s400/Screenshot-djcb%40mindcrime.png\" width=\"400\" /></a></div>
<br />
<br />
But there are some ways to limit the space taken by modes and
minor-modes. Note, these snippets should go in your <tt>.emacs</tt>, and you need to restart emacs to make them active.<br />
<br />
First, the minor modes (note, you can see the currently activated
ones with <code>C-h m</code>); install the handy <a href=\"http://www.eskimo.com/~seldon/diminish.el\">diminish.el</a> (or get it using the <tt>emacs-goodies-el</tt> package when using Debian/Ubuntu</tt>) and add something like the following:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">diminish</span> nil 'noerror)
  (<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"company\"</span>
      '(diminish 'company-mode <span class=\"org-string\">\"Cmp\"</span>))
  (<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"abbrev\"</span>
    '(diminish 'abbrev-mode <span class=\"org-string\">\"Ab\"</span>))
  (<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"yasnippet\"</span>
    '(diminish 'yas/minor-mode <span class=\"org-string\">\"Y\"</span>)))
</pre>
<br />
And the major-modes, for example for Emacs Lisp mode:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">add-hook</span> 'emacs-lisp-mode-hook 
  (<span class=\"org-keyword\">lambda</span>()
    (<span class=\"org-keyword\">setq</span> mode-name <span class=\"org-string\">\"el\"</span>)))&nbsp;</pre>
This looks a bit shorter:
<br />
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFycNVGSI/AAAAAAAAAgc/zgzXi8UqM4Y/s1600/Screenshot-djcb%40mindcrime-1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"102\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFycNVGSI/AAAAAAAAAgc/zgzXi8UqM4Y/s400/Screenshot-djcb%40mindcrime-1.png\" width=\"400\" /></a></div>
<br />
You can of course set these names to whatever is obvious to you.<div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5564809285695465242?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5564809285695465242/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5564809285695465242") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5564809285695465242"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5564809285695465242"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/cleaning-up-mode-line.html") (title . "cleaning up the mode-line"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s72-c/Screenshot-djcb%40mindcrime.png") (height . "72") (width . "72"))) (thr:total nil "4")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2273904079063818539") (published nil "2010-04-27T22:38:00.003+03:00") (updated nil "2010-04-28T07:35:52.081+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "navigating the kill-ring") (content ((type . "html")) "<p>The <code>kill-ring</code> is emacs' implementation of a copy-paste-clipboard. As
expected, it's more powerful than what most other editors offer - but at the
same time, it may be a bit hard to use. We already discussed the <code>kill-ring</code>
in the <a href=\"http://emacs-fu.blogspot.com/2009/01/kill-ring.html\">Emacs-Fu prehistory</a>.
</p>
<p>
One of the more powerful features of the emacs kill-ring is that is allows for
<i>multiple</i> entries to be saved there. You can then retrieve those older
entries by using <i>prefix arguments</i>, that is: <code>C-y</code> will retrieve the last
item from the kill-ring, while <code>M-</code> <i>n</i> <code>C-y</code> will retrieve the <i>n</i> <sup>th</sup> last
stretch of 'killed' (cut/copied) text. For example, <code>M-2 C-y</code> will retrieve
the second last one.
</p>
<p>
Unfortunately, for most people it's quite hard to remember what was 'killed'
and when and in what order&hellip; Those people can of course use the menu
(Edit/Paste from kill menu), but that is not always so convenient, requires
mousing around etc. 
</p>
<p>
Edit: As <code>Anynomous</code> mentions in the comments, one can of course use <code>M-y</code> to
circle through the candidates. This is quite
useful, esp. when you have only a few items in the ring. Note, this command
only works just after a 'yank' (<code>C-y</code>).
</p>

<div id=\"outline-container-1\" class=\"outline-3\">
<h3 id=\"sec-1\">browse-kill-ring </h3>
<div class=\"outline-text-3\" id=\"text-1\">


<p>
Instead, using the handy <code>browse-kill-ring</code> extension, you can open a buffer
which lists the contents of the kill ring, and you can move your cursor to the
desired item and insert it.
</p>
<p>
Installation in simple; first get the <code>browse-kill-ring</code> package <a href=\"http://www.emacswiki.org/emacs/browse-kill-ring.el\">from EmacsWiki</a>, or, alternatively, Debian/Ubuntu users can install the
<code>emacs-goodies-el</code>-package.
</p>
<p>
Then, add to your <code>.emacs</code> something like:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">browse-kill-ring</span> nil 'noerror)
  (browse-kill-ring-default-keybindings))
</pre>



<p>
Now, the <code>M-y</code> key binding will activate <code>browse-kill-ring</code> iff the <i>normal behavior</i> (see above) is not available, i.e., when the last command was <b>not</b> a
'yank'.  You can also edit the kill-ring (press <code>C-h m</code> when in the
<code>browse-kill-ring</code>-buffer to see the available bindings).
</p>
</div>

</div>

<div id=\"outline-container-2\" class=\"outline-3\">
<h3 id=\"sec-2\">a little pop-up menu </h3>
<div class=\"outline-text-3\" id=\"text-2\">


<p>
While browsing EmacsWiki, I found another trick:
</p>



<pre class=\"src src-emacs-lisp\">(global-set-key <span class=\"org-string\">\"\\C-cy\"</span> '(<span class=\"org-keyword\">lambda</span> ()
   (interactive)
   (popup-menu 'yank-menu)))
</pre>



<p>
After which <code>C-c y</code> will show a little pop-up menu with the your kill-menu
entries. It does not seem to fully synchronize with the (possibly edited)
entries you get from <code>browse-kill-ring</code>, but it's a pretty neat way to
navigate through your kill-ring-buffers &ndash; if you don't have too many of them
(if so, you could customize the <code>kill-ring-max</code> variable).
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2273904079063818539?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2273904079063818539/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2273904079063818539") (title . "6 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2273904079063818539"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2273904079063818539"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/04/navigating-kill-ring.html") (title . "navigating the kill-ring"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "6")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-7776999996134947941") (published nil "2010-04-18T20:35:00.003+03:00") (updated nil "2010-04-18T20:48:07.459+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "creating custom modes the easy way with generic-mode") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
Syntax highlighting is useful when editing configuration files, programs and
so on, as it helps to prevent errors and makes it easier to quickly scan
documents.
</p>
<p>
Emacs supports syntax highlighting (<i>font locking</i> in emacs lingo) for many
different file types. For many common cases (e.g. editing for many programming
languages, <code>org-mode</code>), emacs' support goes much further than merely
colorizing keywords, and offers all kinds of 'magic' (auto-completion,
'electricity', special key bindings, &hellip;). For some other file types, at least
keywords are given some different color.
</p>
<p>
Still, there are files that are <i>not</i> recognized by emacs as having some
special format; these are displayed as plain text. This may be the case for
less-common configuration files, or your own specific formats.
</p>
<p>
Defining a full 'mode' for such file types can be a lot of work. Fortunately,
emacs offers a easier way: <code>generic-mode</code>. <code>generic-mode</code> defines a whole lot
of mode of modes for common formats, but also defines the
<code>define-generic-mode</code> macro to create your own modes.
</p>
<p>
Suppose we have a little language called <code>foo</code>; a typical <code>foo</code>-file might
look something like:
</p>


<pre class=\"src src-text\">!! this is a comment
account=foo; !! another comment
user=jimmy;
password=$3cre7;
</pre>



<p>
Using <code>define-generic-mode</code>, we can easily define a mode for this:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">generic-x</span>) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">we need this
</span>
(<span class=\"org-keyword\">define-generic-mode</span> 
  'foo-mode                         <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">name of the mode to create
</span>  '(<span class=\"org-string\">\"!!\"</span>)                           <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">comments start with '!!'
</span>  '(<span class=\"org-string\">\"account\"</span> <span class=\"org-string\">\"user\"</span> 
    <span class=\"org-string\">\"password\"</span>)                     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">some keywords
</span>  '((<span class=\"org-string\">\"=\"</span> . 'font-lock-operator)     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">'=' is an operator
</span>    (<span class=\"org-string\">\";\"</span> . 'font-lock-builtin))     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">';' is a a built-in 
</span>  '(<span class=\"org-string\">\"\\\\.foo$\"</span>)                      <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">files for which to activate this mode 
</span>   nil                              <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">other functions to call
</span>  <span class=\"org-doc\">\"A mode for foo files\"</span>            <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">doc string for this mode
</span>)
</pre>


<p>
Now, this will look something like this (if necessary, see the <a href=\"http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html\">colorized version</a>):
</p>


<pre class=\"src src-foo\"><span class=\"org-comment-delimiter\">!! </span><span class=\"org-comment\">this is a comment
</span><span class=\"org-keyword\">account</span><span class=\"org-operator\"> = </span>foo<span class=\"org-builtin\">;</span> <span class=\"org-comment-delimiter\">!! </span><span class=\"org-comment\">another comment
</span><span class=\"org-keyword\">user</span><span class=\"org-operator\"> = </span>jimmy<span class=\"org-builtin\">;</span>
<span class=\"org-keyword\">password</span><span class=\"org-operator\"> = </span>$3cre7<span class=\"org-builtin\">;</span>
</pre>


</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-7776999996134947941?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/7776999996134947941/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=7776999996134947941") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/7776999996134947941"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/7776999996134947941"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html") (title . "creating custom modes the easy way with generic-mode"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "5")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6991806489664012099") (published nil "2010-04-04T13:48:00.001+03:00") (updated nil "2010-04-04T13:53:37.347+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "the zenburn color theme") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s1600/zenburn.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s320/zenburn.png\" /></a></div>
A popular way to customize emacs is changing its <i>color scheme</i>, as already
discussed <a href=\"http://emacs-fu.blogspot.com/2009/03/color-theming.html\">color theming</a>. Until recently, I was using an evolved version of the
color theme presented there, '<code>djcb-dark</code>'. It works for me but, admittedly,
it's a bit ugly.<br />
<br />
But recently, in a post to the <a href=\"http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html\">Wanderlust</a> mailing list, someone mentioned a
color theme called <i>Zenburn</i>. <a href=\"http://slinky.imukuppi.org/zenburnpage/\">Zenburn</a> started its life as a color scheme for

<code>vim</code>, around 2002. The explicit goal was to have a pleasant theme that is
light on the eyes, and allows you to stay 'in the zone' for long stretches of
time. People liked it, and version for many other programs were made,
<a href=\"http://brockman.se/2003/zenburn/\">including emacs</a>.
<br />
<br />
I've been using Zenburn for the last few weeks, and I really like it. I used
to think that 'low-contrast' would mean that things are not really clear; but
the opposite seems true. Anyway, the screen shot says more than a thousand
words I suppose…
<br />
<br />
Zenburn-for-emacs (written by Daniel Brockman) can be found at the link
above. I've sent my updates to him of course, but as it may take a while for
the 'official' version to be updated, I've put my version on
Emacswiki: <a href=\"http://www.emacswiki.org/emacs/ColorThemeZenburn\">ZenburnColorTheme</a>. The changes are the support for Wanderlust,
<code>hi-line</code> (for <a href=\"http://emacs-fu.blogspot.com/2008/12/highlighting-current-line.html\">highlighting the current line</a>) , <code>magit</code> and <a href=\"http://emacs-fu.blogspot.com/2009/07/keeping-related-buffers-together-with.html\"><code>elscreen</code></a>; also,
I made selected (eh, <i>transiently marked regions</i>) not loose their foreground
color.

<br />
<br />
Note, the theme is not yet part of the <code>color-theme</code> package, but does require
it.
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6991806489664012099?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6991806489664012099/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6991806489664012099") (title . "26 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6991806489664012099"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6991806489664012099"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/04/zenburn-color-theme.html") (title . "the zenburn color theme"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s72-c/zenburn.png") (height . "72") (width . "72"))) (thr:total nil "26")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2461533492060024024") (published nil "2010-03-20T13:34:00.001+02:00") (updated nil "2010-03-20T13:35:50.591+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "showing the buffer position in the mode-line") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">
I do quite a bit of <a href=\"http://emacs-fu.blogspot.com/2009/12/scrolling.html\">scrolling</a> in emacs, but I hardly ever use the scroll bar
for that. The main reason for still having the scroll bar is that it gives me
some indication where I am in the buffer. Of course, there is some information
in the mode-line, and you can get some more with <code>size-indication-mode</code>, but
it's not as immediately obvious as the scroll bar.
<br />
But recently, I discovered Lennart Borgman's <a href=\"http://www.emacswiki.org/emacs/SmlModeLine\"><code>sml-modeline</code></a>, which
combines all of the scroll bar information into a nice visual indication on
the modeline, and I have been happily using it, and got rid of my scroll bar.
<br />
Put you <code>sml-modeline</code> in your <code>load-path</code>, and the following fragment in your
<code>.emacs</code> should do the trick:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">sml-modeline</span> nil 'noerror)    <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">use sml-modeline if available
</span>  (<span class=\"org-keyword\">progn</span> 
    (sml-modeline-mode 1)                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">show buffer pos in the mode line
</span>    (scroll-bar-mode -1))                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">turn off the scrollbar
</span>  (scroll-bar-mode 1)                       <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">otherwise, show a scrollbar...
</span>  (set-scroll-bar-mode 'right))             <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">... on the right
</span></pre>
<div class=\"separator\" style=\"clear: both; text-align: center;\">
</div>
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s1600-h/bufpos.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s320/bufpos.png\" /></a></div>
<br />
Note, there is a older version available in Emacswiki which has some problems
(such as conflicting with the <a href=\"http://www.smlnj.org/doc/Emacs/sml-mode.html\">Standard ML editing mode</a> for emacs); thus, for
now it's better to us the <a href=\"http://bazaar.launchpad.net/%7Enxhtml/nxhtml/main/annotate/head%3A/util/sml-modeline.el\">Launchpad version</a>; the instructions above apply to
that version.
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2461533492060024024?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2461533492060024024/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2461533492060024024") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2461533492060024024"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2461533492060024024"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/03/showing-buffer-position-in-mode-line.html") (title . "showing the buffer position in the mode-line"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s72-c/bufpos.png") (height . "72") (width . "72"))) (thr:total nil "5")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-4807516215162297206") (published nil "2010-03-08T20:24:00.001+02:00") (updated nil "2010-03-08T22:32:08.881+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "cleaning up buffers automatically") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
<a href=\"http://emacs-fu.blogspot.com/2010/02/dealing-with-many-buffers-ibuffer.html\">Recently, I discussed</a> some ways to deal with large numbers of buffers. Maybe
we can also take a step back and ask why we have so many buffers in the first
place - do we really need all of them?
</p>
<p>
Well, the obvious answer is: <i>probably not</i>. After a few days of
<code>(emacs-uptime)</code> there are all kinds of temporary output buffers, man pages
and unchanged buffers you haven't touched in a long time. Let's get rid of
those!
</p>

</div>

<div id=\"outline-container-1.1\" class=\"outline-3\">
<h3 id=\"sec-1.1\">midnight </h3>
<div class=\"outline-text-3\" id=\"text-1.1\">


<p>
For this very purpose, emacs provides <code>midnight-mode</code> (as has done so for more
than a decade). At midnight, it looks at all the buffers, and determines which
of the buffers are no longer in use, and closes ('kills') them. Regardless of
its name, this cleanup does not <i>necessarily</i> have to take place at midnight,
but could be invoked at any time.
</p>
<p>
Setup is easy, just put the following in your <code>.emacs</code>:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">midnight</span>)
</pre>



<p>
Clearly, the package was designed for emacs instances that are running for
<i>long</i> times &ndash; for example, by default it clears buffers after having been
inactive for <b>3 days</b>. I'm not sure if that use case is very common today.
Anyway, you can change it by setting <code>clean-buffer-list-delay-general</code> (which
takes the number of <b>days</b> before a buffer becomes eligible for killing).
</p>
<p>
You can ask <code>midnight-mode</code> to clean-up unused buffers <b>right now</b> with <code>M-x clean-buffer-list</code>. Also, you can use some variables to control which buffers
are to be killed, and which ones specifically not:
</p>


<pre class=\"example\">clean-buffer-list-kill-buffer-names
clean-buffer-list-kill-never-buffer-names
clean-buffer-list-kill-regexps
clean-buffer-list-kill-never-regexps
</pre>



<p>
To run <code>clean-buffer-list</code> every <i>n</i> minutes or so, you could use
<code>run-at-time</code>, left as an exercise to the reader.
</p>
</div>

</div>

<div id=\"outline-container-1.2\" class=\"outline-3\">
<h3 id=\"sec-1.2\">tempbuf </h3>
<div class=\"outline-text-3\" id=\"text-1.2\">


<p>
Another way to accomplish roughly the same is <a href=\"http://www.emacswiki.org/emacs/TempbufMode\">TempbufMode</a>.
</p>
<p>
It seems a bit better equipped for shorter cleanup interval, and you have some
killed. However, that requires you to add it to the modes where you'd like to
more influence on the algorithm it uses to decide whether a buffer may be use
it, something like:
</p>



<pre class=\"src src-emacs-lisp\"><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">download tempbuf: http://www.emacswiki.org/emacs/tempbuf.el
</span>(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">tempbuf</span> nil 'noerror) 
  (<span class=\"org-keyword\">add-hook</span> 'custom-mode-hook 'turn-on-tempbuf-mode)
  (<span class=\"org-keyword\">add-hook</span> 'w3-mode-hook 'turn-on-tempbuf-mode)
  (<span class=\"org-keyword\">add-hook</span> 'Man-mode-hook 'turn-on-tempbuf-mode)
  (<span class=\"org-keyword\">add-hook</span> 'view-mode-hook 'turn-on-tempbuf-mode))
</pre>



<p>
Side-note: I'm using the <code>(when (require 'tempbuf nil 'noerror) ... )</code> pattern
here to make sure that my <code>.emacs</code> also works when <code>tempbuf</code> is not available.
</p>
<p>
<b>Added</b>: for cleaning-up your buffer list <em>non</em>-automatically, you can simply
use <code>M-x kill-some-buffers</code>. (Thanks Susan!). Or you can use <code>C-x C-b</code>.
</div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-4807516215162297206?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/4807516215162297206/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=4807516215162297206") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/4807516215162297206"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/4807516215162297206"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/03/cleaning-up-buffers-automatically.html") (title . "cleaning up buffers automatically"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "4")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-246570950774488454") (published nil "2010-02-23T20:06:00.003+02:00") (updated nil "2010-06-14T12:26:12.665+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "wanderlust"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "e-mail"))) (title ((type . "text")) "wanderlust iii") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">Wanderlust </h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p>
I have been using the <a href=\"http://www.gohome.org/wl/\">Wanderlust E-mail client</a> for almost a year now, and I
am very happy with it. In previous postings I already discussed <a href=\"http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html\">setup</a> and
some <a href=\"http://emacs-fu.blogspot.com/2009/09/wanderlust-tips-and-tricks.html\">tips and tricks</a>; and I also had somewhat related posts on <a href=\"http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html\">bbdb</a> (the
address book) and <a href=\"http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html\">warning you about new mail</a>. But I think it's time for an
update.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">maintenance </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
One question that I have received quite a few times was about the
<i>maintenance</i> of Wanderlust; it's may be a nice e-mail client, but little
seems to have happened in the last few years. It's reasonable concern.
</p>
<p>
Fortunately, it seems the situation has improved significantly. There's
more traffic on the mailing lists, both from old and new users. Various
improvements are circulating; the place to get the latest stuff is in David
Abrahams' git-repository: <a href=\"http://github.com/dabrahams/semi\">semi</a>, <a href=\"http://github.com/dabrahams/flim\">flim</a>, <a href=\"http://github.com/dabrahams/apel\">apel</a> and <a href=\"http://github.com/dabrahams/wanderlust\">wanderlust</a>. The plan is to
gradually apply the changes to the upstream (CVS) repository.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">bugs </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
Although I have been quite happy with Wanderlust, there was one <a href=\"http://debbugs.gnu.org/cgi/bugreport.cgi%3Fmsg=8;bug=5534\">bug #5534</a>
that has bitten me a few times, causing occasional <i>hangs</i> when saving
(draft) messages with non-ascii characters. It seemed finally to be a bug
in emacs itself, which is triggered by something in Wanderlust. A fix will
probably be available for the next emacs version; until then, you can work
around this by using an external MIME-encoder. To do this, add the
following to your WL initialization code (thanks to various helpful people
on the WL mailing list):
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> mel-b-ccl-module nil)
(<span class=\"org-keyword\">setq</span> mel-q-ccl-module nil)
(<span class=\"org-keyword\">setq</span> base64-external-encoder '(<span class=\"org-string\">\"mimencode\"</span>))
(<span class=\"org-keyword\">setq</span> base64-external-decoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-u\"</span>))
(<span class=\"org-keyword\">setq</span> base64-external-decoder-option-to-specify-file '(<span class=\"org-string\">\"-o\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-encoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-q\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-decoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-q\"</span> <span class=\"org-string\">\"-u\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-decoder-option-to-specify-file '(<span class=\"org-string\">\"-o\"</span>))
(<span class=\"org-keyword\">setq</span> base64-internal-decoding-limit 0)
(<span class=\"org-keyword\">setq</span> base64-internal-encoding-limit 0)
(<span class=\"org-keyword\">setq</span> quoted-printable-internal-decoding-limit 0)
(<span class=\"org-keyword\">setq</span> quoted-printable-internal-encoding-limit 0)

(<span class=\"org-keyword\">setq</span>-default mime-transfer-level 8)
(<span class=\"org-keyword\">setq</span> mime-header-accept-quoted-encoded-words t)
</pre>




<p>
This requires the <code>mimencode</code>-program, which is part of the
<code>metamail</code>-package. For the time being, this seems to be the best solution
when using Wanderlust with Emacs 23.
</p>
</div>

</div>

<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">one more trick: reformatting </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
Let's finish with one more trick. Sometimes, incoming mail is formatted
quite <i>badly</i>; in particular, the new lines are too long for comfortable
reading. From the WL-mailing list, here's a trick to deal with that:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">filladapt</span>)

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">from a WL mailing list post by Per b. Sederber
</span><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">Re-fill messages that arrive poorly formatted
</span>(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">wl-summary-refill-message</span> (all)
  (interactive <span class=\"org-string\">\"P\"</span>)
  (<span class=\"org-keyword\">if</span> (and wl-message-buffer (get-buffer-window wl-message-buffer))
      (<span class=\"org-keyword\">progn</span>
        (wl-summary-toggle-disp-msg 'on)
        (<span class=\"org-keyword\">save-excursion</span>
          (set-buffer wl-message-buffer)
          (goto-char (point-min))
          (re-search-forward <span class=\"org-string\">\"^$\"</span>)
          (<span class=\"org-keyword\">while</span> (or (looking-at <span class=\"org-string\">\"^\\\\[[1-9]\"</span>) (looking-at <span class=\"org-string\">\"^$\"</span>))
            (forward-line 1))
          (<span class=\"org-keyword\">let*</span> ((buffer-read-only nil)
                 (find (<span class=\"org-keyword\">lambda</span> (regexp)
                         (<span class=\"org-keyword\">save-excursion</span>
                           (<span class=\"org-keyword\">if</span> (re-search-forward regexp nil t)
                               (match-beginning 0)
                             (point-max)))))
                 (start (point))
                 (end (<span class=\"org-keyword\">if</span> all
                          (point-max)
                        (min (funcall find <span class=\"org-string\">\"^[</span><span class=\"org-string\"><span class=\"org-negation-char\">^</span></span><span class=\"org-string\">&gt;\\n]* wrote:[ \\n]+\"</span>)
                             (funcall find <span class=\"org-string\">\"^&gt;&gt;&gt;&gt;&gt;\"</span>)
                             (funcall find <span class=\"org-string\">\"^ *&gt;.*\\n *&gt;\"</span>)
                             (funcall find <span class=\"org-string\">\"^-----Original Message-----\"</span>)))))
            (<span class=\"org-keyword\">save-restriction</span>
              (narrow-to-region start end)
              (filladapt-mode 1)
              (fill-region (point-min) (point-max)))))
        (message <span class=\"org-string\">\"Message re-filled\"</span>))
    (message <span class=\"org-string\">\"No message to re-fill\"</span>)))

(define-key wl-summary-mode-map <span class=\"org-string\">\"\\M-q\"</span> 'wl-summary-refill-message)
</pre>




<p>
Now, you can refill your messages with <code>M-q</code> when in the Summary.
</p>
<p>
If you have any other nifty WL-tricks that could be useful for others, please
share them in the comments, thanks!
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-246570950774488454?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/246570950774488454/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=246570950774488454") (title . "15 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/246570950774488454"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/246570950774488454"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/02/i-have-been-using-wanderlust-e-mail.html") (title . "wanderlust iii"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "15")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6216475401649621541") (published nil "2010-02-19T07:53:00.003+02:00") (updated nil "2010-02-19T08:00:31.368+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "dealing with many buffers: ibuffer") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\"><div class=\"outline-text-2\" id=\"text-1\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s1600-h/Screenshot-emacs%40cthulhu.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s320/Screenshot-emacs%40cthulhu.png\" /></a></div><br />
If you are like me, you'll open a <i>lot</i> of buffers in <code>emacs</code>. There may be a couple of buffers with source code, a few for e-mail. <code>org-mode</code> will open buffers for all your agenda files. Then, maybe an info page, a few ERC-channels, a couple of special emacs buffers such as <code>**Messages**</code> and <code>**scratch**</code>. So, in a moderately busy emacs session there may 30-40 buffers open, and after a day or so there can be many more.<br />
<br />
With so many buffers, it can be hard to quickly find the one you are looking for - and clearly a one-tab-per-buffer (like Firefox uses) would not work very well either.<br />
<br />
So, what can we do instead? Here, on <code>emacs-fu</code>, we discussed this a couple of<br />
times already:<br />
<br />
<ul><li>using <a href=\"http://emacs-fu.blogspot.com/2009/02/switching-buffers.html\">ido-mode</a>, you can quickly switch to buffers by typing a subset of<br />
their name<br />
</li>
<li>using <a href=\"http://emacs-fu.blogspot.com/2009/07/stepping-through-your-window.html\">elscreen</a> to step through buffer configurations (this comes close to a<br />
workable tab-like solution)<br />
</li>
</ul><br />
These are really useful tools. What's still missing though, is a way to get an overview of all buffers. For that, <code>emacs</code> provide <code>buffer-menu</code>, normally bound to <code>C-x C-b</code>. It lists all your buffers, and you can interact with them in a way similar to <code>dired</code>, e.g. you can switch to a buffer by moving the point (cursor) to the buffer and pressing <code>Return</code>. Or you mark buffers for deletion by pressing <code>d</code> when point is on the buffer, and then press <code>x</code> to kill them all.<br />
<br />
Very useful. But if you really have a <i>lot</i> of buffers, just having a long list of them may still be a bit hard to deal with. For that, there is <code>ibuffer</code>, which allows you to put your buffers in different categories -- which can even overlap. Emacs ships <code>ibuffer</code> since version 22, so you'll probably already have it.<br />
<br />
Using a setup like the following, you can put your buffers in categories; each buffer is shown only once (apparently, the first match), and you can match on <code>mode</code> (the Emacs-mode of the buffer), <code>name</code> (the buffer name), <code>filename</code> (the full path to the file being visited, if any), and a couple of others (see <a href=\"http://www.emacswiki.org/emacs/IbufferMode\">EmacsWiki</a>).<br />
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">ibuffer</span>) 
(<span class=\"org-keyword\">setq</span> ibuffer-saved-filter-groups
  (quote ((<span class=\"org-string\">\"default\"</span>      
            (<span class=\"org-string\">\"Org\"</span> <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">all org-related buffers
</span>              (mode . org-mode))  
            (<span class=\"org-string\">\"Mail\"</span>
              (or  <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">mail-related buffers
</span>               (mode . message-mode)
               (mode . mail-mode)
               <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">etc.; all your mail related modes
</span>               ))
            (<span class=\"org-string\">\"MyProject1\"</span>
              (filename . <span class=\"org-string\">\"src/myproject1/\"</span>))
            (<span class=\"org-string\">\"MyProject2\"</span>
              (filename . <span class=\"org-string\">\"src/myproject2/\"</span>))
            (<span class=\"org-string\">\"Programming\"</span> <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">prog stuff not already in MyProjectX
</span>              (or
                (mode . c-mode)
                (mode . perl-mode)
                (mode . python-mode)
                (mode . emacs-lisp-mode)
                <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">etc
</span>                )) 
            (<span class=\"org-string\">\"ERC\"</span>   (mode . erc-mode))))))

(<span class=\"org-keyword\">add-hook</span> 'ibuffer-mode-hook
  (<span class=\"org-keyword\">lambda</span> ()
    (ibuffer-switch-to-saved-filter-groups <span class=\"org-string\">\"default\"</span>)))
</pre>If you like <code>ibuffer</code>, you can even override the <code>buffer-menu</code> key binding for<br />
it:<br />
<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-x C-b\"</span>) 'ibuffer)
</pre>As with <code>buffer-menu</code>, you can do various funky things with those buffers, and also filter them further; see the documentation. I am mostly using it for its buffer-navigational qualities, and it's good at that.</div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6216475401649621541?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6216475401649621541/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6216475401649621541") (title . "7 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6216475401649621541"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6216475401649621541"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/02/dealing-with-many-buffers-ibuffer.html") (title . "dealing with many buffers: ibuffer"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s72-c/Screenshot-emacs%40cthulhu.png") (height . "72") (width . "72"))) (thr:total nil "7")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-1562631001441862325") (published nil "2010-02-08T00:44:00.002+02:00") (updated nil "2010-02-08T15:16:31.494+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "interactive replacement") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\"><br />
<br />
<p>I recently found an interesting little package called <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3377\">iedit.el</a>, which allows<br />
you to interactive replacements on multiple strings at the same time. That is,<br />
as you do one replace, you can see how all the same matches being replaced as<br />
you type. It's hard to explain in words, you just have to try it out.<br />
</p><p>So, how to install this package?<br />
</p><ul><li>First, download the package (see the link above)</li>
<li>Put it in a directory where <code>emacs</code> can find it; for example,<br />
<code>~/.emacs.d/elisp</code>. If you haven't done so already, you can tell <code>emacs</code> to look in that directory by adding to your <code>.emacs</code>:<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> load-path (cons <span class=\"org-string\">\"~/emacs.d/elisp/\"</span> load-path))
</pre></li>
<li>Then, tell emacs to load this specific module; you can add<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">iedit</span>)
</pre>to your <code>.emacs</code> to load it  (alternatively, you could use the <a href=\"http://www.gnu.org/software/emacs/elisp/html_node/Autoload.html\">autoload facility)</a><br />
</li>
<li>then, define a key binding for this:<br />
<pre class=\"src src-emacs-lisp\">(define-key global-map (kbd <span class=\"org-string\">\"C-;\"</span>) 'iedit-mode)
</pre></li>
<li>Now, search for some strings that appears multiple times in your buffer, select it,<br />
press <code>C-;</code> (<code>Ctrl+;</code>), and watch how all other matching strings are<br />
changing at the same time.</li>
</ul><p>Very nice.<br />
</p></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1562631001441862325?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/1562631001441862325/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=1562631001441862325") (title . "10 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1562631001441862325"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1562631001441862325"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/02/interactive-replacement.html") (title . "interactive replacement"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "10")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-923434516280360941") (published nil "2010-01-21T21:37:00.003+02:00") (updated nil "2010-01-22T00:18:59.110+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "duplicating lines and commenting them") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\"><p>Someone on the <i>Emacs Help</i> mailing list asked for an easy way to duplicate a line<br />
and, optionally, comment-out the first one.<br />
</p><p>Let's first look at simple duplication of a line. This is a common operation,<br />
and <code>vi</code>-users might use something like <code>Yp</code> for that. In emacs, one way to do<br />
this is by typing <code>C-a C-k C-k C-y C-y</code>, which is actually not as bizarre as<br />
it looks if you try it. When using <i>slick copy</i>, as explained <a href=\"http://emacs-fu.blogspot.com/2009/11/copying-lines-without-selecting-them.html\">in another post</a>,<br />
it's as easy as <code>M-w C-n C-y</code>; and of course it's easy to define a shorter key<br />
binding.<br />
<br />
</p><pre class=\"src src-text\">repeat after me
repeat after me
</pre><p>However, neither of these methods works correctly when you're on the last line<br />
of the buffer (by default at least). Also, it puts the point (cursor) <i>below</i><br />
the duplicated line, while I'd like to put it at the start of it. It seems we<br />
need something a little smarter.<br />
</p><p>While we're at it, let's also consider the second question: commenting-out the<br />
first line of the duplicates. This is a quite common thing to do when writing<br />
programs or configuration files; you want to try the effect of a small<br />
variation of a line, but want to keep the original so it can be restored when<br />
the variation turns out not to be as good as expected.<br />
<br />
</p><pre class=\"src src-c\"><span class=\"org-comment-delimiter\">/* </span><span class=\"org-comment\">for (;;) fork (); </span><span class=\"org-comment-delimiter\">*/</span>
<span class=\"org-keyword\">for</span> (;;) fork ();
</pre><p>I hacked up something quickly to solve both questions, and it has evolved a<br />
little bit since &ndash; to answer both of the questions. The bit of weirdness in<br />
the end is because of the special case of the last line in a buffer. It<br />
defines key bindings <code>C-c y</code> for duplicating a line, and <code>C-c c</code> for<br />
duplicating + commenting &ndash; but of course you can change those.<br />
<br />
</p><pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">djcb-duplicate-line</span> (<span class=\"org-type\">&amp;optional</span> commentfirst)
  <span class=\"org-doc\">\"comment line at point; if COMMENTFIRST is non-nil, comment the original\"</span> 
  (interactive)
  (beginning-of-line)
  (push-mark)
  (end-of-line)
  (<span class=\"org-keyword\">let</span> ((str (buffer-substring (region-beginning) (region-end))))
    (<span class=\"org-keyword\">when</span> commentfirst
    (comment-region (region-beginning) (region-end)))
    (insert-string
      (concat (<span class=\"org-keyword\">if</span> (= 0 (forward-line 1)) <span class=\"org-string\">\"\"</span> <span class=\"org-string\">\"\\n\"</span>) str <span class=\"org-string\">\"\\n\"</span>))
    (forward-line -1)))

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">or choose some better bindings....
</span>
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">duplicate a line
</span>(global-set-key (kbd <span class=\"org-string\">\"C-c y\"</span>) 'djcb-duplicate-line)

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">duplicate a line and comment the first
</span>(global-set-key (kbd <span class=\"org-string\">\"C-c c\"</span>) (<span class=\"org-keyword\">lambda</span>()(interactive)(djcb-duplicate-line t)))
</pre></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-923434516280360941?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/923434516280360941/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=923434516280360941") (title . "7 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/923434516280360941"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/923434516280360941"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/01/duplicating-lines-and-commenting-them.html") (title . "duplicating lines and commenting them"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "7")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5147188348017517901") (published nil "2010-01-16T18:54:00.003+02:00") (updated nil "2010-01-21T21:54:21.055+02:00") (title ((type . "text")) "rectangles and cua") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\">  <p>CUA-mode is a minor-mode that enables the use of <code>Ctrl-X/C/V</code> for cut/copy/paste, as is customary in many computer programs. Of course, it's a bit different in emacs, as it predates CUA and all of those programs. With esp. <code>Ctrl-X</code> (<code>C-x</code>) being in heavy use as a prefix-key already, it's unlikely to change. </p><p>CUA-mode has a clever trick to solve that problem &ndash; <code>C-x</code> for <i>cut</i> only works when a selection is active, and when no other key is pressed shortly. Otherwise, <code>C-x</code> behaves as usual. This works quite nicely, but personally, I don't use it, as I already have the Emacs key bindings in my muscle memory. Still, it can be useful for people migrating from other CUA-based editors. See e.g. <a href=\"http://www.emacswiki.org/emacs/CuaMode\">CuaMode</a> for more information. </p><p> However, apart from the <code>C-x</code>-trick, CUA also has some nice functionality for <i>rectangular selections</i>. These are sometimes quite useful, and during emacs-fu's prehistory there was already an <a href=\"http://emacs-fu.blogspot.com/2008/12/working-with-rectangular-selections.html\">article about it</a>. The method there works, but with CUA, it is much easier. </p><p>So, let's turn it on; put the following in your <code>.emacs</code>: </p><pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> cua-enable-cua-keys nil) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">only for rectangles
</span>(cua-mode t)
</pre><p>Now, just put your cursor anywhere, and press <code>C-RET</code> (Ctrl + Enter). You have now started a rectangular selection! There rest is pretty straightforward, you can cut, copy and paste with the normal Emacs key bindings.. </p><p>I could go into more detail, but the best way is to see it in action in this wonderful <a href=\"http://www.vimeo.com/1168225?pg=embed&amp;sec=1168225\">screen cast</a> by Mark Mansour. I especially like the way you can add numbered lists. </p></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5147188348017517901?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5147188348017517901/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5147188348017517901") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5147188348017517901"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5147188348017517901"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html") (title . "rectangles and cua"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "5")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-1826706243483115857") (published nil "2009-12-30T17:09:00.002+02:00") (updated nil "2009-12-31T15:21:02.241+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "automatically checking your spelling") (content ((type . "html")) "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s1600-h/flyspell.png\"><img style=\"float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 400px; height: 194px;\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s400/flyspell.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5421046926127336450\" /></a>
<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
When I'm typing fast, it's easy to make spelling mistakes (as you may have
noticed reading <a href=\"http://emacs-fu.blogspot.com\">Emacs-Fu</a>). It's not so much that I don't <i>know</i> how to write
things, but sometimes there seems to be a bit of a disconnect between brain
and fingers.
</p>
<p>
One tool that helps me to make fewer mistakes is <i>automatic spelling checking</i>, and in particular <i>on-the-fly</i> spelling checking. Spell-checking in
emacs is taken care of by the <code>ispell</code>-package.  Traditionally, this was a way
to interface emacs with the <code>ispell</code>-program on Unix, but nowadays it's often
used with other programs, such as <code>aspell</code>.
</p>
<p>
<a href=\"http://aspell.net/\">aspell</a> is GNU's intended replacement for <code>ispell</code>, and has been for a long
time. In the meantime, other spelling checkers have come up; in the Free
Software world, the most prominent one is probably <a href=\"http://hunspell.sourceforge.net/\">hunspell</a>, which is used by
e.g. Mozilla and OpenOffice. As I said, Emacs supports all of those; I'm using
<code>aspell</code>, which works well for me. To use <code>aspell</code> for spelling-checking, I
have the following in my <code>.emacs</code>:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> ispell-program-name <span class=\"org-string\">\"aspell\"</span>
  ispell-extra-args '(<span class=\"org-string\">\"--sug-mode=ultra\"</span>))
</pre>


<p>
Please consult the <code>aspell</code> documentation for the details.
</p>
<p>
You can spell-check your text with <code>ispell-buffer</code> and friends, which are also
available through the menu (<code>Tools/Spell Checking/...</code>). This works fine, but
it makes spelling checking a separate step you have to go through and you may
forget. So, I like to do the spelling-checking <i>on-the-fly</i>, that is, while I
am typing. This can be done using <code>flyspell-mode</code> (you can also use
<code>flyspell-prog-mode</code>, to do spell checking inside comments in computer
programs, but I find that a bit over the top).
</p>
<p>
When <code>flyspell-mode</code> is enabled, it will mark
<font color=\"red\"><u>misspelt</u></font>
eh misspelled words by painting them in a different color while you are typing --
the common way many word processing programs do it. A common way to enable
<code>flyspell-mode</code> is to put it the the <code>mode-hook</code> for the modes where you want
to use it. For example, to enable <code>flyspell-mode</code> for all your <code>org-mode</code>
buffers, you can add something like the following to your <code>.emacs</code>:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">add-hook</span> 'org-mode-hook
  (<span class=\"org-keyword\">lambda</span>()
    (flyspell-mode 1)))
</pre>


<p>
Note, you can use the middle mouse button to get alternatives for a misspelled
word.
</p>

<p>
By default, it uses the English dictionary, but it's easy to switch to another
using <code>M-x ispell-change-dictionary</code>. To make it easier, I have defined the
<code>C-c N</code> key binding to activate Dutch-language (\"nederlands\") spelling
checking, and update the buffer.
</p>


<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-c N\"</span>) 
  (<span class=\"org-keyword\">lambda</span>()(interactive)
    (ispell-change-dictionary <span class=\"org-string\">\"nederlands\"</span>)
    (flyspell-buffer))) 
</pre>



<p>
Now, there's another category of mistakes &ndash; <i>their-they're-there</i>, <i>its-it's</i>
or <i>to-too-two</i> that require a spelling checker that's a bit smarter. There
are some free implementations in OpenOffice and Abiword; it'd be interesting
to see if those could be integrated with emacs as well.
</p>
<p>
Now, laugh about the sweet irony of the spelling errors that I failed to
notice :)
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1826706243483115857?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/1826706243483115857/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=1826706243483115857") (title . "8 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1826706243483115857"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1826706243483115857"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2009/12/automatically-checking-your-spelling.html") (title . "automatically checking your spelling"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s72-c/flyspell.png") (height . "72") (width . "72"))) (thr:total nil "8")) (entry nil (id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2113402687085325239") (published nil "2009-12-13T15:46:00.002+02:00") (updated nil "2009-12-13T18:46:27.698+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "scrolling") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
Scrolling It's an integral part of just about any graphical user interface,
including emacs. However, I always found that the default way scrolling works
in emacs left something to be desired. It puts the scroll bar on the left (!),
and when scrolling around, it does not scroll smoothly, but instead it seem to
do so in bursts. But, this being emacs, we can change it!
</p>
<p>

First, the position of the scroll bar. Presumably for historical reasons,
emacs puts the scroll bar on the <i>left</i> of the window, unlike most other
programs. We can easily change that, by putting the following in <code>.emacs</code>
(or <code>~/.emacs.d/init.el</code>):
</p>


<pre class=\"src src-emacs-lisp\">(set-scroll-bar-mode 'right)
</pre>



<p>
Instead of <code>right</code>, you can also use <code>left</code>, or <code>nil</code> to hide the scroll bar
completely. You can also do this through the menu (Options / Show/Hide /
Scroll bar). Note that on X, when the cursor (point) reaches the end of the
document, the slider on the scroll bar may not be at the bottom; I understand
this is because of some disagreement between Emacs and the toolkit (GTK+ in
this case).
</p>
<p>
Now, what about the other issue, the non-smoothness when scrolling with the
cursor-keys or with <code>C-n</code>, <code>C-p</code>? Below are my settings for making scrolling a
bit smoother, and the explanation. Of course, these are just my personal
preferences.
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span>
  scroll-margin 0                  
  scroll-conservatively 100000
  scroll-preserve-screen-position 1)
</pre>




<ul>
<li>
The <code>scroll-margin</code>. This determines when scrolling should start; by
setting it to 0, emacs will start to scroll whenever you are entering the
top or bottom line of the window. You can also this to, say, 5 to let
scrolling start whenever you're getting closer than 5 lines from top or bottom

</li>
<li>
Then, <code>scroll-conservatively</code> determines how far the cursor is allowed to
be distanced from the center of the screen when scrolling start. The
default sets this to 0, which means that whenever you start scrolling, the
cursor jumps to the center of the screen. I find that quite annoying, so I
set it to some big number (the 'effective maximum' for that is
lines-in-window / 2, but you can put any bigger number there to avoid the
jumpiness)
</li>
<li>
<code>scroll-preserve-screen-position</code> tries to maintain the current screen
position when you scroll using Page-Up/Page-Down. I like that.

</li>
</ul>

<p>There are also the variables <code>scroll-up-aggressively</code> and

<code>scroll-down-aggressively</code>. Normally, they determine how far emacs will scroll
(up and down, respectively) when it does so. However, they don't make any
difference with a big <code>scroll-conservatively</code> like I am using. Still, if you
want to play with it, their values are fractions between 0.0 and 1.0
(inclusive); a value of 1 means that it will move a full screen when scrolling
starts, a value of 0.0 causes a move of only one single line.
</p>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2113402687085325239?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2113402687085325239/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2113402687085325239") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2113402687085325239"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2113402687085325239"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2009/12/scrolling.html") (title . "scrolling"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "14")))) ("auto-complete-mode" "<p>Recently, we <a href=\"http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html\">discussed CEDET</a> in the interview with Eric Ludlam. CEDET has a deep
understanding of the source code, and assists the development process by
exploiting that knowledge. For example by drawing class diagrams (<a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a>) or
providing auto-completion for function names and parameters.
</p>
<p>
Currently, however, CEDET is also be a bit hard to set up effectively, and may
also not support your programming language yet. Therefore, it's still useful to
look at some other packages that can substitute (part of) the functionality.
</p>
<p>
For me, <a href=\"http://cx4a.org/software/auto-complete/\">auto-complete-mode</a> has been very useful for that. It's not as fancy as
CEDET in the sense that it does not really <i>understand</i> the code &ndash; but in
practice I found it to work quite well for both C/C++, Elisp and shell scripts.
It can even display the docstrings of functions. And when editing shell-scripts,
it can complete path names as you are editing the scripts; very nice.
</p>
<p>
To install, follow the <a href=\"http://cx4a.org/software/auto-complete/manual.html#Installation\">instructions</a>. Then, in your <code>.emacs</code>, have something
like:
</p>
<pre class=\"src src-elisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">auto-complete-config</span> nil 'noerror) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't break if not installed </span>
(add-to-list 'ac-dictionary-directories <span class=\"org-string\">\"~/.emacs.d/ac-dict\"</span>)
(<span class=\"org-keyword\">setq</span> ac-comphist-file  <span class=\"org-string\">\"~/.emacs.d/ac-comphist.dat\"</span>)
(ac-config-default))
</pre>
<p>
After that, <code>M-x auto-complete-mode</code> to start using it. Alternatively, there's a
<a href=\"http://www.youtube.com/watch?v=rGVVnDxwJYE\">YouTube-video</a> explaining how to install and use <code>auto-complete-mode</code>;
recommended. In any case, it is <a href=\"http://cx4a.org/software/auto-complete/manual.html\">fully documented</a>.
</p>
<p>
<code>auto-complete-mode</code> uses a configurable set of <i>sources</i> from which it takes it
knowledge about what can be completed. For example, when writing in <code>org-mode</code>,
it takes its input from
</p>
<pre class=\"src src-elisp\">(ac-source-filename ac-source-abbrev ac-source-dictionary
ac-source-words-in-same-mode-buffers)
</pre>
<p>
while in a <code>c-mode</code> buffer it is (in my case):
</p>
<pre class=\"src src-elisp\">(ac-source-filename ac-source-yasnippet ac-source-gtags ac-source-abbrev
ac-source-dictionary ac-source-words-in-same-mode-buffers)
</pre>
<p>
You can customize this, and (for the more ambitious), it's possible to add your
own sources as well.
</p><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-3394448227791083888?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/3394448227791083888/comments/default" (19652 19403) old 1 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-3394448227791083888") (published nil "2010-10-23T15:59:00.006+03:00") (updated nil "2010-10-24T18:07:55.982+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "auto-complete-mode") (content ((type . "html")) "<p>Recently, we <a href=\"http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html\">discussed CEDET</a> in the interview with Eric Ludlam. CEDET has a deep
understanding of the source code, and assists the development process by
exploiting that knowledge. For example by drawing class diagrams (<a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a>) or
providing auto-completion for function names and parameters.
</p>
<p>
Currently, however, CEDET is also be a bit hard to set up effectively, and may
also not support your programming language yet. Therefore, it's still useful to
look at some other packages that can substitute (part of) the functionality.
</p>
<p>
For me, <a href=\"http://cx4a.org/software/auto-complete/\">auto-complete-mode</a> has been very useful for that. It's not as fancy as
CEDET in the sense that it does not really <i>understand</i> the code &ndash; but in
practice I found it to work quite well for both C/C++, Elisp and shell scripts.
It can even display the docstrings of functions. And when editing shell-scripts,
it can complete path names as you are editing the scripts; very nice.
</p>
<p>
To install, follow the <a href=\"http://cx4a.org/software/auto-complete/manual.html#Installation\">instructions</a>. Then, in your <code>.emacs</code>, have something
like:
</p>


<pre class=\"src src-elisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">auto-complete-config</span> nil 'noerror) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't break if not installed </span>
(add-to-list 'ac-dictionary-directories <span class=\"org-string\">\"~/.emacs.d/ac-dict\"</span>)
  (<span class=\"org-keyword\">setq</span> ac-comphist-file  <span class=\"org-string\">\"~/.emacs.d/ac-comphist.dat\"</span>)
  (ac-config-default))
</pre>



<p>
After that, <code>M-x auto-complete-mode</code> to start using it. Alternatively, there's a
<a href=\"http://www.youtube.com/watch?v=rGVVnDxwJYE\">YouTube-video</a> explaining how to install and use <code>auto-complete-mode</code>;
recommended. In any case, it is <a href=\"http://cx4a.org/software/auto-complete/manual.html\">fully documented</a>.
</p>
<p>
<code>auto-complete-mode</code> uses a configurable set of <i>sources</i> from which it takes it
knowledge about what can be completed. For example, when writing in <code>org-mode</code>,
it takes its input from
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-abbrev ac-source-dictionary
 ac-source-words-in-same-mode-buffers)
</pre>


<p>
while in a <code>c-mode</code> buffer it is (in my case):
</p>


<pre class=\"src src-elisp\">(ac-source-filename ac-source-yasnippet ac-source-gtags ac-source-abbrev
ac-source-dictionary ac-source-words-in-same-mode-buffers)
</pre>


<p>
You can customize this, and (for the more ambitious), it's possible to add your
own sources as well.
</p><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-3394448227791083888?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/3394448227791083888/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=3394448227791083888") (title . "6 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3394448227791083888"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3394448227791083888"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/10/auto-complete-mode.html") (title . "auto-complete-mode"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "6"))) ("interview with Eric Ludlam (CEDET)" "<div id=\"outline-container-1\" class=\"outline-2\">
<img src=\"http://cedet.sourceforge.net/img-gen/cedet-logo-left.png\" align=\"right\" width=\"400\"/>
<div class=\"outline-text-2\" id=\"text-1\">
<p>
One of the notable new features of <a href=\"http://emacs-fu.blogspot.com/2010/05/emacs-232.html\">emacs 23.2</a> was the inclusion of <a href=\"http://cedet.sourceforge.net/\">CEDET</a>. CEDET adds IDE-type functionality to emacs, and one only needs to read
the responses to the <a href=\"http://emacs-fu.blogspot.com/2010/05/100th-post.html\">100th post</a> to see the great interest in that.
</p>
<p>
The man behind CEDET is Eric Ludlam (<b>EML</b>), a long-time Emacs user and
developer. He kindly answered the many questions we had for him. Thanks, Eric!
</p>
<strong>djcb: Eric, could you tell us a little bit about yourself? And about
that fantastic hobby of yours, building <a
href=\"http://en.wikipedia.org/wiki/Siege_engine\">siege engines</a>?</strong>
<p>
<b>EML</b>: I manage a software engineering team at the <a href=\"http://www.mathworks.com\">MathWorks</a>.  The MathWorks
are the creators of Matlab.  In my spare time I maintain CEDET, the Matlab
support for Emacs, and build replicas of ancient siege engines.
</p>
<p>
I've been building catapults of various types for use at the <a href=\"http://www.worldchampionshippunkinchunkin.com/\">World Championship Punkin' Chunk</a> since 1998. My team started with a traction
trebuchet, then a HCW Trebuchet, then moved to Human Powered Centripetal, and
finally to the torsion division with <a href=\"http://www.siege-engine.com/MistaBallista.shtml\">MistaBallista</a>. As far as I know, Mista
Ballista is the worlds largest farthest throwing currently functional
ballista.
</p>
<p>
Most recently, I got to <a href=\"http://www.siege-engine.com/MathWorksDemo2010.shtml\">help demolish a building where I work</a> by shooting
stuff at it, which was a lot of fun.
</p>
<strong>djcb: How did you get involved with Emacs? Do you spend a lot of time
with it?</strong>
<p>
EML: I've been hacking Emacs since version 18.54 on <a href=\"http://en.wikipedia.org/wiki/Ultrix\">Ultrix</a> because the alternative
was <code>vi</code>.  My first post (and thus contribution to Emacs) was to
<code>gnu.emacs.sources</code> on June 6, 1992.  I've used Emacs to work on C/C++ code for
many years which inspired all the various parts of CEDET, but these days I
don't get much coding time.
</p>
<p>
My work with Emacs and CEDET is seasonal currently.  The summers are usually
busy with family activities, and my falls are busy getting the catapult
ready, so CEDET work usually happens in the winter.
</p>
<strong>djcb: Can you tell us a bit about the background of CEDET?</strong>
<p>
<b>EML</b>: I started with some really basic editors and eventually with <a href=\"http://en.wikipedia.org/wiki/Language-Sensitive_Editor\">LSE</a> (Language
Sensitive Editor) on VMS.  LSE was pretty cool.  When I switched OSes to
Ultrix and was forced to use Emacs, and discovered you could script it, I was
hooked.  My first big Emacs hack was etalk, an implementation of Unix talk in
Emacs.
</p>
<p>
In one of the Emacs related newsgroups, a spoof story floated around about how
Emacs became sentient, and started writing code for Richard [Stallman] instead
of the other way around.  Since then I've always wanted to get Emacs to start
writing my code for me.  I wrote <code>cparse.el</code>, a regexp nightmare that could
parse almost any C file into a sequence of highly detailed tags.  The tags
could be used to then generate code, and I had a cool comment writing utility,
automatic prototype generation, and some navigation features.  On the whole it
failed for many reasons.
</p>
<p>
The concept, however, continued.  CParse became the basic idea behind what is
now the Semantic package in CEDET, though none of the old stuff remains beyond
some echos in some <a href=\"http://cedet.sourceforge.net/srecode.shtml\">SRecode</a> utilities.
</p>
<p>
My end goal is to provide round-trip code management in Emacs.  Emacs needs to
be able to read your code, allow you to perform transformations in the code in
an abstract way, and then write new code for you.  Everything in CEDET is
building toward that goal.  It is taking a long time, and you can see it
starting to take shape.  Semantic can parse the code, <a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a> can manipulate UML
diagrams representing your code, and you can export diagrams into code through
SRecode.  Unfortunately this isn't a round-trip solution as the generated code
currently should not replace existing hand-written code.
</p>
<strong>Can you tell us a bit about the CEDET-project?</strong>
<p>
<b>EML</b>: I maintain CEDET and field questions on the <a href=\"http://sourceforge.net/mail/?group_id=17886\">mailing list</a>.  There are
several contributors who either own some tool in the \"contrib\" area, fix bugs,
answer questions or apply patches for new features.  There has always been
someone to pick up the slack when I'm busy elsewhere, and I've greatly
appreciated that.
</p>
<p>
The easiest (and most common) way to contribute code to CEDET is to provide
support for some new language, or to create a language agnostic tool using the
CEDET APIs.  As with Emacs, you need to be able to assign copyright to the FSF
to contribute to CEDET's core, but new language support or utilities can have
a home in the contrib area as well.
</p>
<strong>djcb: CEDET is part of Emacs since 23.2. Can you tell us a bit about how that
happened?</strong>
<p>
<b>EML</b>: I've been providing assignments for the parts of CEDET since 1996 or so.
For Emacs 23.1, CEDET was at a stable and useful enough state that Chong
Yidong was willing to do the work to integrate it into Emacs.  My ability to
get a legal release for CEDET in time for Emacs 23.1 failed, so it went into
23.2 instead.  It is my understanding that CEDET's smart completion engine
reached a performance and reliability point that made it desirable to have in
Emacs.
</p>
<p>
Emacs currently includes the parts of CEDET needed to make EDE, the project
management system, Semantic and it's user tools, and SRecode all work from a
user perspective.  Emacs lacks the Semantic development environment, needed
for writing new language support, and COGRE, the UML diagram editing tool.
</p>
<strong>djcb: Are there plans to include those parts as well?</strong>
<p>
Yes.  It is important for users with a stock Emacs to develop new languages
using the missing Semantic development tools.  I don't know if COGRE will ever
go in, though I expect that this will be done via the new package management
system [elpa].
</p>
<strong>djcb: Did you ever try IDEs such as <a
href=\"http://en.wikipedia.org/wiki/Eclipse_(software)\">Eclipse</a>? How do you
think CEDET stacks up against such programs?</strong>
<p>
<b>EML</b>: I have used <a href=\"http://en.wikipedia.org/wiki/Visual_studio\">Visual Studio</a> more than Eclipse, and certainly watched demos
on how these and other tools work.
</p>
<p>
These tools win over CEDET's features in that they usually integrate directly
with the compiler, VM or whatever, and have very good completion engines and
UIs that you can interact with.
</p>
<p>
CEDET wins in that you don't need a compiler, or even code that can compile
for it to work and start providing useful completions.  It can infer an awful
lot from a project.
</p>
<p>
CEDET's language support structure is thus simple in comparison, and CEDET
supports many more languages as a side effect.  It also wins because it is in
Emacs, and I've done my best to try and match the \"Emacs Way\".  For an Emacs
user, this is intuitive, but can appear quirky to outsiders.
</p>
<strong>djcb: What about other development tools for in emacs?</strong>
<p>
<b>EML</b>: There are a lot of language specific solutions like <a href=\"http://cx4a.org/software/gccsense/\">GCCSense</a>, <a href=\"http://common-lisp.net/project/slime/\">slime</a>, <a href=\"http://jdee.sourceforge.net/\">JDEE</a>, and
others out there.  These projects are great in that they take a language, and
push it to the edge of what you can do, and the users generally love that
stuff.  When someone wants to do the same thing, like when <a href=\"http://csde.sourceforge.net/\">CSDE</a> started for
C#, and it tried to copy JDEE, it was just that, a copy that didn't quite make
it.
</p>
<p>
It is my hope that CEDET will become the target of choice for users who want
to make their language support in Emacs the best.  They will save a lot of
time doing so as well.  The same infrastructure for integrating in external
tools can be used to get improved results out of CEDET, but CEDET will handle
converting that into a representation that would then allow any tool built on
CEDET to work.  This is the same model that worked well for <code>comint.el</code>, and
<code>gud.el</code>.
</p>
<p>
<a href=\"http://code.google.com/p/yasnippet/\">Yasnippet</a> is a bit different in the way it \"competes\" with SRecode.  My first
implementation of SRecode tried recycling tempo templates, but I couldn't get
it to work.  In fact all the template systems I investigated fell short of
what I was trying to do, so I had to roll my own, and ended up using a variant
of the Google template format.
</p>
<p>
The key difference is that the goal was for SRecode to provide a series of
base templates for code generation.  A tool writer would then write some tool
to generate code.  A user would then use the tool, and say \"This is great, how
do I change where the <code>{</code> goes?\"
</p>
<p>
The answer is to override the template with that detail in it without
interfering with the system templates.  That only works if the templates are
sufficiently granular that the changed template can be simple.  Template reuse
needs to be high so that if your company formats your methods as:
</p>
<pre class=\"src src-c\"><span class=\"org-type\">int</span> <span class=\"org-function-name\">mymethod</span>() { implementme() };
</pre>
<p>
instead of
</p>
<pre class=\"src src-c\"><span class=\"org-type\">int</span> <span class=\"org-function-name\">mymethod</span>() {
}
</pre>
<p>
that one template change will allow this to happen for all code generated from
every tool.
</p>
<p>
Thus, the audience for yasnippet and SRecode is quite different.  Of course
you could do yasnippet like things with SRecode if someone took the time to
improve the field-editing feature in SRecode, but that has not been my focus.
</p>
<strong>djcb: Do you follow the overall Emacs development process? Are there
things you would like to see changed/improved?</strong>
<p>
<b>EML</b>: I watch the <code>emacs-devel</code> mailing list, mainly to see if anything
related to CEDET goes by that I can help with, or what the latest cool
feature might be. My first contribution of <a href=\"http://cedet.sourceforge.net/speedbar.shtml\">Speedbar</a> to Emacs in Emacs 20
helped drive some features related to overlines, boxes, and other face
attributes that appeared in Emacs 21.
</p>
<p>
In the future, once CEDET and Emacs cross merge techniques are hashed out, I
would expect some key parts that need performance improvements might move into
C.  Another part of CEDET that I'd love to see become bound closer to Emacs is
<code>mode-local.el</code>.  It tries to simulate mode-local variables and mode-local
functions.  This is critical in a complex system like CEDET that needs to
provide a language support author with fine grained control.  There are good
reasons not to make what is currently implemented \"the Emacs way\", but it
would be nice to resolve those and enable mode authors a with a more powerful
way to customize the user experience.
</p>
<strong>djcb: Do you have specific plans for CEDET in the future?</strong>
<p>
<b>EML</b>: Here is the short list:
</p>
<ul>
<li>
Improve Emacs/CEDET cross merging
</li>
<li>
Offload tag storage to an external process - needed for scalability
</li>
<li>
Design/define a \"CEDET mode\" as a way of simplifying the confusing array of
distinct tools and modes that make up CEDET now.
</li>
<li>
Finish the smart-context menu project
</li>
<li>
Resolve the \"code replacement\" problem of parsing a block of code,
transforming it, and re-creating that code in place reliably.
</li>
</ul>
<strong>djcb: In addition to all these 'generic' improvements, are there
specific areas where new contributors could make a difference?</strong>
<p>
<b>EML</b>: Supporting new \"stuff\" in CEDET is one big win.  Stuff can be:
</p>
<ul>
<li>
New project types under EDE to ease transition from something like Visual
Studio to Emacs.
</li>
<li>
Language support, such as parsers, or mode overrides.  Finding ways to take
existing cool tools, like JDE's beanshell, or slime's inferior lisp process
and allowing it to do work for CEDET is another big win.
</li>
<li>
Templates for code generation in new languages.
</li>
</ul>
<p>Tool writing would also be good.  JDEE's author Paul Kinnucan converted many
bits of JDEE to CEDET and co-designed many of CEDET's parts along the way,
such as semanticdb, and that was a huge help.  ECB's current maintainer Klaus
has also had a big impact on the way concepts are abstracted to a tool that
depends on CEDET.
</p>
<p>
Naturally, joining the mailing list and fixing reported bugs and improving
the doc is also a huge help, but not as exciting as writing new code. :)
</p>
<strong>djcb: Finally, many people want to start using CEDET, but it seems they
have a bit of trouble to get started. Do you have any recommendations for
them?</strong>
<p>
<b>EML</b>: Start with the <code>cedet.info</code> file which has many of the common setup
configurations in it.  If you run into something not explained well or at
all, be sure to join the mailing list and be specific about how that doc
failed.  Very few questions on the mailing list refer to the doc, so the doc
is rarely improved in a way that can help others.
</p>
<p>
Another good starting point is Alex Ott's article <a href=\"http://xtalk.msk.su/~ott/en/writings/emacs-devenv/EmacsCedet.html\">A Gentle Introduction to CEDET</a>, which is very helpful.
</p>
<strong>Thanks a lot for your time, Eric! Wishing you a lot of success with
CEDET and all your other projects!</strong>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-8830503538191507740?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/8830503538191507740/comments/default" (19616 8370) new 2 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-8830503538191507740") (published nil "2010-09-27T07:42:00.000+03:00") (updated nil "2010-09-27T07:42:26.149+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "interview"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "programming"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "emacs23"))) (title ((type . "text")) "interview with Eric Ludlam (CEDET)") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<img src=\"http://cedet.sourceforge.net/img-gen/cedet-logo-left.png\" align=\"right\" width=\"400\"/>
<div class=\"outline-text-2\" id=\"text-1\">

<p>
One of the notable new features of <a href=\"http://emacs-fu.blogspot.com/2010/05/emacs-232.html\">emacs 23.2</a> was the inclusion of <a href=\"http://cedet.sourceforge.net/\">CEDET</a>. CEDET adds IDE-type functionality to emacs, and one only needs to read
the responses to the <a href=\"http://emacs-fu.blogspot.com/2010/05/100th-post.html\">100th post</a> to see the great interest in that.
</p>
<p>
The man behind CEDET is Eric Ludlam (<b>EML</b>), a long-time Emacs user and
developer. He kindly answered the many questions we had for him. Thanks, Eric!
</p>


<strong>djcb: Eric, could you tell us a little bit about yourself? And about
that fantastic hobby of yours, building <a
href=\"http://en.wikipedia.org/wiki/Siege_engine\">siege engines</a>?</strong>

<p>
<b>EML</b>: I manage a software engineering team at the <a href=\"http://www.mathworks.com\">MathWorks</a>.  The MathWorks
are the creators of Matlab.  In my spare time I maintain CEDET, the Matlab
support for Emacs, and build replicas of ancient siege engines.
</p>
<p>
I've been building catapults of various types for use at the <a href=\"http://www.worldchampionshippunkinchunkin.com/\">World Championship Punkin' Chunk</a> since 1998. My team started with a traction
trebuchet, then a HCW Trebuchet, then moved to Human Powered Centripetal, and
finally to the torsion division with <a href=\"http://www.siege-engine.com/MistaBallista.shtml\">MistaBallista</a>. As far as I know, Mista
Ballista is the worlds largest farthest throwing currently functional
ballista.
</p>
<p>
Most recently, I got to <a href=\"http://www.siege-engine.com/MathWorksDemo2010.shtml\">help demolish a building where I work</a> by shooting
stuff at it, which was a lot of fun.
</p>


<strong>djcb: How did you get involved with Emacs? Do you spend a lot of time
with it?</strong>

<p>
EML: I've been hacking Emacs since version 18.54 on <a href=\"http://en.wikipedia.org/wiki/Ultrix\">Ultrix</a> because the alternative
was <code>vi</code>.  My first post (and thus contribution to Emacs) was to
<code>gnu.emacs.sources</code> on June 6, 1992.  I've used Emacs to work on C/C++ code for
many years which inspired all the various parts of CEDET, but these days I
don't get much coding time.
</p>
<p>
My work with Emacs and CEDET is seasonal currently.  The summers are usually
busy with family activities, and my falls are busy getting the catapult
ready, so CEDET work usually happens in the winter.
</p>


  <strong>djcb: Can you tell us a bit about the background of CEDET?</strong>

<p>
<b>EML</b>: I started with some really basic editors and eventually with <a href=\"http://en.wikipedia.org/wiki/Language-Sensitive_Editor\">LSE</a> (Language
Sensitive Editor) on VMS.  LSE was pretty cool.  When I switched OSes to
Ultrix and was forced to use Emacs, and discovered you could script it, I was
hooked.  My first big Emacs hack was etalk, an implementation of Unix talk in
Emacs.
</p>
<p>
In one of the Emacs related newsgroups, a spoof story floated around about how
Emacs became sentient, and started writing code for Richard [Stallman] instead
of the other way around.  Since then I've always wanted to get Emacs to start
writing my code for me.  I wrote <code>cparse.el</code>, a regexp nightmare that could
parse almost any C file into a sequence of highly detailed tags.  The tags
could be used to then generate code, and I had a cool comment writing utility,
automatic prototype generation, and some navigation features.  On the whole it
failed for many reasons.
</p>
<p>
The concept, however, continued.  CParse became the basic idea behind what is
now the Semantic package in CEDET, though none of the old stuff remains beyond
some echos in some <a href=\"http://cedet.sourceforge.net/srecode.shtml\">SRecode</a> utilities.
</p>
<p>
My end goal is to provide round-trip code management in Emacs.  Emacs needs to
be able to read your code, allow you to perform transformations in the code in
an abstract way, and then write new code for you.  Everything in CEDET is
building toward that goal.  It is taking a long time, and you can see it
starting to take shape.  Semantic can parse the code, <a href=\"http://cedet.sourceforge.net/cogre.shtml\">COGRE</a> can manipulate UML
diagrams representing your code, and you can export diagrams into code through
SRecode.  Unfortunately this isn't a round-trip solution as the generated code
currently should not replace existing hand-written code.
</p>


  <strong>Can you tell us a bit about the CEDET-project?</strong>

<p>
<b>EML</b>: I maintain CEDET and field questions on the <a href=\"http://sourceforge.net/mail/?group_id=17886\">mailing list</a>.  There are
several contributors who either own some tool in the \"contrib\" area, fix bugs,
answer questions or apply patches for new features.  There has always been
someone to pick up the slack when I'm busy elsewhere, and I've greatly
appreciated that.
</p>
<p>
The easiest (and most common) way to contribute code to CEDET is to provide
support for some new language, or to create a language agnostic tool using the
CEDET APIs.  As with Emacs, you need to be able to assign copyright to the FSF
to contribute to CEDET's core, but new language support or utilities can have
a home in the contrib area as well.
</p>


  <strong>djcb: CEDET is part of Emacs since 23.2. Can you tell us a bit about how that
  happened?</strong>

<p>
<b>EML</b>: I've been providing assignments for the parts of CEDET since 1996 or so.
For Emacs 23.1, CEDET was at a stable and useful enough state that Chong
Yidong was willing to do the work to integrate it into Emacs.  My ability to
get a legal release for CEDET in time for Emacs 23.1 failed, so it went into
23.2 instead.  It is my understanding that CEDET's smart completion engine
reached a performance and reliability point that made it desirable to have in
Emacs.
</p>
<p>
Emacs currently includes the parts of CEDET needed to make EDE, the project
management system, Semantic and it's user tools, and SRecode all work from a
user perspective.  Emacs lacks the Semantic development environment, needed
for writing new language support, and COGRE, the UML diagram editing tool.
</p>


<strong>djcb: Are there plans to include those parts as well?</strong>

<p>
Yes.  It is important for users with a stock Emacs to develop new languages
using the missing Semantic development tools.  I don't know if COGRE will ever
go in, though I expect that this will be done via the new package management
system [elpa].
</p>


<strong>djcb: Did you ever try IDEs such as <a
  href=\"http://en.wikipedia.org/wiki/Eclipse_(software)\">Eclipse</a>? How do you
  think CEDET stacks up against such programs?</strong>

<p>
<b>EML</b>: I have used <a href=\"http://en.wikipedia.org/wiki/Visual_studio\">Visual Studio</a> more than Eclipse, and certainly watched demos
on how these and other tools work.
</p>
<p>
These tools win over CEDET's features in that they usually integrate directly
with the compiler, VM or whatever, and have very good completion engines and
UIs that you can interact with.
</p>
<p>
CEDET wins in that you don't need a compiler, or even code that can compile
for it to work and start providing useful completions.  It can infer an awful
lot from a project.
</p>
<p>
CEDET's language support structure is thus simple in comparison, and CEDET
supports many more languages as a side effect.  It also wins because it is in
Emacs, and I've done my best to try and match the \"Emacs Way\".  For an Emacs
user, this is intuitive, but can appear quirky to outsiders.
</p>


  <strong>djcb: What about other development tools for in emacs?</strong>

<p>
<b>EML</b>: There are a lot of language specific solutions like <a href=\"http://cx4a.org/software/gccsense/\">GCCSense</a>, <a href=\"http://common-lisp.net/project/slime/\">slime</a>, <a href=\"http://jdee.sourceforge.net/\">JDEE</a>, and
others out there.  These projects are great in that they take a language, and
push it to the edge of what you can do, and the users generally love that
stuff.  When someone wants to do the same thing, like when <a href=\"http://csde.sourceforge.net/\">CSDE</a> started for
C#, and it tried to copy JDEE, it was just that, a copy that didn't quite make
it.
</p>
<p>
It is my hope that CEDET will become the target of choice for users who want
to make their language support in Emacs the best.  They will save a lot of
time doing so as well.  The same infrastructure for integrating in external
tools can be used to get improved results out of CEDET, but CEDET will handle
converting that into a representation that would then allow any tool built on
CEDET to work.  This is the same model that worked well for <code>comint.el</code>, and
<code>gud.el</code>.
</p>
<p>
<a href=\"http://code.google.com/p/yasnippet/\">Yasnippet</a> is a bit different in the way it \"competes\" with SRecode.  My first
implementation of SRecode tried recycling tempo templates, but I couldn't get
it to work.  In fact all the template systems I investigated fell short of
what I was trying to do, so I had to roll my own, and ended up using a variant
of the Google template format.
</p>
<p>
The key difference is that the goal was for SRecode to provide a series of
base templates for code generation.  A tool writer would then write some tool
to generate code.  A user would then use the tool, and say \"This is great, how
do I change where the <code>{</code> goes?\"
</p>
<p>
The answer is to override the template with that detail in it without
interfering with the system templates.  That only works if the templates are
sufficiently granular that the changed template can be simple.  Template reuse
needs to be high so that if your company formats your methods as:
</p>



<pre class=\"src src-c\"><span class=\"org-type\">int</span> <span class=\"org-function-name\">mymethod</span>() { implementme() };
</pre>



<p>
instead of 
</p>



<pre class=\"src src-c\"><span class=\"org-type\">int</span> <span class=\"org-function-name\">mymethod</span>() {
}
</pre>



<p>
that one template change will allow this to happen for all code generated from
every tool.
</p>
<p>
Thus, the audience for yasnippet and SRecode is quite different.  Of course
you could do yasnippet like things with SRecode if someone took the time to
improve the field-editing feature in SRecode, but that has not been my focus.
</p>


  <strong>djcb: Do you follow the overall Emacs development process? Are there
  things you would like to see changed/improved?</strong>

<p>
<b>EML</b>: I watch the <code>emacs-devel</code> mailing list, mainly to see if anything 
related to CEDET goes by that I can help with, or what the latest cool 
feature might be. My first contribution of <a href=\"http://cedet.sourceforge.net/speedbar.shtml\">Speedbar</a> to Emacs in Emacs 20 
helped drive some features related to overlines, boxes, and other face 
attributes that appeared in Emacs 21.
</p>
<p>
In the future, once CEDET and Emacs cross merge techniques are hashed out, I
would expect some key parts that need performance improvements might move into
C.  Another part of CEDET that I'd love to see become bound closer to Emacs is
<code>mode-local.el</code>.  It tries to simulate mode-local variables and mode-local
functions.  This is critical in a complex system like CEDET that needs to
provide a language support author with fine grained control.  There are good
reasons not to make what is currently implemented \"the Emacs way\", but it
would be nice to resolve those and enable mode authors a with a more powerful
way to customize the user experience.
</p>


<strong>djcb: Do you have specific plans for CEDET in the future?</strong>

<p>
<b>EML</b>: Here is the short list:
</p>
<ul>
<li>
Improve Emacs/CEDET cross merging
</li>
<li>
Offload tag storage to an external process - needed for scalability
</li>
<li>
Design/define a \"CEDET mode\" as a way of simplifying the confusing array of
distinct tools and modes that make up CEDET now.
</li>
<li>
Finish the smart-context menu project
</li>
<li>
Resolve the \"code replacement\" problem of parsing a block of code,
transforming it, and re-creating that code in place reliably.

</li>
</ul>


<strong>djcb: In addition to all these 'generic' improvements, are there
specific areas where new contributors could make a difference?</strong>

<p>
<b>EML</b>: Supporting new \"stuff\" in CEDET is one big win.  Stuff can be:
</p>
<ul>
<li>
New project types under EDE to ease transition from something like Visual
Studio to Emacs.
</li>
<li>
Language support, such as parsers, or mode overrides.  Finding ways to take
existing cool tools, like JDE's beanshell, or slime's inferior lisp process
and allowing it to do work for CEDET is another big win.
</li>
<li>
Templates for code generation in new languages.

</li>
</ul>

<p>Tool writing would also be good.  JDEE's author Paul Kinnucan converted many
bits of JDEE to CEDET and co-designed many of CEDET's parts along the way,
such as semanticdb, and that was a huge help.  ECB's current maintainer Klaus
has also had a big impact on the way concepts are abstracted to a tool that
depends on CEDET.
</p>
<p>
Naturally, joining the mailing list and fixing reported bugs and improving
the doc is also a huge help, but not as exciting as writing new code. :)
</p>


<strong>djcb: Finally, many people want to start using CEDET, but it seems they
have a bit of trouble to get started. Do you have any recommendations for
them?</strong>

<p>
<b>EML</b>: Start with the <code>cedet.info</code> file which has many of the common setup
configurations in it.  If you run into something not explained well or at
all, be sure to join the mailing list and be specific about how that doc
failed.  Very few questions on the mailing list refer to the doc, so the doc
is rarely improved in a way that can help others.
</p>
<p>
Another good starting point is Alex Ott's article <a href=\"http://xtalk.msk.su/~ott/en/writings/emacs-devenv/EmacsCedet.html\">A Gentle Introduction to CEDET</a>, which is very helpful.
</p>


<strong>Thanks a lot for your time, Eric! Wishing you a lot of success with
CEDET and all your other projects!</strong>

</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-8830503538191507740?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/8830503538191507740/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=8830503538191507740") (title . "1 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8830503538191507740"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8830503538191507740"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/09/interview-with-eric-ludlam-cedet.html") (title . "interview with Eric Ludlam (CEDET)"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "1"))) ("narrowing buffer contents" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
'Narrowing' is yet another of those many useful emacs features that took me
years to appreciate, mostly because I never really tried it. I may not be the
only one, so here's a short introduction.
</p>
<p>
<i>Narrowing</i> is the concept of hiding the buffer contents except for what you
are currently working on. This is useful when you don't want to be distracted,
but also because it allows you to execute commands <i>only</i> on the narrowed
part. You can narrow different things:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">what's shown</th><th scope=\"col\">name</th><th scope=\"col\">binding</th></tr>
</thead>
<tbody>
<tr><td>region (selection)</td><td><code>narrow-to-region</code></td><td><code>C-x n n</code></td></tr>
<tr><td>current page</td><td><code>narrow-to-page</code></td><td><code>C-x n p</code></td></tr>
<tr><td>function</td><td><code>narrow-to-defun</code></td><td><code>C-x n d</code></td></tr>
</tbody>
<tbody>
<tr><td>everything</td><td><code>widen</code></td><td><code>C-x n w</code></td></tr>
</tbody>
</table>
<p>
I never used narrowing for the current page, but apparently it's used by
e.g. <code>Info-Mode</code> to show only one page.
</p>
<p>
That last one is pretty important to remember; it's not <i>totally obvious</i> how
to get back to 'normal' mode where you can see everything. For this very
reason ('where the #&gt;*$@ did my text go'), always-helpful emacs by defaults
<i>disables</i> <code>narrow-to-region</code> (but, for some reason, not the other ones). To
enable it, put the following in your <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(put 'narrow-to-region 'disabled nil)
</pre>
<p>
Also note that the mode-line will show 'Narrow' when you're in narrow mode,
lest you forget.
</p>
<p>
When you're using <code>org-mode</code> there is an additional one you might want to
memorize:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">what's shown</th><th scope=\"col\">name</th><th scope=\"col\">binding</th></tr>
</thead>
<tbody>
<tr><td>subtree</td><td><code>org-narrow-to-subtree</code></td><td><code>C-x n s</code></td></tr>
</tbody>
</table>
<p>
I'm using that last one quite often; I have org-files where I keep meeting notes
etc., and when in a certain meeting, I only want to see the notes for that
specific meeting.
</p>
<p>
One <i>bug</i>? <i>feature</i>? of narrowing is that line-numbering is relative to the
narrowed area rather than the full buffer. I'd prefer to have the <i>real</i> line
numbers.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5395938754174547300?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/5395938754174547300/comments/default" (19578 47492) new 3 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5395938754174547300") (published nil "2010-08-22T14:10:00.001+03:00") (updated nil "2010-08-29T22:48:20.779+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "narrowing buffer contents") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
'Narrowing' is yet another of those many useful emacs features that took me
years to appreciate, mostly because I never really tried it. I may not be the
only one, so here's a short introduction.
</p>
<p>
<i>Narrowing</i> is the concept of hiding the buffer contents except for what you
are currently working on. This is useful when you don't want to be distracted,
but also because it allows you to execute commands <i>only</i> on the narrowed
part. You can narrow different things:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">what's shown</th><th scope=\"col\">name</th><th scope=\"col\">binding</th></tr>
</thead>
<tbody>
<tr><td>region (selection)</td><td><code>narrow-to-region</code></td><td><code>C-x n n</code></td></tr>
<tr><td>current page</td><td><code>narrow-to-page</code></td><td><code>C-x n p</code></td></tr>
<tr><td>function</td><td><code>narrow-to-defun</code></td><td><code>C-x n d</code></td></tr>
</tbody>
<tbody>
<tr><td>everything</td><td><code>widen</code></td><td><code>C-x n w</code></td></tr>
</tbody>
</table>


<p>
I never used narrowing for the current page, but apparently it's used by
e.g. <code>Info-Mode</code> to show only one page.
</p>
<p>
That last one is pretty important to remember; it's not <i>totally obvious</i> how
to get back to 'normal' mode where you can see everything. For this very
reason ('where the #&gt;*$@ did my text go'), always-helpful emacs by defaults
<i>disables</i> <code>narrow-to-region</code> (but, for some reason, not the other ones). To
enable it, put the following in your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(put 'narrow-to-region 'disabled nil)
</pre>



<p>
Also note that the mode-line will show 'Narrow' when you're in narrow mode,
lest you forget.
</p>
<p>
When you're using <code>org-mode</code> there is an additional one you might want to
memorize:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">what's shown</th><th scope=\"col\">name</th><th scope=\"col\">binding</th></tr>
</thead>
<tbody>
<tr><td>subtree</td><td><code>org-narrow-to-subtree</code></td><td><code>C-x n s</code></td></tr>
</tbody>
</table>


<p>
I'm using that last one quite often; I have org-files where I keep meeting notes
etc., and when in a certain meeting, I only want to see the notes for that
specific meeting.
</p>
<p>
One <i>bug</i>? <i>feature</i>? of narrowing is that line-numbering is relative to the
narrowed area rather than the full buffer. I'd prefer to have the <i>real</i> line
numbers.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5395938754174547300?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5395938754174547300/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5395938754174547300") (title . "10 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5395938754174547300"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5395938754174547300"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/08/narrowing-buffer-contents.html") (title . "narrowing buffer contents"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "10"))) ("some handy key bindings" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
Emacs offers many handy key bindings; every now and then I come across a new
one, which has been hiding there somewhere for a decade or more&hellip; Here are
some of my favorites &ndash; I'm listing those that are (a) often useful, (b) might
not be known by everyone already (c) don't require any external packages or
setup.
</p>
<ul>
<li>
<code>M-27 x</code> gives you <code>xxxxxxxxxxxxxxxxxxxxxxxxxxx</code>; and, believe it or not,
works also with different characters and numbers;
</li>
<li>
<code>M-m</code> jumps to the first non-whitespace character on the current line;
</li>
<li>
<code>M-^</code> joins two lines into one &ndash; like vi(m)'s <code>:join</code>,
except that point must be on the second line, not the first;
</li>
<li>
<code>M-/</code> auto-completes based on words in all your buffers; there are more
powerful alternatives, but this one does not require any setup;
</li>
<li>
<code>C-h k</code> followed by some key or key combination tells you what it does, <code>C-h     m</code> describes the currently active modes, with their key bindings;
</li>
<li>
<code>C-h f</code> documents the current function, <code>C-h v</code> does the same for
variables. <code>C-h a</code> gives you information about commands - for example to get
<code>date</code>-related commands, press <code>C-h a date</code>. This will, however, also get
you commands related to <code>update</code>; instead, you can use <code>C-h a \\bdate</code>
(because <code>C-h a</code> accepts regular expressions);
</li>
<li>
<code>C-x C-o</code> will delete all the empty lines around your current cursor
position, except for one;
</li>
<li>
<code>M-q</code> re-aligns the current paragraph; I use it all the time when writing
e-mails etc. (you might want to check out <a href=\"http://www.emacswiki.org/emacs/FillAdapt\">filladapt</a> for a version that gives
you a bit more smartness with indentations, lists etc.);
</li>
<li>
<code>C-x 8 RET</code> in a recent emacs version gives you an auto-completable list of
special characters to insert. So if I need, say, the Yen-character, I type
<code>C-x 8 RET ye TAB</code> and I get <code>YEN SIGN</code>, which <code>RET</code> will then insert:
¥. Note that the completion only works on the <i>start</i> of the character name,
so if you'd want to include the α-character, you'd need to know that its
UCS-name is <code>GREEK SMALL LETTER ALPHA</code>&hellip; (you can try <code>*alpha</code> or TAB the
empty string, and search in the results buffer, but that's rather slow);
</li>
<li>
<code>C-h l</code> shows your last 300 key presses ('lossage'). Interesting to see, and
it might be useful when <a href=\"http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html\">defining keyboard macros</a>.
</li>
</ul>
<p>What are your favorites? Please share them in the comments.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-176862637301615408?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/176862637301615408/comments/default" (19539 11436) new 4 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-176862637301615408") (published nil "2010-07-30T21:23:00.002+03:00") (updated nil "2010-07-30T22:49:00.260+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "some handy key bindings") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
Emacs offers many handy key bindings; every now and then I come across a new
one, which has been hiding there somewhere for a decade or more&hellip; Here are
some of my favorites &ndash; I'm listing those that are (a) often useful, (b) might
not be known by everyone already (c) don't require any external packages or
setup. 
</p>
<ul>
<li>
<code>M-27 x</code> gives you <code>xxxxxxxxxxxxxxxxxxxxxxxxxxx</code>; and, believe it or not,
works also with different characters and numbers;
</li>
<li>
<code>M-m</code> jumps to the first non-whitespace character on the current line;
</li>
<li>
<code>M-^</code> joins two lines into one &ndash; like vi(m)'s <code>:join</code>,
except that point must be on the second line, not the first;
</li>
<li>
<code>M-/</code> auto-completes based on words in all your buffers; there are more
powerful alternatives, but this one does not require any setup;
</li>
<li>
<code>C-h k</code> followed by some key or key combination tells you what it does, <code>C-h     m</code> describes the currently active modes, with their key bindings;
</li>
<li>
<code>C-h f</code> documents the current function, <code>C-h v</code> does the same for
variables. <code>C-h a</code> gives you information about commands - for example to get
<code>date</code>-related commands, press <code>C-h a date</code>. This will, however, also get
you commands related to <code>update</code>; instead, you can use <code>C-h a \\bdate</code>
(because <code>C-h a</code> accepts regular expressions);
</li>
<li>
<code>C-x C-o</code> will delete all the empty lines around your current cursor
position, except for one;
</li>
<li>
<code>M-q</code> re-aligns the current paragraph; I use it all the time when writing
e-mails etc. (you might want to check out <a href=\"http://www.emacswiki.org/emacs/FillAdapt\">filladapt</a> for a version that gives
you a bit more smartness with indentations, lists etc.);
</li>
<li>
<code>C-x 8 RET</code> in a recent emacs version gives you an auto-completable list of
special characters to insert. So if I need, say, the Yen-character, I type
<code>C-x 8 RET ye TAB</code> and I get <code>YEN SIGN</code>, which <code>RET</code> will then insert:
¥. Note that the completion only works on the <i>start</i> of the character name,
so if you'd want to include the α-character, you'd need to know that its
UCS-name is <code>GREEK SMALL LETTER ALPHA</code>&hellip; (you can try <code>*alpha</code> or TAB the
empty string, and search in the results buffer, but that's rather slow);
</li>
<li>
<code>C-h l</code> shows your last 300 key presses ('lossage'). Interesting to see, and
it might be useful when <a href=\"http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html\">defining keyboard macros</a>.

</li>
</ul>

<p>What are your favorites? Please share them in the comments.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-176862637301615408?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/176862637301615408/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=176862637301615408") (title . "22 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/176862637301615408"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/176862637301615408"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/07/some-handy-key-bindings.html") (title . "some handy key bindings"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "22"))) ("navigating through files and buffers with the lusty explorer" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
I think quite a few people are using <code>ido-mode</code> to navigate through files an
and buffers; we discussed it here already <a href=\"http://emacs-fu.blogspot.com/2009/02/switching-buffers.html\">a long time ago</a>. I am a happy
<code>ido</code>-user myself &ndash; it took me some time to fully get full accustomed to the
key bindings, but now it feels very natural. Definitely an improvement of my
emacs user experience.
</p>
<p>
However, I am always looking for new things &ndash; and one of those is a sort-of
<code>ido-mode</code> substitute. It's called the <a href=\"http://www.emacswiki.org/emacs/LustyExplorer\">Lusty Explorer</a> and it's the emacs
implementation of an existing <a href=\"http://www.vim.org/scripts/script.php?script_id=1890\">vim-plugin</a>. It's quite similar to <code>ido-mode</code>;
the difference is mainly that it shows all the files or buffers at the same
time, in the way that shells (say, <code>bash</code> or <code>zsh</code>) do auto-completion.
</p>
<p>
The best way to show how it works is using an <a href=\"http://viewglob.sourceforge.net/lusty-explorer.el.animated.gif\">screencast</a> (note, this is of a
slightly older version). Lusty Explorer uses <i>fuzzy matching</i>; that means that
I can type <code>/etc/fo</code>, and all items in <code>/etc/</code> with names <code>f.*o</code> match.
</p>
<p>
To install <code>lusty-explorer</code>, simply copy <a href=\"http://www.emacswiki.org/emacs/download/lusty-explorer.el\">lusty-explorer.el</a> to your
<code>load-path</code>, and put something like the following in your <code>.emacs</code>:0
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">lusty-explorer</span> nil 'noerror)
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">overrride the normal file-opening, buffer switching
</span>  (global-set-key (kbd <span class=\"org-string\">\"C-x C-f\"</span>) 'lusty-file-explorer)
(global-set-key (kbd <span class=\"org-string\">\"C-x b\"</span>)   'lusty-buffer-explorer))
</pre>
<p>
Side-note, the <code>(when (require 'lusty-explorer nil 'noerror) ...)</code> is there
just make sure that no error is raised when <code>lusty-explorer</code> is not found, and
the rest is ignored in that case. I use this construct for all packages that
are not necessarily available everywhere I use my <code>.emacs</code>; thus, they will
simply be ignored and not cause startup errors.
</p>
<p>
I've been using Lusty Explorer for about a week now, and I am quite happy with
it. I still need some time (and maybe some more customization) to get used to
the way it works - for example, I found the way <code>ido-mode</code> handles backspace a
bit smarter. Also, <code>ido-mode</code> can be customized to a much greater extent. That
might merely be a factor of the relative age of the packages &ndash; and I haven't
really felt the need to customize Lusty Explorer too much. For now, I think
I'm going to keep on using it. It's worth a try at least!
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-8007676915264290254?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/8007676915264290254/comments/default" (19527 1085) new 5 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-8007676915264290254") (published nil "2010-07-21T17:29:00.000+03:00") (updated nil "2010-07-21T17:29:17.913+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "navigating through files and buffers with the lusty explorer") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
I think quite a few people are using <code>ido-mode</code> to navigate through files an
and buffers; we discussed it here already <a href=\"http://emacs-fu.blogspot.com/2009/02/switching-buffers.html\">a long time ago</a>. I am a happy
<code>ido</code>-user myself &ndash; it took me some time to fully get full accustomed to the
key bindings, but now it feels very natural. Definitely an improvement of my
emacs user experience.
</p>
<p>
However, I am always looking for new things &ndash; and one of those is a sort-of
<code>ido-mode</code> substitute. It's called the <a href=\"http://www.emacswiki.org/emacs/LustyExplorer\">Lusty Explorer</a> and it's the emacs
implementation of an existing <a href=\"http://www.vim.org/scripts/script.php?script_id=1890\">vim-plugin</a>. It's quite similar to <code>ido-mode</code>;
the difference is mainly that it shows all the files or buffers at the same
time, in the way that shells (say, <code>bash</code> or <code>zsh</code>) do auto-completion.
</p>
<p>
The best way to show how it works is using an <a href=\"http://viewglob.sourceforge.net/lusty-explorer.el.animated.gif\">screencast</a> (note, this is of a
slightly older version). Lusty Explorer uses <i>fuzzy matching</i>; that means that
I can type <code>/etc/fo</code>, and all items in <code>/etc/</code> with names <code>f.*o</code> match.
</p>
<p>
To install <code>lusty-explorer</code>, simply copy <a href=\"http://www.emacswiki.org/emacs/download/lusty-explorer.el\">lusty-explorer.el</a> to your
<code>load-path</code>, and put something like the following in your <code>.emacs</code>:0
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">lusty-explorer</span> nil 'noerror)

  <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">overrride the normal file-opening, buffer switching
</span>  (global-set-key (kbd <span class=\"org-string\">\"C-x C-f\"</span>) 'lusty-file-explorer)
  (global-set-key (kbd <span class=\"org-string\">\"C-x b\"</span>)   'lusty-buffer-explorer))

</pre>



<p>
Side-note, the <code>(when (require 'lusty-explorer nil 'noerror) ...)</code> is there
just make sure that no error is raised when <code>lusty-explorer</code> is not found, and
the rest is ignored in that case. I use this construct for all packages that
are not necessarily available everywhere I use my <code>.emacs</code>; thus, they will
simply be ignored and not cause startup errors.
</p>
<p>
I've been using Lusty Explorer for about a week now, and I am quite happy with
it. I still need some time (and maybe some more customization) to get used to
the way it works - for example, I found the way <code>ido-mode</code> handles backspace a
bit smarter. Also, <code>ido-mode</code> can be customized to a much greater extent. That
might merely be a factor of the relative age of the packages &ndash; and I haven't
really felt the need to customize Lusty Explorer too much. For now, I think
I'm going to keep on using it. It's worth a try at least!
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-8007676915264290254?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/8007676915264290254/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=8007676915264290254") (title . "10 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8007676915264290254"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/8007676915264290254"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/07/navigating-through-files-and-buffers.html") (title . "navigating through files and buffers with the lusty explorer"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "10"))) ("keyboard macros" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
Keyboard macros are a truly <i>classic</i> emacs feature. Still, I only started to
use them years after I got sucked into emacs &ndash; not so uncommon for emacs
features&hellip; There may be more people like me, so let's raise the awareness a
bit.
</p>
<p>
Keyboard macros allow you to record a number of keystrokes, and replay those at
some later point. This can be a great time-saver when you need to do repetitive
things. In many cases, they are an easy alternative to writing some elisp to get
a job done. Note, keyboard macros are should not be confused with elisp-macros,
which are something else altogether.
</p>
</div>
<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">an example </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">
<p>
So, when would we want to use a keyboard macro? Let's take some tedious task --
for example, we have a list of a few hundred names:
</p>
<pre class=\"example\">Newton, Isaac
Einstein, Albert
Maxwell, James
Turing, Alan
...
</pre>
<p>
and we want to turn that into:
</p>
<pre class=\"example\">Isaac Newton
James Maxwell
Alan Turing
...
</pre>
<p>
so, roughly, put the last name after the first name, and remove the comma.
</p>
<p>
We can solve this in different ways; we could simple change each line by
hand. That's a fine solution if there are only a few lines, but it gets boring
rather quickly.
</p>
<p>
Another way is to use <i>regular expressions</i> (see <a href=\"http://emacs-fu.blogspot.com/2009/05/building-regular-expression.html\">Building regular expressions</a>);
in this case, it's fairly easy to come up with one (assuming you <i>know</i> regular
expressions). But let's see how we can solve it with a keyboard macro.
</p>
<p>
Schematically, we can solve this with the following:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">action</th><th scope=\"col\">key</th></tr>
</thead>
<tbody>
<tr><td>go to beginning of a line</td><td>C-a</td></tr>
<tr><td>kill (cut) the first word</td><td>M-d</td></tr>
<tr><td>delete the next two characters</td><td>DEL DEL</td></tr>
<tr><td>go to the end of the line</td><td>C-e</td></tr>
<tr><td>insert a space</td><td>SPC</td></tr>
<tr><td>yank (paste)</td><td>C-y</td></tr>
<tr><td>go to the next line</td><td>C-n</td></tr>
</tbody>
</table>
<p>
This may look like some magical incantation, but it comes quite natural when you
are actually doing the editing.
</p>
<p>
An <b>important</b> thing to remember when working with keyboard macros is that you
do your commands in such a way that they can be repeated for each line. Suppose
you would select <code>Newton</code> with <i>shift-select</i>, i.e., <code>C-SPC</code> at the beginning of
the line and pressing the right arrow key 6 times &ndash; that works for <code>Newton</code>,
but not for <code>Einstein</code>. Instead, we need to use <code>M-d</code> ('<code>kill-word</code>')
instead.
</p>
</div>
</div>
<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">defining a macro </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">
<p>
Now that we have solved the problem for a single line, let's make a keyboard
macro.
</p>
<p>
We move the cursor to the first line, and start the definition by pressing
<code>C-x (</code>, or alternatively, <code>F3</code>. Then, we press the commands <code>C-a</code>, <code>M-d</code>, <code>DEL DEL</code>, <code>C-e</code>, <code>SPC</code>, <code>C-y</code>, <code>C-n</code> (as in the list above).  To finish the
definition, press <code>C-x )</code>, (or <code>F4</code>).
</p>
<p>
Hurray, we have our macro. Now, let's use it.
</p>
</div>
</div>
<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">using the macro </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">
<p>
Now, to execute the last defined macro, you press <code>C-x e</code>. We could repeat that
for our whole list, but fortunately there's an easier way to repeat a macro <i>n</i>
times, using a <i>prefix argument</i>. For example, to repeat the macro 123 times,
you first press <code>C-u 123</code> and then <code>C-x e</code>.
</p>
<p>
There's a slightly shorter way to do this: instead of <code>C-u 123</code> we can write
<code>M-123</code>, and for <code>C-x e</code> we can use <code>F4</code> (<code>kmacro=end-or-call-macro</code>).
</p>
<p>
You can even repeat the macro until the end of the buffer is reached with <code>C-u 0 C-x e</code>; this only makes sense if the macros ever <i>reaches</i> the end of the buffer
of course. (Remember that you can always terminate with <code>C-g</code>, <code>keyboard-quit</code>)
</p>
<p>
You can also apply your keyboard macro to <i>all lines in the selected area</i>
(region) with <code>M-x apply-macro-to-region-lines</code> (or <code>C-x C-k r</code>). Important to
remember: this will actually move the cursor (point) to the start of each line,
and then execute the macro. If you want your macro like that, the
go-to-the-next-line should <b>not</b> be part of your macro, or you will be skipping
lines.
</p>
</div>
</div>
<div id=\"outline-container-1_4\" class=\"outline-3\">
<h3 id=\"sec-1_4\">saving macros for later use </h3>
<div class=\"outline-text-3\" id=\"text-1_4\">
<p>
If you want to use multiple macros, you can <i>name them</i>. You can do this with
<code>M-x name-last-kbd-macro</code>. If you name your macro, say, <code>foo</code> (inventive as we
are), you can then execute it after that as <code>M-x foo</code>, which will be available
until you exit emacs.
</p>
<p>
If you want to have the macro for future emacs sessions as well, you can use
<code>insert-kbd-macro</code>, which will give you an elisp version of your macro. For our
example, this will look like:
</p>
<pre class=\"src src-emacs-lisp\">(fset 'foo
[?\\C-a ?\\M-d delete delete ?\\C-e ?  ?\\C-y ?\\C-n])
</pre>
<p>
Not very readable, but we can put this in <code>.emacs</code>, and we can use it the next
time we start emacs as well. We can also add a key binding for this, for
example:
</p>
<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-c f\"</span>) 'foo)
</pre>
<p>
This will bind <code>foo</code> to <code>C-c f</code>.
</p>
</div>
</div>
</div>
<div id=\"outline-container-2\" class=\"outline-2\">
<h2 id=\"sec-2\">final notes </h2>
<div class=\"outline-text-2\" id=\"text-2\">
<p>
Keyboard macros can be useful and easy, but they are fundamentally connected
to key presses &ndash; so, if you remap your keys to something different, your
macros may not work anymore. Also, the macros are pretty much <i>write-only</i> in
the way we use them here. You can edit them in the <i>macro editor</i> though, with
<code>M-x edit-kbd-macro M-x foo</code>; we'll then get something like:
</p>
<pre class=\"example\">;; Keyboard Macro Editor.  Press C-c C-c to finish; press C-x k RET to cancel.
;; Original keys: C-a M-d 2*&lt;delete&gt; C-e SPC C-y C-n
Command: foo
Key: none
Macro:
C-a                     ;; move-beginning-of-line
M-d                     ;; kill-word
2*&lt;delete&gt;              ;; delete-char
C-e                     ;; move-end-of-line
SPC                     ;; self-insert-command
C-y                     ;; yank
C-n                     ;; next-line
</pre>
<p>
Keyboard macros can be quite a useful trick in your arsenal. And I have not
even gone into more advanced tricks like <i>macros with variations</i> or the
<i>macro ring</i>. Please refer to the section <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros\">Keyboard macros</a> in the emacs
manual (<code>C-h r</code>) for all the details.
</p>
<p>
And, finally, don't let the text-based example limit your imagination &ndash; you
can turn just about any repetitive sequence of tasks into a macro.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6197615112978020971?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/6197615112978020971/comments/default" (19530 38261) new 6 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6197615112978020971") (published nil "2010-07-16T20:34:00.005+03:00") (updated nil "2010-07-24T10:25:41.922+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "keyboard macros") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
Keyboard macros are a truly <i>classic</i> emacs feature. Still, I only started to
use them years after I got sucked into emacs &ndash; not so uncommon for emacs
features&hellip; There may be more people like me, so let's raise the awareness a
bit.
</p>
<p>
Keyboard macros allow you to record a number of keystrokes, and replay those at
some later point. This can be a great time-saver when you need to do repetitive
things. In many cases, they are an easy alternative to writing some elisp to get
a job done. Note, keyboard macros are should not be confused with elisp-macros,
which are something else altogether.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">an example </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
So, when would we want to use a keyboard macro? Let's take some tedious task --
for example, we have a list of a few hundred names:
</p>



<pre class=\"example\">Newton, Isaac
Einstein, Albert
Maxwell, James
Turing, Alan
...
</pre>



<p>
and we want to turn that into:
</p>



<pre class=\"example\">Isaac Newton
James Maxwell
Alan Turing
...
</pre>



<p>
so, roughly, put the last name after the first name, and remove the comma.
</p>
<p>
We can solve this in different ways; we could simple change each line by
hand. That's a fine solution if there are only a few lines, but it gets boring
rather quickly.
</p>
<p>
Another way is to use <i>regular expressions</i> (see <a href=\"http://emacs-fu.blogspot.com/2009/05/building-regular-expression.html\">Building regular expressions</a>);
in this case, it's fairly easy to come up with one (assuming you <i>know</i> regular
expressions). But let's see how we can solve it with a keyboard macro.
</p>
<p>
Schematically, we can solve this with the following:
</p>
<table border=\"2\" cellspacing=\"0\" cellpadding=\"6\" rules=\"groups\" frame=\"hsides\">
<caption></caption>
<colgroup><col align=\"left\" /><col align=\"left\" />
</colgroup>
<thead>
<tr><th scope=\"col\">action</th><th scope=\"col\">key</th></tr>
</thead>
<tbody>
<tr><td>go to beginning of a line</td><td>C-a</td></tr>
<tr><td>kill (cut) the first word</td><td>M-d</td></tr>
<tr><td>delete the next two characters</td><td>DEL DEL</td></tr>
<tr><td>go to the end of the line</td><td>C-e</td></tr>
<tr><td>insert a space</td><td>SPC</td></tr>
<tr><td>yank (paste)</td><td>C-y</td></tr>
<tr><td>go to the next line</td><td>C-n</td></tr>
</tbody>
</table>



<p>
This may look like some magical incantation, but it comes quite natural when you
are actually doing the editing. 
</p>
<p>
An <b>important</b> thing to remember when working with keyboard macros is that you
do your commands in such a way that they can be repeated for each line. Suppose
you would select <code>Newton</code> with <i>shift-select</i>, i.e., <code>C-SPC</code> at the beginning of
the line and pressing the right arrow key 6 times &ndash; that works for <code>Newton</code>,
but not for <code>Einstein</code>. Instead, we need to use <code>M-d</code> ('<code>kill-word</code>')
instead.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">defining a macro </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
Now that we have solved the problem for a single line, let's make a keyboard
macro.
</p>
<p>
We move the cursor to the first line, and start the definition by pressing
<code>C-x (</code>, or alternatively, <code>F3</code>. Then, we press the commands <code>C-a</code>, <code>M-d</code>, <code>DEL DEL</code>, <code>C-e</code>, <code>SPC</code>, <code>C-y</code>, <code>C-n</code> (as in the list above).  To finish the
definition, press <code>C-x )</code>, (or <code>F4</code>).
</p>
<p>
Hurray, we have our macro. Now, let's use it.
</p>
</div>

</div>

<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">using the macro </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
Now, to execute the last defined macro, you press <code>C-x e</code>. We could repeat that
for our whole list, but fortunately there's an easier way to repeat a macro <i>n</i>
times, using a <i>prefix argument</i>. For example, to repeat the macro 123 times,
you first press <code>C-u 123</code> and then <code>C-x e</code>. 
</p>
<p>
There's a slightly shorter way to do this: instead of <code>C-u 123</code> we can write
<code>M-123</code>, and for <code>C-x e</code> we can use <code>F4</code> (<code>kmacro=end-or-call-macro</code>).
</p>
<p>
You can even repeat the macro until the end of the buffer is reached with <code>C-u 0 C-x e</code>; this only makes sense if the macros ever <i>reaches</i> the end of the buffer
of course. (Remember that you can always terminate with <code>C-g</code>, <code>keyboard-quit</code>)
</p>
<p>
You can also apply your keyboard macro to <i>all lines in the selected area</i>
(region) with <code>M-x apply-macro-to-region-lines</code> (or <code>C-x C-k r</code>). Important to
remember: this will actually move the cursor (point) to the start of each line,
and then execute the macro. If you want your macro like that, the
go-to-the-next-line should <b>not</b> be part of your macro, or you will be skipping
lines.
</p>
</div>

</div>

<div id=\"outline-container-1_4\" class=\"outline-3\">
<h3 id=\"sec-1_4\">saving macros for later use </h3>
<div class=\"outline-text-3\" id=\"text-1_4\">


<p>
If you want to use multiple macros, you can <i>name them</i>. You can do this with
<code>M-x name-last-kbd-macro</code>. If you name your macro, say, <code>foo</code> (inventive as we
are), you can then execute it after that as <code>M-x foo</code>, which will be available
until you exit emacs.
</p>
<p>
If you want to have the macro for future emacs sessions as well, you can use
<code>insert-kbd-macro</code>, which will give you an elisp version of your macro. For our
example, this will look like:
</p>



<pre class=\"src src-emacs-lisp\">(fset 'foo 
   [?\\C-a ?\\M-d delete delete ?\\C-e ?  ?\\C-y ?\\C-n])
</pre>



<p>
Not very readable, but we can put this in <code>.emacs</code>, and we can use it the next
time we start emacs as well. We can also add a key binding for this, for
example:
</p>



<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-c f\"</span>) 'foo)
</pre>



<p>
This will bind <code>foo</code> to <code>C-c f</code>.
</p>
</div>
</div>

</div>

<div id=\"outline-container-2\" class=\"outline-2\">
<h2 id=\"sec-2\">final notes </h2>
<div class=\"outline-text-2\" id=\"text-2\">


<p>
Keyboard macros can be useful and easy, but they are fundamentally connected
to key presses &ndash; so, if you remap your keys to something different, your
macros may not work anymore. Also, the macros are pretty much <i>write-only</i> in
the way we use them here. You can edit them in the <i>macro editor</i> though, with
<code>M-x edit-kbd-macro M-x foo</code>; we'll then get something like:
</p>



<pre class=\"example\">;; Keyboard Macro Editor.  Press C-c C-c to finish; press C-x k RET to cancel.
;; Original keys: C-a M-d 2*&lt;delete&gt; C-e SPC C-y C-n

Command: foo
Key: none

Macro:

C-a                     ;; move-beginning-of-line
M-d                     ;; kill-word
2*&lt;delete&gt;              ;; delete-char
C-e                     ;; move-end-of-line
SPC                     ;; self-insert-command
C-y                     ;; yank
C-n                     ;; next-line
</pre>



<p>
Keyboard macros can be quite a useful trick in your arsenal. And I have not
even gone into more advanced tricks like <i>macros with variations</i> or the
<i>macro ring</i>. Please refer to the section <a href=\"http://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html#Keyboard-Macros\">Keyboard macros</a> in the emacs
manual (<code>C-h r</code>) for all the details.
</p>
<p>
And, finally, don't let the text-based example limit your imagination &ndash; you
can turn just about any repetitive sequence of tasks into a macro.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6197615112978020971?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6197615112978020971/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6197615112978020971") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6197615112978020971"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6197615112978020971"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/07/keyboard-macros.html") (title . "keyboard macros"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "14"))) ("console apps in emacs with multi-term" "<div><a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s1600/htop.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s320/htop.png\" /></a></div>
<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">multi-term </h2>
<div class=\"outline-text-2\" id=\"text-1\">
<p>
<strong>updated</strong> Whenever it makes sense, I try to use emacs for my computer-based activities;
surely, programs like <a href=\"http://www.gimp.org/\">The Gimp</a> or a graphical web browser cannot <i>yet</i> be
replace by emacs, but I'm making progress. I like the ways emacs gives me to
automate and speed-up my tasks; I get some return-on-time-investment.
</p>
<p>
2010 or not, I still spend quite a bit of time on the console. So why not do
that from within emacs? There different ways to run shells within emacs.
</p>
<p>
The simplest one is <code>shell</code> (i.e,, <code>M-x shell</code>), which starts a simple shell,
which does not support which does not support 'graphical' console applications,
such as <code>mutt</code>, <code>mc</code>, <code>htop</code>.
</p>
<p>
Then there are <code>term</code> and <code>ansi-term</code> (<code>M-x ansi-term</code>) that do support such
applications, which <code>ansi-term</code> supporting colors as well (it seems to have
become the default for <code>term</code> in recent emacs versions).
</p>
<p>
Another one is the nifty <a href=\"http://www.emacswiki.org/emacs/CategoryEshell\">EShell</a> (included with emacs), which is not just a
(simple) terminal, but also a full shell environment, and has integration with
other things in emacs.  It's nice, but has some of the limitations that <code>shell</code>
has - you cannot run 'graphical' applications; also, I don't really need a
<i>shell</i>, as I am quite happy with <a href=\"http://zsh.org\">zsh</a> (zed shell) already, which is more
powerful, and I prefer a shell that works both inside and outside emacs.
</p>
<p>
For all these reasons, I am using <a href=\"http://www.emacswiki.org/emacs/MultiTerm\">MultiTerm</a>, which has 'graphical' support that
<code>ansi-term</code> has, but adds a nice extra, namely support for multiple terminals
within emacs. I'm not fully up to date with the exact difference in the terminal
support between the two, but I haven't had any problems so far.
</p>
<p>
You can install <code>multi-term</code> (put it in your <code>load-path</code>), and add the
following to your <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(autoload 'multi-term <span class=\"org-string\">\"multi-term\"</span> nil t)
(autoload 'multi-term-next <span class=\"org-string\">\"multi-term\"</span> nil t)
(<span class=\"org-keyword\">setq</span> multi-term-program <span class=\"org-string\">\"/bin/bash\"</span>)   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">use bash
</span><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">(</span><span class=\"org-comment\"><span class=\"org-keyword\">setq</span></span><span class=\"org-comment\"> multi-term-program \"/bin/zsh\") ;; or use zsh...
</span>
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">only needed if you use autopair
</span>(<span class=\"org-keyword\">add-hook</span> 'term-mode-hook
#'(<span class=\"org-keyword\">lambda</span> () (<span class=\"org-keyword\">setq</span> autopair-dont-activate t)))
(global-set-key (kbd <span class=\"org-string\">\"C-c t\"</span>) 'multi-term-next)
(global-set-key (kbd <span class=\"org-string\">\"C-c T\"</span>) 'multi-term) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">create a new one
</span></pre>
<p>
With this, <code>C-c t</code> will jump through your <code>multi-term</code> buffers (create a new one
if it doesn not exist yet), while <code>C-c T</code> unconditionally creates a new
terminal.
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2453472948117026214?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/2453472948117026214/comments/default" (19500 49015) new 7 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2453472948117026214") (published nil "2010-06-30T23:05:00.002+03:00") (updated nil "2010-07-01T19:16:55.939+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "console apps in emacs with multi-term") (content ((type . "html")) "<div><a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s1600/htop.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s320/htop.png\" /></a></div>
<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">multi-term </h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p>
<strong>updated</strong> Whenever it makes sense, I try to use emacs for my computer-based activities;
surely, programs like <a href=\"http://www.gimp.org/\">The Gimp</a> or a graphical web browser cannot <i>yet</i> be
replace by emacs, but I'm making progress. I like the ways emacs gives me to
automate and speed-up my tasks; I get some return-on-time-investment.
</p>
<p>
2010 or not, I still spend quite a bit of time on the console. So why not do
that from within emacs? There different ways to run shells within emacs. 
</p>
<p>
The simplest one is <code>shell</code> (i.e,, <code>M-x shell</code>), which starts a simple shell,
which does not support which does not support 'graphical' console applications,
such as <code>mutt</code>, <code>mc</code>, <code>htop</code>. 
</p>
<p>
Then there are <code>term</code> and <code>ansi-term</code> (<code>M-x ansi-term</code>) that do support such
applications, which <code>ansi-term</code> supporting colors as well (it seems to have
become the default for <code>term</code> in recent emacs versions).
</p>
<p>
Another one is the nifty <a href=\"http://www.emacswiki.org/emacs/CategoryEshell\">EShell</a> (included with emacs), which is not just a
(simple) terminal, but also a full shell environment, and has integration with
other things in emacs.  It's nice, but has some of the limitations that <code>shell</code>
has - you cannot run 'graphical' applications; also, I don't really need a
<i>shell</i>, as I am quite happy with <a href=\"http://zsh.org\">zsh</a> (zed shell) already, which is more
powerful, and I prefer a shell that works both inside and outside emacs.
</p>
<p>
For all these reasons, I am using <a href=\"http://www.emacswiki.org/emacs/MultiTerm\">MultiTerm</a>, which has 'graphical' support that
<code>ansi-term</code> has, but adds a nice extra, namely support for multiple terminals
within emacs. I'm not fully up to date with the exact difference in the terminal
support between the two, but I haven't had any problems so far.
</p>
<p>
You can install <code>multi-term</code> (put it in your <code>load-path</code>), and add the
following to your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(autoload 'multi-term <span class=\"org-string\">\"multi-term\"</span> nil t)
(autoload 'multi-term-next <span class=\"org-string\">\"multi-term\"</span> nil t)

(<span class=\"org-keyword\">setq</span> multi-term-program <span class=\"org-string\">\"/bin/bash\"</span>)   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">use bash
</span><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">(</span><span class=\"org-comment\"><span class=\"org-keyword\">setq</span></span><span class=\"org-comment\"> multi-term-program \"/bin/zsh\") ;; or use zsh...
</span>
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">only needed if you use autopair
</span>(<span class=\"org-keyword\">add-hook</span> 'term-mode-hook
  #'(<span class=\"org-keyword\">lambda</span> () (<span class=\"org-keyword\">setq</span> autopair-dont-activate t)))


(global-set-key (kbd <span class=\"org-string\">\"C-c t\"</span>) 'multi-term-next)
(global-set-key (kbd <span class=\"org-string\">\"C-c T\"</span>) 'multi-term) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">create a new one
</span></pre>



<p>
With this, <code>C-c t</code> will jump through your <code>multi-term</code> buffers (create a new one
if it doesn not exist yet), while <code>C-c T</code> unconditionally creates a new
terminal. 
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2453472948117026214?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2453472948117026214/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2453472948117026214") (title . "8 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2453472948117026214"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2453472948117026214"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/06/console-apps-in-emacs-with-multi-term.html") (title . "console apps in emacs with multi-term"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/TCujU1_NZBI/AAAAAAAAAgo/jgNXAPGhNaU/s72-c/htop.png") (height . "72") (width . "72"))) (thr:total nil "8"))) ("automatic pairing of brackets and quotes" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
Some text-editors, notably <a href=\"http://en.wikipedia.org/wiki/TextMate\">TextMate</a> for <i>MacOS</i>, have a nice feature where
inserting a opening <b>(</b> will automatically insert the closing <b>)</b>, and put the
cursor in between them (and does same for [], {}, and various quote-marks).
</p>
<p>
Not surprisingly, there are <a href=\"http://www.emacswiki.org/emacs/AutoPairs\">some implementations</a> for emacs as well; the best
one I have found so far is called <a href=\"http://code.google.com/p/autopair/\">autopair</a>, which was written by João
Távora. It usually does things <i>just right</i>. Do things 'just right' is
essential for such a tool; even small annoyances can disturb your
<i>flow</i>. Autopair tries to do whatever makes the most sense for a given mode
(programming language etc.), but it can be tuned as well.
</p>
<p>
After <a href=\"http://code.google.com/p/autopair/\">installation</a>, you can automatically activate it for all modes with (in
your <code>.emacs</code>):
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">autopair</span>)
(autopair-global-mode 1)
</pre>
<p>
Now, evaluate this or restart emacs, and enjoy the autopairing-magic!
</p>
<p>
Except for <i>autopairing</i>, <code>autopair</code> also takes care of <i>autocleaning</i>; that
is, if I press <b>(</b> it turns that into <b>()</b> (the pairing part), and if I press
Backspace then, it removes the whole <b>()</b> (the cleaning part). This makes
things much less annoying if you type a pair by accident. Autopairing is the
kind of thing that can get annoying quickly if it does not things exactly
right &ndash; and autopair succeeds!
</p>
<p>
Another nice trick it offers is <i>autowrapping</i> &ndash; that is, I select a <b>word</b>,
press \", and automatically it's turned into \"<b>word</b>\". To enable that, you need
to add the following:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> autopair-autowrap t)
</pre>
<p>
Note: you might want to see the notes below about <code>delete-selection-mode</code>
and <code>cua-mode</code>.
</p>
<p>
Anyway, <code>autopair</code> with autowrap makes for a really smooth editing
experience, I love it! There are two small issues for me though. First, when the cursor in front of some non-whitespace,
I'd like autopairing <i>not</i> to happen, and second, somehow I can't seem to
get \"-autopairing to work in <code>org-mode</code>; of course, that could be my own
fault. These things might be tunable; I haven't tried very hard yet.
</p>
</div>
<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">delete-selection-mode </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">
<p>
Important to mention here is that <code>autopair</code> is (by default) not fully
compatible with <a href=\"http://www.emacswiki.org/emacs/DeleteSelectionMode\">delete-selection-mode</a>. As you may know, that is the mode that
causes emacs to replace the current selection with a character typed, similar
to what most other programs do. I think many people have it enabled in their
<code>.emacs</code> with something like:
</p>
<pre class=\"src src-emacs-lisp\">(delete-selection-mode 1)
</pre>
<p>
If you want to keep on using that together with <code>autopair</code>, add the
following to your <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(put 'autopair-insert-opening 'delete-selection t)
(put 'autopair-skip-close-maybe 'delete-selection t)
(put 'autopair-insert-or-skip-quote 'delete-selection t)
(put 'autopair-extra-insert-opening 'delete-selection t)
(put 'autopair-extra-skip-close-maybe 'delete-selection t)
(put 'autopair-backspace 'delete-selection 'supersede)
(put 'autopair-newline 'delete-selection t)
</pre>
<p>
But, not that that still won't give you the <code>autowrap</code> behavior mentioned
above. For that, we can use <code>cua-mode</code>.
</p>
</div>
</div>
<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">cua-mode </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">
<p>
We <a href=\"http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html\">discussed CUA-mode before</a>, focusing on its nice rectangle-editing
features. But CUA-mode can also be an alternative for
<code>delete-selection-mode</code>, and it goes together more nicely with <code>autopair</code>;
so, <i>instead</i> of <code>delete-selection-mode</code> and the <code>put</code>'s, add the following
to your <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> cua-enable-cua-keys nil)           <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't add C-x,C-c,C-v
</span>(cua-mode t)                             <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">for rectangles, CUA is nice
</span></pre>
<p>
See the linked CUA-mode article for the 'why' of that first line. With this
change, <code>autopair</code> should be working smoothly, including <code>autowrap</code>.
</p>
</div>
</div>
<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">further customization </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">
<p>
As I have hinted at, autopair can be tuned for different modes, and can
differentiate between it's behaviour in literal strings, code, comments
etc. The default are usually sane, but if you're interested, have a look at
the documentation, in particular <code>autopair-extra-pairs</code> and the <i>More    tricks</i>-section in the <a href=\"http://code.google.com/p/autopair\">documentation</a>.
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5801320037956802309?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/5801320037956802309/comments/default" (19485 62698) new 8 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5801320037956802309") (published nil "2010-06-17T22:24:00.001+03:00") (updated nil "2010-06-20T14:00:58.297+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "programming"))) (title ((type . "text")) "automatic pairing of brackets and quotes") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
Some text-editors, notably <a href=\"http://en.wikipedia.org/wiki/TextMate\">TextMate</a> for <i>MacOS</i>, have a nice feature where
inserting a opening <b>(</b> will automatically insert the closing <b>)</b>, and put the
cursor in between them (and does same for [], {}, and various quote-marks).
</p>
<p>
Not surprisingly, there are <a href=\"http://www.emacswiki.org/emacs/AutoPairs\">some implementations</a> for emacs as well; the best
one I have found so far is called <a href=\"http://code.google.com/p/autopair/\">autopair</a>, which was written by João
Távora. It usually does things <i>just right</i>. Do things 'just right' is
essential for such a tool; even small annoyances can disturb your
<i>flow</i>. Autopair tries to do whatever makes the most sense for a given mode
(programming language etc.), but it can be tuned as well.
</p>
<p>
After <a href=\"http://code.google.com/p/autopair/\">installation</a>, you can automatically activate it for all modes with (in
your <code>.emacs</code>):
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">autopair</span>)
(autopair-global-mode 1)
</pre>



<p>
Now, evaluate this or restart emacs, and enjoy the autopairing-magic!
</p>
<p>
Except for <i>autopairing</i>, <code>autopair</code> also takes care of <i>autocleaning</i>; that
is, if I press <b>(</b> it turns that into <b>()</b> (the pairing part), and if I press
Backspace then, it removes the whole <b>()</b> (the cleaning part). This makes
things much less annoying if you type a pair by accident. Autopairing is the
kind of thing that can get annoying quickly if it does not things exactly
right &ndash; and autopair succeeds!
</p>
<p>
Another nice trick it offers is <i>autowrapping</i> &ndash; that is, I select a <b>word</b>,
press \", and automatically it's turned into \"<b>word</b>\". To enable that, you need
to add the following:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> autopair-autowrap t)
</pre>



<p>
Note: you might want to see the notes below about <code>delete-selection-mode</code>
and <code>cua-mode</code>.
</p>
<p>
Anyway, <code>autopair</code> with autowrap makes for a really smooth editing
experience, I love it! There are two small issues for me though. First, when the cursor in front of some non-whitespace,
I'd like autopairing <i>not</i> to happen, and second, somehow I can't seem to
get \"-autopairing to work in <code>org-mode</code>; of course, that could be my own
fault. These things might be tunable; I haven't tried very hard yet.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">delete-selection-mode </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
Important to mention here is that <code>autopair</code> is (by default) not fully
compatible with <a href=\"http://www.emacswiki.org/emacs/DeleteSelectionMode\">delete-selection-mode</a>. As you may know, that is the mode that
causes emacs to replace the current selection with a character typed, similar
to what most other programs do. I think many people have it enabled in their
<code>.emacs</code> with something like:
</p>



<pre class=\"src src-emacs-lisp\">(delete-selection-mode 1)
</pre>



<p>
If you want to keep on using that together with <code>autopair</code>, add the
following to your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(put 'autopair-insert-opening 'delete-selection t)
(put 'autopair-skip-close-maybe 'delete-selection t)
(put 'autopair-insert-or-skip-quote 'delete-selection t)
(put 'autopair-extra-insert-opening 'delete-selection t)
(put 'autopair-extra-skip-close-maybe 'delete-selection t)
(put 'autopair-backspace 'delete-selection 'supersede)
(put 'autopair-newline 'delete-selection t)
</pre>



<p>
But, not that that still won't give you the <code>autowrap</code> behavior mentioned
above. For that, we can use <code>cua-mode</code>.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">cua-mode </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
We <a href=\"http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html\">discussed CUA-mode before</a>, focusing on its nice rectangle-editing
features. But CUA-mode can also be an alternative for
<code>delete-selection-mode</code>, and it goes together more nicely with <code>autopair</code>;
so, <i>instead</i> of <code>delete-selection-mode</code> and the <code>put</code>'s, add the following
to your <code>.emacs</code>:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> cua-enable-cua-keys nil)           <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">don't add C-x,C-c,C-v
</span>(cua-mode t)                             <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">for rectangles, CUA is nice
</span></pre>



<p>
See the linked CUA-mode article for the 'why' of that first line. With this
change, <code>autopair</code> should be working smoothly, including <code>autowrap</code>.
</p>
</div>

</div>

<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">further customization </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
As I have hinted at, autopair can be tuned for different modes, and can
differentiate between it's behaviour in literal strings, code, comments
etc. The default are usually sane, but if you're interested, have a look at
the documentation, in particular <code>autopair-extra-pairs</code> and the <i>More    tricks</i>-section in the <a href=\"http://code.google.com/p/autopair\">documentation</a>.
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5801320037956802309?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5801320037956802309/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5801320037956802309") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5801320037956802309"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5801320037956802309"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/06/automatic-pairing-of-brackets-and.html") (title . "automatic pairing of brackets and quotes"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "14"))) ("worldcup games in your org-mode agenda" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
A significant part of the world population will be watching the Football World
Cup in South-Africa this month. For people who use <code>org-mode</code> to organize
their lives, find the schedule of all the games <a href=\"http://lists.gnu.org/archive/html/emacs-orgmode/2010-06/msg00217.html\">in this message</a> I sent to the
<code>org-mode</code> mailing list.
</p>
<p>
In order to have the games show up in your agenda, make sure the file is in
your <code>org-agenda-files</code>. If needed, you could add it with something like in
your <code>org-mode</code> settings:
</p>
<pre class=\"src src-emacs-lisp\">(add-to-list 'org-agenda-files <span class=\"org-string\">\"~/org/fifa-worldcup-2010.org\"</span>)
</pre>
<p>
One small issue with the schedule is that it use the South-African times, and
there is no automatic way to adjust times for the local time zone. As a
work-around, Juan Pechiar provided the following function which makes it easy
to update all org-timestamps in a file:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">uphours</span> (n)
<span class=\"org-doc\">\"update all timestamps n hours\"</span>
(interactive <span class=\"org-string\">\"nAdd hours: \"</span>)
(<span class=\"org-keyword\">save-excursion</span>
(goto-char (point-min))
(<span class=\"org-keyword\">while</span> (re-search-forward <span class=\"org-string\">\"[[&lt;]\"</span> nil t)
(<span class=\"org-keyword\">when</span> (org-at-timestamp-p t)
(org-timestamp-change n 'hour)
))))
</pre>
<p>
Evaluate this function (in emacs, put your cursor after the last \")\"), then
press <code>C-x C-e</code>. After that, you can go to the file with the world cup
schedule, and give an <code>M-x uphours</code>, provide the offset for your timezone,
compare to South-African time (positive or negative).
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-3875360908688088594?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/3875360908688088594/comments/default" (19473 13740) new 9 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-3875360908688088594") (published nil "2010-06-10T21:57:00.000+03:00") (updated nil "2010-06-10T21:57:48.064+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "org-mode"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "worldcup games in your org-mode agenda") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
A significant part of the world population will be watching the Football World
Cup in South-Africa this month. For people who use <code>org-mode</code> to organize
their lives, find the schedule of all the games <a href=\"http://lists.gnu.org/archive/html/emacs-orgmode/2010-06/msg00217.html\">in this message</a> I sent to the
<code>org-mode</code> mailing list.
</p>
<p>
In order to have the games show up in your agenda, make sure the file is in
your <code>org-agenda-files</code>. If needed, you could add it with something like in
your <code>org-mode</code> settings:
</p>



<pre class=\"src src-emacs-lisp\">(add-to-list 'org-agenda-files <span class=\"org-string\">\"~/org/fifa-worldcup-2010.org\"</span>)
</pre>




<p>
One small issue with the schedule is that it use the South-African times, and
there is no automatic way to adjust times for the local time zone. As a
work-around, Juan Pechiar provided the following function which makes it easy
to update all org-timestamps in a file:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">uphours</span> (n)
  <span class=\"org-doc\">\"update all timestamps n hours\"</span>
  (interactive <span class=\"org-string\">\"nAdd hours: \"</span>)
  (<span class=\"org-keyword\">save-excursion</span>
    (goto-char (point-min))
    (<span class=\"org-keyword\">while</span> (re-search-forward <span class=\"org-string\">\"[[&lt;]\"</span> nil t)
      (<span class=\"org-keyword\">when</span> (org-at-timestamp-p t)
        (org-timestamp-change n 'hour)
        ))))
</pre>




<p>
Evaluate this function (in emacs, put your cursor after the last \")\"), then
press <code>C-x C-e</code>. After that, you can go to the file with the world cup
schedule, and give an <code>M-x uphours</code>, provide the offset for your timezone,
compare to South-African time (positive or negative).
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-3875360908688088594?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/3875360908688088594/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=3875360908688088594") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3875360908688088594"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/3875360908688088594"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/06/worldcup-games-in-your-org-mode-agenda.html") (title . "worldcup games in your org-mode agenda"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "4"))) ("100th post" "<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">100 </h2>
<div class=\"outline-text-2\" id=\"text-1\">
<p>
With that <a href=\"http://emacs-fu.blogspot.com/2010/05/using-zenburn-for-org-mode-generated.html\">last post</a>, emacs-fu reached the 100 posts milestone! Hurray! Thank you for all the
support, it's been a great ride so far, and there's so much more to write about - if only there
were 36 hours in a day.
</p>
<p>
Anyway, to celebrate, I'll be off for the coming weeks (Korea), and I'm not sure if I have much
time to blog from there. So, let's take this opportunity for a small reader poll: what would <b>you</b>
be interested to read about? More programming-related stuff, more org-mode, more about integration
with other programs, more interviews, more &hellip;?
</p>
<p>
Please leave your ideas in the comments. I'd be interested to hear!
</p>
<p>
<b>Update</b>: I am back now; thanks for all the replies. It seems that many people are interested in
CEDET. In fact, I am interested in it myself as well, but am not using it right now, so it will
take a while. For the time being, <a href=\"http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html\">Alex Ott's Gentle Introduction</a> might be the best way to get
started.
</p>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6529863840720914346?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/6529863840720914346/comments/default" (19467 48200) new 10 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6529863840720914346") (published nil "2010-05-20T10:29:00.003+03:00") (updated nil "2010-06-06T18:18:32.624+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "meta"))) (title ((type . "text")) "100th post") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">100 </h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p>
With that <a href=\"http://emacs-fu.blogspot.com/2010/05/using-zenburn-for-org-mode-generated.html\">last post</a>, emacs-fu reached the 100 posts milestone! Hurray! Thank you for all the
support, it's been a great ride so far, and there's so much more to write about - if only there
were 36 hours in a day.
</p>
<p>
Anyway, to celebrate, I'll be off for the coming weeks (Korea), and I'm not sure if I have much
time to blog from there. So, let's take this opportunity for a small reader poll: what would <b>you</b>
be interested to read about? More programming-related stuff, more org-mode, more about integration
with other programs, more interviews, more &hellip;? 
</p>
<p>
Please leave your ideas in the comments. I'd be interested to hear!
</p>
<p>
<b>Update</b>: I am back now; thanks for all the replies. It seems that many people are interested in
CEDET. In fact, I am interested in it myself as well, but am not using it right now, so it will
take a while. For the time being, <a href=\"http://alexott.net/en/writings/emacs-devenv/EmacsCedet.html\">Alex Ott's Gentle Introduction</a> might be the best way to get
started.
</p>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6529863840720914346?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6529863840720914346/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6529863840720914346") (title . "28 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6529863840720914346"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6529863840720914346"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/100th-post.html") (title . "100th post"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "28"))) ("zenburn for org-mode-generated html" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
If you read this blog <i>directly</i>, instead of through some aggregator or feed-reader, you can
now see the code blocks rendered in the nice <i>zenburn</i> color theme that I <a href=\"http://emacs-fu.blogspot.com/2010/04/zenburn-color-theme.html\">discussed before</a>. I'm
really enjoying it, so I added some style sheet definitions, so org-mode <code>#+BEGIN_SRC</code> /
<code>#+END_SRC</code> blocks look as such in the web page (and just like they look on my screen), for
instance:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">fibo</span> (n)
<span class=\"org-doc\">\"calculate the Nth (N&gt;=0) fibonacci number in a simple yet
inefficient way\"</span>
(<span class=\"org-keyword\">cond</span>
((= n 0) 0)
((= n 1) 1)
(t (+ (fibo (- n 1)) (fibo (- n 2))))))
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">now, gimme a list of fibo numbers 0..20
</span>(mapcar 'fibo (number-sequence 0 20))
</pre>
<p>
Note, I discussed the use of such code blocks <a href=\"http://emacs-fu.blogspot.com/2009/05/writing-and-blogging-with-org-mode.html\">earlier</a>; it's one of many nice features of
<code>org-mode</code>. Only quite <i>recently</i> I found that I can press <code>C-c '</code> in such a code block to edit
them in a mode-specific little buffer&hellip; something new and obvious to learn every day.
</p>
<p>
Anyhow, to get the nice zenburn-output in the generated HTML, you can use the
following CSS (note, so far I have only done the code blocks):
</p>
<pre class=\"src src-css\"><span class=\"org-comment\">/* zenburnesque code blocks in for html-exported org mode */</span>
<span class=\"org-function-name\">pre.src</span> {
<span class=\"org-variable-name\">background</span>: #3f3f3f; <span class=\"org-variable-name\">color</span>: #dcdccc;
}
<span class=\"org-function-name\">.org-preprocessor</span> {
<span class=\"org-variable-name\">color</span>: #8cd0d3;
}
<span class=\"org-function-name\">.org-preprocessor</span> {
<span class=\"org-variable-name\">color</span>: #8cd0d3;
}
<span class=\"org-function-name\">.org-variable-name</span> {
<span class=\"org-variable-name\">color</span>: #f0dfaf;
}
<span class=\"org-function-name\">.org-string</span> {
<span class=\"org-variable-name\">color</span>: #cc9393;
}
<span class=\"org-function-name\">.org-type</span> {
<span class=\"org-variable-name\">color</span>: #dfdfbf;
<span class=\"org-variable-name\">font-weight</span>: bold;
}
<span class=\"org-function-name\">.org-function-name</span> {
<span class=\"org-variable-name\">color</span>: #8cd0d3;
<span class=\"org-variable-name\">font-weight</span>: bold;
}
<span class=\"org-function-name\">.org-keyword</span> {
<span class=\"org-variable-name\">color</span>: #f0dfaf;
<span class=\"org-variable-name\">font-weight</span>: bold;
}
<span class=\"org-function-name\">.org-comment</span> {
<span class=\"org-variable-name\">color</span>: #7f9f7f;
}
<span class=\"org-function-name\">.org-doc</span> {
<span class=\"org-variable-name\">color</span>: #afd8af;
}
<span class=\"org-function-name\">.org-comment-delimiter</span> {
<span class=\"org-variable-name\">color</span>: #708070;
}
<span class=\"org-function-name\">.org-constant</span> {
<span class=\"org-variable-name\">color</span>: #dca3ac;
<span class=\"org-variable-name\">font-weight</span>:bold;
}
<span class=\"org-function-name\">.org-builtin</span> {
<span class=\"org-variable-name\">color</span>: #7f9f7f;
}
</pre>
<p>
You can save the above CSS-blob in a file (say, <code>zenburn-code.css</code>), and set
the style sheet for the org-html export by putting a <code>#+STYLE:</code>-line in your
<code>org</code> files:
</p>
<pre class=\"src src-org\"><span class=\"org-org-meta-line\">#+STYLE: &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"zenburn-code.css\" /&gt;</span>
</pre>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2585483528455545782?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/2585483528455545782/comments/default" (19444 57916) new 11 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2585483528455545782") (published nil "2010-05-20T10:15:00.003+03:00") (updated nil "2010-05-20T10:18:20.316+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "org-mode"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "zenburn for org-mode-generated html") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
If you read this blog <i>directly</i>, instead of through some aggregator or feed-reader, you can
now see the code blocks rendered in the nice <i>zenburn</i> color theme that I <a href=\"http://emacs-fu.blogspot.com/2010/04/zenburn-color-theme.html\">discussed before</a>. I'm
really enjoying it, so I added some style sheet definitions, so org-mode <code>#+BEGIN_SRC</code> /
<code>#+END_SRC</code> blocks look as such in the web page (and just like they look on my screen), for
instance:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">fibo</span> (n) 
     <span class=\"org-doc\">\"calculate the Nth (N&gt;=0) fibonacci number in a simple yet
  inefficient way\"</span>
    (<span class=\"org-keyword\">cond</span>
      ((= n 0) 0)
      ((= n 1) 1)
      (t (+ (fibo (- n 1)) (fibo (- n 2))))))

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">now, gimme a list of fibo numbers 0..20
</span>(mapcar 'fibo (number-sequence 0 20))
</pre>




<p>
Note, I discussed the use of such code blocks <a href=\"http://emacs-fu.blogspot.com/2009/05/writing-and-blogging-with-org-mode.html\">earlier</a>; it's one of many nice features of
<code>org-mode</code>. Only quite <i>recently</i> I found that I can press <code>C-c '</code> in such a code block to edit
them in a mode-specific little buffer&hellip; something new and obvious to learn every day.
</p>
<p>
Anyhow, to get the nice zenburn-output in the generated HTML, you can use the
following CSS (note, so far I have only done the code blocks):
</p>



<pre class=\"src src-css\"><span class=\"org-comment\">/* zenburnesque code blocks in for html-exported org mode */</span>

<span class=\"org-function-name\">pre.src</span> {
   <span class=\"org-variable-name\">background</span>: #3f3f3f; <span class=\"org-variable-name\">color</span>: #dcdccc; 
}

<span class=\"org-function-name\">.org-preprocessor</span> {
   <span class=\"org-variable-name\">color</span>: #8cd0d3;
}

<span class=\"org-function-name\">.org-preprocessor</span> {
   <span class=\"org-variable-name\">color</span>: #8cd0d3;
}

<span class=\"org-function-name\">.org-variable-name</span> {
   <span class=\"org-variable-name\">color</span>: #f0dfaf;
}

<span class=\"org-function-name\">.org-string</span> {
   <span class=\"org-variable-name\">color</span>: #cc9393;
}

<span class=\"org-function-name\">.org-type</span> {
   <span class=\"org-variable-name\">color</span>: #dfdfbf;
   <span class=\"org-variable-name\">font-weight</span>: bold;
}

<span class=\"org-function-name\">.org-function-name</span> {
   <span class=\"org-variable-name\">color</span>: #8cd0d3;
   <span class=\"org-variable-name\">font-weight</span>: bold;
}

<span class=\"org-function-name\">.org-keyword</span> {
   <span class=\"org-variable-name\">color</span>: #f0dfaf;
   <span class=\"org-variable-name\">font-weight</span>: bold;
}

<span class=\"org-function-name\">.org-comment</span> {
   <span class=\"org-variable-name\">color</span>: #7f9f7f;
}

<span class=\"org-function-name\">.org-doc</span> {
   <span class=\"org-variable-name\">color</span>: #afd8af;
}

<span class=\"org-function-name\">.org-comment-delimiter</span> {
   <span class=\"org-variable-name\">color</span>: #708070;
}

<span class=\"org-function-name\">.org-constant</span> {
   <span class=\"org-variable-name\">color</span>: #dca3ac;
   <span class=\"org-variable-name\">font-weight</span>:bold;
}

<span class=\"org-function-name\">.org-builtin</span> {
   <span class=\"org-variable-name\">color</span>: #7f9f7f;
}
</pre>



<p>
You can save the above CSS-blob in a file (say, <code>zenburn-code.css</code>), and set
the style sheet for the org-html export by putting a <code>#+STYLE:</code>-line in your
<code>org</code> files:
</p>


<pre class=\"src src-org\"><span class=\"org-org-meta-line\">#+STYLE: &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"zenburn-code.css\" /&gt;</span>
</pre>


</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2585483528455545782?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2585483528455545782/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2585483528455545782") (title . "0 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2585483528455545782"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2585483528455545782"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/using-zenburn-for-org-mode-generated.html") (title . "zenburn for org-mode-generated html"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "0"))) ("emacs 23.2" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
<a href=\"http://permalink.gmane.org/gmane.emacs.announce/17\">Recently</a>, emacs version <b>23.2</b> was released. It's a quick update after <a href=\"http://emacs-fu.blogspot.com/2009/07/emacs-23-is-very-near.html\">23.1 came out</a> (July 29 of 2009); it seems Chong Yidong / Stefan Monnier
(<a href=\"http://emacs-fu.blogspot.com/2009/08/interview-with-chong-yidong-and-stefan.html\">interview</a>) are doing releases more often than before they took over emacs
maintainership. A welcome change, I would say.
</p>
<p>
The amount of changes is obviously also a bit smaller than in 23.1, but
there are still some interesting updates. Let's go through a couple of those
here; I am not striving for completeness, and I won't really go into the
biggest change (inclusion of the <a href=\"http://cedet.sourceforge.net/\">CEDET</a> IDE-framework), as I haven't been
using that enough to say anything about it. Instead, let's look at some of
the other highlights; for the full list of changes, please refer to the
<a href=\"http://www.gnu.org/software/emacs/NEWS.23.2\">NEWS</a>-file. If you have some other cool new feature that deserves mentioning,
please add a comment.
</p>
</div>
<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">Some highlights </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">
<ul>
<li>
Maximum file size increased to 512Mb (this used to be 256 on 32-bit
machines). This may be useful for big log files etc. It does take a while
to load such big files, but after that it's not too slow, at least if you
have enough RAM. For 'normal' files, you're unlikely to ever hit the
limit; e.g. Tolstoy's <a href=\"http://www.gutenberg.org/files/2600/2600.txt\">War and Peace</a> is only 3 MB&hellip;
<p>
Note, you can set <code>large-file-warning-threshold</code> to set the maximum file
size after which emacs will starting asking you for confirmation when
trying to open (eh, <i>visit</i>) files.
</p>
</li>
<li>
By default, the mouse cursor turns invisible when typing, so there is no
more need for <code>mouse-avoidance-mode</code> and similar tricks. However, if you
insist on seeing the mouse cursor, you can add to your <code>.emacs</code>:
</li>
</ul>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> make-pointer-invisible nil)
</pre>
<ul>
<li>
On X-based systems, emacs now listens for font changes (Xft), and can
automatically use the GNOME mono-spaced font (as set in the GNOME
<i>Appearance preferences</i> dialog). Note that this may not work for all
fonts/settings (at least in my tests, setting the font to <i>italic</i> does
not seem to reflect in emacs). Anyway, to enable this, put the following
in your <code>.emacs</code> (or the moral equivalent):
</li>
</ul>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> font-use-system-font t)
</pre>
<ul>
<li>
On Unix, Emacs 23.2 now follows the <a href=\"http://www.freedesktop.org/wiki/Specifications/trash-spec\">freedesktop trash specification</a> for
file deletion; thus, the hacks we <a href=\"http://emacs-fu.blogspot.com/2009/05/using-systems-trash-when-deleting-files.html\">hacks we mentioned before</a> are no longer
needed.
</li>
<li>
Some cool additions for <a href=\"http://www.gnu.org/software/tramp/\">Tramp</a>, allowing emacs to access files in <code>rsync</code>
and even <code>imap://</code>-locations. On systems supporting <a href=\"http://en.wikipedia.org/wiki/GVFS\">GVFS</a>, emacs can now
directly use e.g. <code>obex://</code>-uris (Bluetooth). I need to play a bit with
these things! Tramp support has also been built into <code>eshell</code>.
</li>
<li>
There are already quite some ways to do auto-completion in emacs using the
<code>TAB</code>-key, and emacs 23.2 makes this a bit easier to set up. You can add
basic auto-completion with:
</li>
</ul>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> tab-always-indent 'complete)
</pre>
<ul>
<li>
After setting that, the <code>TAB</code>-key will (after trying if there's anything to
indent first) provide possible completions. It works pretty well for
Emacs-Lisp (I did not test other languages), although the way it shows the
completions (separate <code>*Completions*</code>-buffer) is a bit clumsier that what
for instance <code>yasnippet</code> or <code>company-mode</code> do.
</li>
<li>
You can also do partial completions now, by appending <code>initials</code> to the
completion style, i.e.:
</li>
</ul>
<pre class=\"src src-emacs-lisp\"><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">there must be a more elegant way...
</span>(<span class=\"org-keyword\">setq</span> completion-styles (append completion-style '(initials)))
</pre>
<ul>
<li>
With this, you can complete on the initials of functions and variables in
the minibuffer, say, typing <code>C-h v tai</code> and then pressing <code>TAB</code> will give
you <code>tab-always-indent</code>.
</li>
<li>
As mentioned, the biggest change is the addition on the CEDET-framework,
which contains things like smart completion, code browsing, UML diagram
creation, project management &ndash; features somewhat similar to those in
e.g. Eclipse. I don't know how well it works in practice, but I will give
it a try. At least, inclusion in Emacs should make setting it up with all
dependencies a bit easier, as there is now a guaranteed-to-work setup for
Emacs 23.2 at least.
</li>
</ul>
<p>Summarizing, 23.2 provides us with some nice updates all around and brings
CEDET to the masses. Chong Yidong / Stefan Monnier have done a very good job
in making faster releases, while still keeping an eye on the quality. On the
other hand, the previous version (23.1) is a very solid release, and if you
don't need CEDET, there is no real need to hurry to 23.2.
</p>
</div>
</div>
<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">Future releases </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">
<p>
A lot is happening in the world of GNU/Emacs, with changes being proposed
and implemented in many different places. There's Eli Zaretskii's way work
on making emacs support bidirectional languages (for right-to-left writing
systems such as Hebrew and Arabic; the /bi/directional part is that one
should be able to mix left-to-right and right-to-left). There is Jan
DjÃ¤rv's work on adding UI-tabs to emacs (like e.g. Firefox has them). There
is Ken Raeburn and Andy Wingo's work on <a href=\"http://wingolog.org/archives/2010/04/02/recent-developments-in-guile\">adding Guile Scheme support to emacs</a> - possibly replacing the current Emacs Lisp implementation in the
future. These are just a few of the more prominent projects.
</p>
<p>
Nobody knows in which release these items will be available (if at all),
but it's exciting to see all the directions people are taking emacs.
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1485620013314216183?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/1485620013314216183/comments/default" (19437 34551) new 12 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-1485620013314216183") (published nil "2010-05-14T20:22:00.001+03:00") (updated nil "2010-05-14T20:23:03.808+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "emacs 23.2") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
<a href=\"http://permalink.gmane.org/gmane.emacs.announce/17\">Recently</a>, emacs version <b>23.2</b> was released. It's a quick update after <a href=\"http://emacs-fu.blogspot.com/2009/07/emacs-23-is-very-near.html\">23.1 came out</a> (July 29 of 2009); it seems Chong Yidong / Stefan Monnier
(<a href=\"http://emacs-fu.blogspot.com/2009/08/interview-with-chong-yidong-and-stefan.html\">interview</a>) are doing releases more often than before they took over emacs
maintainership. A welcome change, I would say.

</p>
<p>
The amount of changes is obviously also a bit smaller than in 23.1, but
there are still some interesting updates. Let's go through a couple of those
here; I am not striving for completeness, and I won't really go into the
biggest change (inclusion of the <a href=\"http://cedet.sourceforge.net/\">CEDET</a> IDE-framework), as I haven't been
using that enough to say anything about it. Instead, let's look at some of
the other highlights; for the full list of changes, please refer to the
<a href=\"http://www.gnu.org/software/emacs/NEWS.23.2\">NEWS</a>-file. If you have some other cool new feature that deserves mentioning,
please add a comment.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">Some highlights </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">

<ul>
<li>
Maximum file size increased to 512Mb (this used to be 256 on 32-bit
machines). This may be useful for big log files etc. It does take a while
to load such big files, but after that it's not too slow, at least if you
have enough RAM. For 'normal' files, you're unlikely to ever hit the
limit; e.g. Tolstoy's <a href=\"http://www.gutenberg.org/files/2600/2600.txt\">War and Peace</a> is only 3 MB&hellip; 

<p>
Note, you can set <code>large-file-warning-threshold</code> to set the maximum file
size after which emacs will starting asking you for confirmation when
trying to open (eh, <i>visit</i>) files.
</p>
</li>

<li>
By default, the mouse cursor turns invisible when typing, so there is no
more need for <code>mouse-avoidance-mode</code> and similar tricks. However, if you
insist on seeing the mouse cursor, you can add to your <code>.emacs</code>:

</li>
</ul>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> make-pointer-invisible nil)
</pre>



<ul>
<li>
On X-based systems, emacs now listens for font changes (Xft), and can
automatically use the GNOME mono-spaced font (as set in the GNOME
<i>Appearance preferences</i> dialog). Note that this may not work for all
fonts/settings (at least in my tests, setting the font to <i>italic</i> does
not seem to reflect in emacs). Anyway, to enable this, put the following
in your <code>.emacs</code> (or the moral equivalent):

</li>
</ul>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> font-use-system-font t)
</pre>




<ul>
<li>
On Unix, Emacs 23.2 now follows the <a href=\"http://www.freedesktop.org/wiki/Specifications/trash-spec\">freedesktop trash specification</a> for
file deletion; thus, the hacks we <a href=\"http://emacs-fu.blogspot.com/2009/05/using-systems-trash-when-deleting-files.html\">hacks we mentioned before</a> are no longer
needed.


</li>
<li>
Some cool additions for <a href=\"http://www.gnu.org/software/tramp/\">Tramp</a>, allowing emacs to access files in <code>rsync</code>
and even <code>imap://</code>-locations. On systems supporting <a href=\"http://en.wikipedia.org/wiki/GVFS\">GVFS</a>, emacs can now
directly use e.g. <code>obex://</code>-uris (Bluetooth). I need to play a bit with
these things! Tramp support has also been built into <code>eshell</code>.

</li>

<li>
There are already quite some ways to do auto-completion in emacs using the
<code>TAB</code>-key, and emacs 23.2 makes this a bit easier to set up. You can add
basic auto-completion with:


</li>
</ul>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> tab-always-indent 'complete)
</pre>




<ul>
<li>
After setting that, the <code>TAB</code>-key will (after trying if there's anything to
indent first) provide possible completions. It works pretty well for
Emacs-Lisp (I did not test other languages), although the way it shows the
completions (separate <code>*Completions*</code>-buffer) is a bit clumsier that what
for instance <code>yasnippet</code> or <code>company-mode</code> do.

</li>
<li>
You can also do partial completions now, by appending <code>initials</code> to the
completion style, i.e.:



</li>
</ul>


<pre class=\"src src-emacs-lisp\"><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">there must be a more elegant way...
</span>(<span class=\"org-keyword\">setq</span> completion-styles (append completion-style '(initials)))
</pre>




<ul>
<li>

With this, you can complete on the initials of functions and variables in
the minibuffer, say, typing <code>C-h v tai</code> and then pressing <code>TAB</code> will give
you <code>tab-always-indent</code>.

</li>
<li>
As mentioned, the biggest change is the addition on the CEDET-framework,
which contains things like smart completion, code browsing, UML diagram
creation, project management &ndash; features somewhat similar to those in
e.g. Eclipse. I don't know how well it works in practice, but I will give
it a try. At least, inclusion in Emacs should make setting it up with all
dependencies a bit easier, as there is now a guaranteed-to-work setup for
Emacs 23.2 at least.

</li>
</ul>

<p>Summarizing, 23.2 provides us with some nice updates all around and brings
CEDET to the masses. Chong Yidong / Stefan Monnier have done a very good job
in making faster releases, while still keeping an eye on the quality. On the
other hand, the previous version (23.1) is a very solid release, and if you
don't need CEDET, there is no real need to hurry to 23.2.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">Future releases </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
A lot is happening in the world of GNU/Emacs, with changes being proposed
and implemented in many different places. There's Eli Zaretskii's way work
on making emacs support bidirectional languages (for right-to-left writing
systems such as Hebrew and Arabic; the /bi/directional part is that one
should be able to mix left-to-right and right-to-left). There is Jan
DjÃ¤rv's work on adding UI-tabs to emacs (like e.g. Firefox has them). There
is Ken Raeburn and Andy Wingo's work on <a href=\"http://wingolog.org/archives/2010/04/02/recent-developments-in-guile\">adding Guile Scheme support to emacs</a> - possibly replacing the current Emacs Lisp implementation in the
future. These are just a few of the more prominent projects.

</p>
<p>
Nobody knows in which release these items will be available (if at all),
but it's exciting to see all the directions people are taking emacs.
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1485620013314216183?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/1485620013314216183/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=1485620013314216183") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1485620013314216183"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1485620013314216183"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/emacs-232.html") (title . "emacs 23.2"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "5"))) ("cleaning up the mode-line" "Emacs' version on a status-bar is called the <i>mode-line</i>, and contains all
kind of information – the current buffer name, the cursor position and a
lot of other things, depending on what major and minor modes are active.
<br />
<br />
Customizing the mode-line is, unfortunately, rather hard. One day, I'll
write something about that… but for now at least we may be able to improve
things a little bit, by reducing mode line pollution. Mode line pollution?
Well, many parts of emacs like to announce their presence and state in the
mode line. With the limited space available there, this can become a bit of
an issue, the <code>(Lisp Interaction company Yas abbrev)</code> takes quite some
space:
<br />
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s1600/Screenshot-djcb%40mindcrime.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"86\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s400/Screenshot-djcb%40mindcrime.png\" width=\"400\" /></a></div>
<br />
<br />
But there are some ways to limit the space taken by modes and
minor-modes. Note, these snippets should go in your <tt>.emacs</tt>, and you need to restart emacs to make them active.<br />
<br />
First, the minor modes (note, you can see the currently activated
ones with <code>C-h m</code>); install the handy <a href=\"http://www.eskimo.com/~seldon/diminish.el\">diminish.el</a> (or get it using the <tt>emacs-goodies-el</tt> package when using Debian/Ubuntu</tt>) and add something like the following:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">diminish</span> nil 'noerror)
(<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"company\"</span>
'(diminish 'company-mode <span class=\"org-string\">\"Cmp\"</span>))
(<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"abbrev\"</span>
'(diminish 'abbrev-mode <span class=\"org-string\">\"Ab\"</span>))
(<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"yasnippet\"</span>
'(diminish 'yas/minor-mode <span class=\"org-string\">\"Y\"</span>)))
</pre>
<br />
And the major-modes, for example for Emacs Lisp mode:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">add-hook</span> 'emacs-lisp-mode-hook
(<span class=\"org-keyword\">lambda</span>()
(<span class=\"org-keyword\">setq</span> mode-name <span class=\"org-string\">\"el\"</span>)))&nbsp;</pre>
This looks a bit shorter:
<br />
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFycNVGSI/AAAAAAAAAgc/zgzXi8UqM4Y/s1600/Screenshot-djcb%40mindcrime-1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"102\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFycNVGSI/AAAAAAAAAgc/zgzXi8UqM4Y/s400/Screenshot-djcb%40mindcrime-1.png\" width=\"400\" /></a></div>
<br />
You can of course set these names to whatever is obvious to you.<div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5564809285695465242?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/5564809285695465242/comments/default" (19434 12198) new 13 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5564809285695465242") (published nil "2010-05-12T00:02:00.005+03:00") (updated nil "2010-05-12T07:33:42.360+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "cleaning up the mode-line") (content ((type . "html")) "Emacs' version on a status-bar is called the <i>mode-line</i>, and contains all
kind of information – the current buffer name, the cursor position and a
lot of other things, depending on what major and minor modes are active.
<br />
<br />
Customizing the mode-line is, unfortunately, rather hard. One day, I'll
write something about that… but for now at least we may be able to improve
things a little bit, by reducing mode line pollution. Mode line pollution?
Well, many parts of emacs like to announce their presence and state in the
mode line. With the limited space available there, this can become a bit of
an issue, the <code>(Lisp Interaction company Yas abbrev)</code> takes quite some
space:
<br />
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s1600/Screenshot-djcb%40mindcrime.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"86\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s400/Screenshot-djcb%40mindcrime.png\" width=\"400\" /></a></div>
<br />
<br />
But there are some ways to limit the space taken by modes and
minor-modes. Note, these snippets should go in your <tt>.emacs</tt>, and you need to restart emacs to make them active.<br />
<br />
First, the minor modes (note, you can see the currently activated
ones with <code>C-h m</code>); install the handy <a href=\"http://www.eskimo.com/~seldon/diminish.el\">diminish.el</a> (or get it using the <tt>emacs-goodies-el</tt> package when using Debian/Ubuntu</tt>) and add something like the following:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">diminish</span> nil 'noerror)
  (<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"company\"</span>
      '(diminish 'company-mode <span class=\"org-string\">\"Cmp\"</span>))
  (<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"abbrev\"</span>
    '(diminish 'abbrev-mode <span class=\"org-string\">\"Ab\"</span>))
  (<span class=\"org-keyword\">eval-after-load</span> <span class=\"org-string\">\"yasnippet\"</span>
    '(diminish 'yas/minor-mode <span class=\"org-string\">\"Y\"</span>)))
</pre>
<br />
And the major-modes, for example for Emacs Lisp mode:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">add-hook</span> 'emacs-lisp-mode-hook 
  (<span class=\"org-keyword\">lambda</span>()
    (<span class=\"org-keyword\">setq</span> mode-name <span class=\"org-string\">\"el\"</span>)))&nbsp;</pre>
This looks a bit shorter:
<br />
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFycNVGSI/AAAAAAAAAgc/zgzXi8UqM4Y/s1600/Screenshot-djcb%40mindcrime-1.png\" imageanchor=\"1\" style=\"margin-left: 1em; margin-right: 1em;\"><img border=\"0\" height=\"102\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFycNVGSI/AAAAAAAAAgc/zgzXi8UqM4Y/s400/Screenshot-djcb%40mindcrime-1.png\" width=\"400\" /></a></div>
<br />
You can of course set these names to whatever is obvious to you.<div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5564809285695465242?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5564809285695465242/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5564809285695465242") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5564809285695465242"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5564809285695465242"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/05/cleaning-up-mode-line.html") (title . "cleaning up the mode-line"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/S-nFoazJCiI/AAAAAAAAAgU/JhitOq7NHLg/s72-c/Screenshot-djcb%40mindcrime.png") (height . "72") (width . "72"))) (thr:total nil "4"))) ("navigating the kill-ring" "<p>The <code>kill-ring</code> is emacs' implementation of a copy-paste-clipboard. As
expected, it's more powerful than what most other editors offer - but at the
same time, it may be a bit hard to use. We already discussed the <code>kill-ring</code>
in the <a href=\"http://emacs-fu.blogspot.com/2009/01/kill-ring.html\">Emacs-Fu prehistory</a>.
</p>
<p>
One of the more powerful features of the emacs kill-ring is that is allows for
<i>multiple</i> entries to be saved there. You can then retrieve those older
entries by using <i>prefix arguments</i>, that is: <code>C-y</code> will retrieve the last
item from the kill-ring, while <code>M-</code> <i>n</i> <code>C-y</code> will retrieve the <i>n</i> <sup>th</sup> last
stretch of 'killed' (cut/copied) text. For example, <code>M-2 C-y</code> will retrieve
the second last one.
</p>
<p>
Unfortunately, for most people it's quite hard to remember what was 'killed'
and when and in what order&hellip; Those people can of course use the menu
(Edit/Paste from kill menu), but that is not always so convenient, requires
mousing around etc.
</p>
<p>
Edit: As <code>Anynomous</code> mentions in the comments, one can of course use <code>M-y</code> to
circle through the candidates. This is quite
useful, esp. when you have only a few items in the ring. Note, this command
only works just after a 'yank' (<code>C-y</code>).
</p>
<div id=\"outline-container-1\" class=\"outline-3\">
<h3 id=\"sec-1\">browse-kill-ring </h3>
<div class=\"outline-text-3\" id=\"text-1\">
<p>
Instead, using the handy <code>browse-kill-ring</code> extension, you can open a buffer
which lists the contents of the kill ring, and you can move your cursor to the
desired item and insert it.
</p>
<p>
Installation in simple; first get the <code>browse-kill-ring</code> package <a href=\"http://www.emacswiki.org/emacs/browse-kill-ring.el\">from EmacsWiki</a>, or, alternatively, Debian/Ubuntu users can install the
<code>emacs-goodies-el</code>-package.
</p>
<p>
Then, add to your <code>.emacs</code> something like:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">browse-kill-ring</span> nil 'noerror)
(browse-kill-ring-default-keybindings))
</pre>
<p>
Now, the <code>M-y</code> key binding will activate <code>browse-kill-ring</code> iff the <i>normal behavior</i> (see above) is not available, i.e., when the last command was <b>not</b> a
'yank'.  You can also edit the kill-ring (press <code>C-h m</code> when in the
<code>browse-kill-ring</code>-buffer to see the available bindings).
</p>
</div>
</div>
<div id=\"outline-container-2\" class=\"outline-3\">
<h3 id=\"sec-2\">a little pop-up menu </h3>
<div class=\"outline-text-3\" id=\"text-2\">
<p>
While browsing EmacsWiki, I found another trick:
</p>
<pre class=\"src src-emacs-lisp\">(global-set-key <span class=\"org-string\">\"\\C-cy\"</span> '(<span class=\"org-keyword\">lambda</span> ()
(interactive)
(popup-menu 'yank-menu)))
</pre>
<p>
After which <code>C-c y</code> will show a little pop-up menu with the your kill-menu
entries. It does not seem to fully synchronize with the (possibly edited)
entries you get from <code>browse-kill-ring</code>, but it's a pretty neat way to
navigate through your kill-ring-buffers &ndash; if you don't have too many of them
(if so, you could customize the <code>kill-ring-max</code> variable).
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2273904079063818539?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/2273904079063818539/comments/default" (19415 47912) new 14 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2273904079063818539") (published nil "2010-04-27T22:38:00.003+03:00") (updated nil "2010-04-28T07:35:52.081+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "navigating the kill-ring") (content ((type . "html")) "<p>The <code>kill-ring</code> is emacs' implementation of a copy-paste-clipboard. As
expected, it's more powerful than what most other editors offer - but at the
same time, it may be a bit hard to use. We already discussed the <code>kill-ring</code>
in the <a href=\"http://emacs-fu.blogspot.com/2009/01/kill-ring.html\">Emacs-Fu prehistory</a>.
</p>
<p>
One of the more powerful features of the emacs kill-ring is that is allows for
<i>multiple</i> entries to be saved there. You can then retrieve those older
entries by using <i>prefix arguments</i>, that is: <code>C-y</code> will retrieve the last
item from the kill-ring, while <code>M-</code> <i>n</i> <code>C-y</code> will retrieve the <i>n</i> <sup>th</sup> last
stretch of 'killed' (cut/copied) text. For example, <code>M-2 C-y</code> will retrieve
the second last one.
</p>
<p>
Unfortunately, for most people it's quite hard to remember what was 'killed'
and when and in what order&hellip; Those people can of course use the menu
(Edit/Paste from kill menu), but that is not always so convenient, requires
mousing around etc. 
</p>
<p>
Edit: As <code>Anynomous</code> mentions in the comments, one can of course use <code>M-y</code> to
circle through the candidates. This is quite
useful, esp. when you have only a few items in the ring. Note, this command
only works just after a 'yank' (<code>C-y</code>).
</p>

<div id=\"outline-container-1\" class=\"outline-3\">
<h3 id=\"sec-1\">browse-kill-ring </h3>
<div class=\"outline-text-3\" id=\"text-1\">


<p>
Instead, using the handy <code>browse-kill-ring</code> extension, you can open a buffer
which lists the contents of the kill ring, and you can move your cursor to the
desired item and insert it.
</p>
<p>
Installation in simple; first get the <code>browse-kill-ring</code> package <a href=\"http://www.emacswiki.org/emacs/browse-kill-ring.el\">from EmacsWiki</a>, or, alternatively, Debian/Ubuntu users can install the
<code>emacs-goodies-el</code>-package.
</p>
<p>
Then, add to your <code>.emacs</code> something like:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">browse-kill-ring</span> nil 'noerror)
  (browse-kill-ring-default-keybindings))
</pre>



<p>
Now, the <code>M-y</code> key binding will activate <code>browse-kill-ring</code> iff the <i>normal behavior</i> (see above) is not available, i.e., when the last command was <b>not</b> a
'yank'.  You can also edit the kill-ring (press <code>C-h m</code> when in the
<code>browse-kill-ring</code>-buffer to see the available bindings).
</p>
</div>

</div>

<div id=\"outline-container-2\" class=\"outline-3\">
<h3 id=\"sec-2\">a little pop-up menu </h3>
<div class=\"outline-text-3\" id=\"text-2\">


<p>
While browsing EmacsWiki, I found another trick:
</p>



<pre class=\"src src-emacs-lisp\">(global-set-key <span class=\"org-string\">\"\\C-cy\"</span> '(<span class=\"org-keyword\">lambda</span> ()
   (interactive)
   (popup-menu 'yank-menu)))
</pre>



<p>
After which <code>C-c y</code> will show a little pop-up menu with the your kill-menu
entries. It does not seem to fully synchronize with the (possibly edited)
entries you get from <code>browse-kill-ring</code>, but it's a pretty neat way to
navigate through your kill-ring-buffers &ndash; if you don't have too many of them
(if so, you could customize the <code>kill-ring-max</code> variable).
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2273904079063818539?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2273904079063818539/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2273904079063818539") (title . "6 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2273904079063818539"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2273904079063818539"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/04/navigating-kill-ring.html") (title . "navigating the kill-ring"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "6"))) ("creating custom modes the easy way with generic-mode" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
Syntax highlighting is useful when editing configuration files, programs and
so on, as it helps to prevent errors and makes it easier to quickly scan
documents.
</p>
<p>
Emacs supports syntax highlighting (<i>font locking</i> in emacs lingo) for many
different file types. For many common cases (e.g. editing for many programming
languages, <code>org-mode</code>), emacs' support goes much further than merely
colorizing keywords, and offers all kinds of 'magic' (auto-completion,
'electricity', special key bindings, &hellip;). For some other file types, at least
keywords are given some different color.
</p>
<p>
Still, there are files that are <i>not</i> recognized by emacs as having some
special format; these are displayed as plain text. This may be the case for
less-common configuration files, or your own specific formats.
</p>
<p>
Defining a full 'mode' for such file types can be a lot of work. Fortunately,
emacs offers a easier way: <code>generic-mode</code>. <code>generic-mode</code> defines a whole lot
of mode of modes for common formats, but also defines the
<code>define-generic-mode</code> macro to create your own modes.
</p>
<p>
Suppose we have a little language called <code>foo</code>; a typical <code>foo</code>-file might
look something like:
</p>
<pre class=\"src src-text\">!! this is a comment
account=foo; !! another comment
user=jimmy;
password=$3cre7;
</pre>
<p>
Using <code>define-generic-mode</code>, we can easily define a mode for this:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">generic-x</span>) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">we need this
</span>
(<span class=\"org-keyword\">define-generic-mode</span>
'foo-mode                         <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">name of the mode to create
</span>  '(<span class=\"org-string\">\"!!\"</span>)                           <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">comments start with '!!'
</span>  '(<span class=\"org-string\">\"account\"</span> <span class=\"org-string\">\"user\"</span>
<span class=\"org-string\">\"password\"</span>)                     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">some keywords
</span>  '((<span class=\"org-string\">\"=\"</span> . 'font-lock-operator)     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">'=' is an operator
</span>    (<span class=\"org-string\">\";\"</span> . 'font-lock-builtin))     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">';' is a a built-in
</span>  '(<span class=\"org-string\">\"\\\\.foo$\"</span>)                      <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">files for which to activate this mode
</span>   nil                              <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">other functions to call
</span>  <span class=\"org-doc\">\"A mode for foo files\"</span>            <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">doc string for this mode
</span>)
</pre>
<p>
Now, this will look something like this (if necessary, see the <a href=\"http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html\">colorized version</a>):
</p>
<pre class=\"src src-foo\"><span class=\"org-comment-delimiter\">!! </span><span class=\"org-comment\">this is a comment
</span><span class=\"org-keyword\">account</span><span class=\"org-operator\"> = </span>foo<span class=\"org-builtin\">;</span> <span class=\"org-comment-delimiter\">!! </span><span class=\"org-comment\">another comment
</span><span class=\"org-keyword\">user</span><span class=\"org-operator\"> = </span>jimmy<span class=\"org-builtin\">;</span>
<span class=\"org-keyword\">password</span><span class=\"org-operator\"> = </span>$3cre7<span class=\"org-builtin\">;</span>
</pre>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-7776999996134947941?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/7776999996134947941/comments/default" (19403 17879) new 15 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-7776999996134947941") (published nil "2010-04-18T20:35:00.003+03:00") (updated nil "2010-04-18T20:48:07.459+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "creating custom modes the easy way with generic-mode") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
Syntax highlighting is useful when editing configuration files, programs and
so on, as it helps to prevent errors and makes it easier to quickly scan
documents.
</p>
<p>
Emacs supports syntax highlighting (<i>font locking</i> in emacs lingo) for many
different file types. For many common cases (e.g. editing for many programming
languages, <code>org-mode</code>), emacs' support goes much further than merely
colorizing keywords, and offers all kinds of 'magic' (auto-completion,
'electricity', special key bindings, &hellip;). For some other file types, at least
keywords are given some different color.
</p>
<p>
Still, there are files that are <i>not</i> recognized by emacs as having some
special format; these are displayed as plain text. This may be the case for
less-common configuration files, or your own specific formats.
</p>
<p>
Defining a full 'mode' for such file types can be a lot of work. Fortunately,
emacs offers a easier way: <code>generic-mode</code>. <code>generic-mode</code> defines a whole lot
of mode of modes for common formats, but also defines the
<code>define-generic-mode</code> macro to create your own modes.
</p>
<p>
Suppose we have a little language called <code>foo</code>; a typical <code>foo</code>-file might
look something like:
</p>


<pre class=\"src src-text\">!! this is a comment
account=foo; !! another comment
user=jimmy;
password=$3cre7;
</pre>



<p>
Using <code>define-generic-mode</code>, we can easily define a mode for this:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">generic-x</span>) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">we need this
</span>
(<span class=\"org-keyword\">define-generic-mode</span> 
  'foo-mode                         <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">name of the mode to create
</span>  '(<span class=\"org-string\">\"!!\"</span>)                           <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">comments start with '!!'
</span>  '(<span class=\"org-string\">\"account\"</span> <span class=\"org-string\">\"user\"</span> 
    <span class=\"org-string\">\"password\"</span>)                     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">some keywords
</span>  '((<span class=\"org-string\">\"=\"</span> . 'font-lock-operator)     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">'=' is an operator
</span>    (<span class=\"org-string\">\";\"</span> . 'font-lock-builtin))     <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">';' is a a built-in 
</span>  '(<span class=\"org-string\">\"\\\\.foo$\"</span>)                      <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">files for which to activate this mode 
</span>   nil                              <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">other functions to call
</span>  <span class=\"org-doc\">\"A mode for foo files\"</span>            <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">doc string for this mode
</span>)
</pre>


<p>
Now, this will look something like this (if necessary, see the <a href=\"http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html\">colorized version</a>):
</p>


<pre class=\"src src-foo\"><span class=\"org-comment-delimiter\">!! </span><span class=\"org-comment\">this is a comment
</span><span class=\"org-keyword\">account</span><span class=\"org-operator\"> = </span>foo<span class=\"org-builtin\">;</span> <span class=\"org-comment-delimiter\">!! </span><span class=\"org-comment\">another comment
</span><span class=\"org-keyword\">user</span><span class=\"org-operator\"> = </span>jimmy<span class=\"org-builtin\">;</span>
<span class=\"org-keyword\">password</span><span class=\"org-operator\"> = </span>$3cre7<span class=\"org-builtin\">;</span>
</pre>


</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-7776999996134947941?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/7776999996134947941/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=7776999996134947941") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/7776999996134947941"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/7776999996134947941"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/04/creating-custom-modes-easy-way-with.html") (title . "creating custom modes the easy way with generic-mode"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "5"))) ("the zenburn color theme" "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s1600/zenburn.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s320/zenburn.png\" /></a></div>
A popular way to customize emacs is changing its <i>color scheme</i>, as already
discussed <a href=\"http://emacs-fu.blogspot.com/2009/03/color-theming.html\">color theming</a>. Until recently, I was using an evolved version of the
color theme presented there, '<code>djcb-dark</code>'. It works for me but, admittedly,
it's a bit ugly.<br />
<br />
But recently, in a post to the <a href=\"http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html\">Wanderlust</a> mailing list, someone mentioned a
color theme called <i>Zenburn</i>. <a href=\"http://slinky.imukuppi.org/zenburnpage/\">Zenburn</a> started its life as a color scheme for
<code>vim</code>, around 2002. The explicit goal was to have a pleasant theme that is
light on the eyes, and allows you to stay 'in the zone' for long stretches of
time. People liked it, and version for many other programs were made,
<a href=\"http://brockman.se/2003/zenburn/\">including emacs</a>.
<br />
<br />
I've been using Zenburn for the last few weeks, and I really like it. I used
to think that 'low-contrast' would mean that things are not really clear; but
the opposite seems true. Anyway, the screen shot says more than a thousand
words I suppose…
<br />
<br />
Zenburn-for-emacs (written by Daniel Brockman) can be found at the link
above. I've sent my updates to him of course, but as it may take a while for
the 'official' version to be updated, I've put my version on
Emacswiki: <a href=\"http://www.emacswiki.org/emacs/ColorThemeZenburn\">ZenburnColorTheme</a>. The changes are the support for Wanderlust,
<code>hi-line</code> (for <a href=\"http://emacs-fu.blogspot.com/2008/12/highlighting-current-line.html\">highlighting the current line</a>) , <code>magit</code> and <a href=\"http://emacs-fu.blogspot.com/2009/07/keeping-related-buffers-together-with.html\"><code>elscreen</code></a>; also,
I made selected (eh, <i>transiently marked regions</i>) not loose their foreground
color.
<br />
<br />
Note, the theme is not yet part of the <code>color-theme</code> package, but does require
it.
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6991806489664012099?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/6991806489664012099/comments/default" (19384 28593) new 16 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6991806489664012099") (published nil "2010-04-04T13:48:00.001+03:00") (updated nil "2010-04-04T13:53:37.347+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "the zenburn color theme") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s1600/zenburn.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s320/zenburn.png\" /></a></div>
A popular way to customize emacs is changing its <i>color scheme</i>, as already
discussed <a href=\"http://emacs-fu.blogspot.com/2009/03/color-theming.html\">color theming</a>. Until recently, I was using an evolved version of the
color theme presented there, '<code>djcb-dark</code>'. It works for me but, admittedly,
it's a bit ugly.<br />
<br />
But recently, in a post to the <a href=\"http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html\">Wanderlust</a> mailing list, someone mentioned a
color theme called <i>Zenburn</i>. <a href=\"http://slinky.imukuppi.org/zenburnpage/\">Zenburn</a> started its life as a color scheme for

<code>vim</code>, around 2002. The explicit goal was to have a pleasant theme that is
light on the eyes, and allows you to stay 'in the zone' for long stretches of
time. People liked it, and version for many other programs were made,
<a href=\"http://brockman.se/2003/zenburn/\">including emacs</a>.
<br />
<br />
I've been using Zenburn for the last few weeks, and I really like it. I used
to think that 'low-contrast' would mean that things are not really clear; but
the opposite seems true. Anyway, the screen shot says more than a thousand
words I suppose…
<br />
<br />
Zenburn-for-emacs (written by Daniel Brockman) can be found at the link
above. I've sent my updates to him of course, but as it may take a while for
the 'official' version to be updated, I've put my version on
Emacswiki: <a href=\"http://www.emacswiki.org/emacs/ColorThemeZenburn\">ZenburnColorTheme</a>. The changes are the support for Wanderlust,
<code>hi-line</code> (for <a href=\"http://emacs-fu.blogspot.com/2008/12/highlighting-current-line.html\">highlighting the current line</a>) , <code>magit</code> and <a href=\"http://emacs-fu.blogspot.com/2009/07/keeping-related-buffers-together-with.html\"><code>elscreen</code></a>; also,
I made selected (eh, <i>transiently marked regions</i>) not loose their foreground
color.

<br />
<br />
Note, the theme is not yet part of the <code>color-theme</code> package, but does require
it.
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6991806489664012099?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6991806489664012099/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6991806489664012099") (title . "26 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6991806489664012099"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6991806489664012099"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/04/zenburn-color-theme.html") (title . "the zenburn color theme"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/S7hudg01isI/AAAAAAAAAfw/-jq5xEoP9LA/s72-c/zenburn.png") (height . "72") (width . "72"))) (thr:total nil "26"))) ("showing the buffer position in the mode-line" "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">
I do quite a bit of <a href=\"http://emacs-fu.blogspot.com/2009/12/scrolling.html\">scrolling</a> in emacs, but I hardly ever use the scroll bar
for that. The main reason for still having the scroll bar is that it gives me
some indication where I am in the buffer. Of course, there is some information
in the mode-line, and you can get some more with <code>size-indication-mode</code>, but
it's not as immediately obvious as the scroll bar.
<br />
But recently, I discovered Lennart Borgman's <a href=\"http://www.emacswiki.org/emacs/SmlModeLine\"><code>sml-modeline</code></a>, which
combines all of the scroll bar information into a nice visual indication on
the modeline, and I have been happily using it, and got rid of my scroll bar.
<br />
Put you <code>sml-modeline</code> in your <code>load-path</code>, and the following fragment in your
<code>.emacs</code> should do the trick:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">sml-modeline</span> nil 'noerror)    <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">use sml-modeline if available
</span>  (<span class=\"org-keyword\">progn</span>
(sml-modeline-mode 1)                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">show buffer pos in the mode line
</span>    (scroll-bar-mode -1))                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">turn off the scrollbar
</span>  (scroll-bar-mode 1)                       <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">otherwise, show a scrollbar...
</span>  (set-scroll-bar-mode 'right))             <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">... on the right
</span></pre>
<div class=\"separator\" style=\"clear: both; text-align: center;\">
</div>
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s1600-h/bufpos.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s320/bufpos.png\" /></a></div>
<br />
Note, there is a older version available in Emacswiki which has some problems
(such as conflicting with the <a href=\"http://www.smlnj.org/doc/Emacs/sml-mode.html\">Standard ML editing mode</a> for emacs); thus, for
now it's better to us the <a href=\"http://bazaar.launchpad.net/%7Enxhtml/nxhtml/main/annotate/head%3A/util/sml-modeline.el\">Launchpad version</a>; the instructions above apply to
that version.
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2461533492060024024?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/2461533492060024024/comments/default" (19364 45846) new 17 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2461533492060024024") (published nil "2010-03-20T13:34:00.001+02:00") (updated nil "2010-03-20T13:35:50.591+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "showing the buffer position in the mode-line") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\">
<div class=\"outline-text-2\" id=\"text-1\">
I do quite a bit of <a href=\"http://emacs-fu.blogspot.com/2009/12/scrolling.html\">scrolling</a> in emacs, but I hardly ever use the scroll bar
for that. The main reason for still having the scroll bar is that it gives me
some indication where I am in the buffer. Of course, there is some information
in the mode-line, and you can get some more with <code>size-indication-mode</code>, but
it's not as immediately obvious as the scroll bar.
<br />
But recently, I discovered Lennart Borgman's <a href=\"http://www.emacswiki.org/emacs/SmlModeLine\"><code>sml-modeline</code></a>, which
combines all of the scroll bar information into a nice visual indication on
the modeline, and I have been happily using it, and got rid of my scroll bar.
<br />
Put you <code>sml-modeline</code> in your <code>load-path</code>, and the following fragment in your
<code>.emacs</code> should do the trick:
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">if</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">sml-modeline</span> nil 'noerror)    <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">use sml-modeline if available
</span>  (<span class=\"org-keyword\">progn</span> 
    (sml-modeline-mode 1)                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">show buffer pos in the mode line
</span>    (scroll-bar-mode -1))                   <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">turn off the scrollbar
</span>  (scroll-bar-mode 1)                       <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">otherwise, show a scrollbar...
</span>  (set-scroll-bar-mode 'right))             <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">... on the right
</span></pre>
<div class=\"separator\" style=\"clear: both; text-align: center;\">
</div>
<div class=\"separator\" style=\"clear: both; text-align: center;\">
<a href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s1600-h/bufpos.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s320/bufpos.png\" /></a></div>
<br />
Note, there is a older version available in Emacswiki which has some problems
(such as conflicting with the <a href=\"http://www.smlnj.org/doc/Emacs/sml-mode.html\">Standard ML editing mode</a> for emacs); thus, for
now it's better to us the <a href=\"http://bazaar.launchpad.net/%7Enxhtml/nxhtml/main/annotate/head%3A/util/sml-modeline.el\">Launchpad version</a>; the instructions above apply to
that version.
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2461533492060024024?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2461533492060024024/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2461533492060024024") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2461533492060024024"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2461533492060024024"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/03/showing-buffer-position-in-mode-line.html") (title . "showing the buffer position in the mode-line"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/S6SyadxiEGI/AAAAAAAAAfQ/BkUJ-ujYICU/s72-c/bufpos.png") (height . "72") (width . "72"))) (thr:total nil "5"))) ("cleaning up buffers automatically" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
<a href=\"http://emacs-fu.blogspot.com/2010/02/dealing-with-many-buffers-ibuffer.html\">Recently, I discussed</a> some ways to deal with large numbers of buffers. Maybe
we can also take a step back and ask why we have so many buffers in the first
place - do we really need all of them?
</p>
<p>
Well, the obvious answer is: <i>probably not</i>. After a few days of
<code>(emacs-uptime)</code> there are all kinds of temporary output buffers, man pages
and unchanged buffers you haven't touched in a long time. Let's get rid of
those!
</p>
</div>
<div id=\"outline-container-1.1\" class=\"outline-3\">
<h3 id=\"sec-1.1\">midnight </h3>
<div class=\"outline-text-3\" id=\"text-1.1\">
<p>
For this very purpose, emacs provides <code>midnight-mode</code> (as has done so for more
than a decade). At midnight, it looks at all the buffers, and determines which
of the buffers are no longer in use, and closes ('kills') them. Regardless of
its name, this cleanup does not <i>necessarily</i> have to take place at midnight,
but could be invoked at any time.
</p>
<p>
Setup is easy, just put the following in your <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">midnight</span>)
</pre>
<p>
Clearly, the package was designed for emacs instances that are running for
<i>long</i> times &ndash; for example, by default it clears buffers after having been
inactive for <b>3 days</b>. I'm not sure if that use case is very common today.
Anyway, you can change it by setting <code>clean-buffer-list-delay-general</code> (which
takes the number of <b>days</b> before a buffer becomes eligible for killing).
</p>
<p>
You can ask <code>midnight-mode</code> to clean-up unused buffers <b>right now</b> with <code>M-x clean-buffer-list</code>. Also, you can use some variables to control which buffers
are to be killed, and which ones specifically not:
</p>
<pre class=\"example\">clean-buffer-list-kill-buffer-names
clean-buffer-list-kill-never-buffer-names
clean-buffer-list-kill-regexps
clean-buffer-list-kill-never-regexps
</pre>
<p>
To run <code>clean-buffer-list</code> every <i>n</i> minutes or so, you could use
<code>run-at-time</code>, left as an exercise to the reader.
</p>
</div>
</div>
<div id=\"outline-container-1.2\" class=\"outline-3\">
<h3 id=\"sec-1.2\">tempbuf </h3>
<div class=\"outline-text-3\" id=\"text-1.2\">
<p>
Another way to accomplish roughly the same is <a href=\"http://www.emacswiki.org/emacs/TempbufMode\">TempbufMode</a>.
</p>
<p>
It seems a bit better equipped for shorter cleanup interval, and you have some
killed. However, that requires you to add it to the modes where you'd like to
more influence on the algorithm it uses to decide whether a buffer may be use
it, something like:
</p>
<pre class=\"src src-emacs-lisp\"><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">download tempbuf: http://www.emacswiki.org/emacs/tempbuf.el
</span>(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">tempbuf</span> nil 'noerror)
(<span class=\"org-keyword\">add-hook</span> 'custom-mode-hook 'turn-on-tempbuf-mode)
(<span class=\"org-keyword\">add-hook</span> 'w3-mode-hook 'turn-on-tempbuf-mode)
(<span class=\"org-keyword\">add-hook</span> 'Man-mode-hook 'turn-on-tempbuf-mode)
(<span class=\"org-keyword\">add-hook</span> 'view-mode-hook 'turn-on-tempbuf-mode))
</pre>
<p>
Side-note: I'm using the <code>(when (require 'tempbuf nil 'noerror) ... )</code> pattern
here to make sure that my <code>.emacs</code> also works when <code>tempbuf</code> is not available.
</p>
<p>
<b>Added</b>: for cleaning-up your buffer list <em>non</em>-automatically, you can simply
use <code>M-x kill-some-buffers</code>. (Thanks Susan!). Or you can use <code>C-x C-b</code>.
</div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-4807516215162297206?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/4807516215162297206/comments/default" (19349 24264) new 18 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-4807516215162297206") (published nil "2010-03-08T20:24:00.001+02:00") (updated nil "2010-03-08T22:32:08.881+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "cleaning up buffers automatically") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
<a href=\"http://emacs-fu.blogspot.com/2010/02/dealing-with-many-buffers-ibuffer.html\">Recently, I discussed</a> some ways to deal with large numbers of buffers. Maybe
we can also take a step back and ask why we have so many buffers in the first
place - do we really need all of them?
</p>
<p>
Well, the obvious answer is: <i>probably not</i>. After a few days of
<code>(emacs-uptime)</code> there are all kinds of temporary output buffers, man pages
and unchanged buffers you haven't touched in a long time. Let's get rid of
those!
</p>

</div>

<div id=\"outline-container-1.1\" class=\"outline-3\">
<h3 id=\"sec-1.1\">midnight </h3>
<div class=\"outline-text-3\" id=\"text-1.1\">


<p>
For this very purpose, emacs provides <code>midnight-mode</code> (as has done so for more
than a decade). At midnight, it looks at all the buffers, and determines which
of the buffers are no longer in use, and closes ('kills') them. Regardless of
its name, this cleanup does not <i>necessarily</i> have to take place at midnight,
but could be invoked at any time.
</p>
<p>
Setup is easy, just put the following in your <code>.emacs</code>:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">midnight</span>)
</pre>



<p>
Clearly, the package was designed for emacs instances that are running for
<i>long</i> times &ndash; for example, by default it clears buffers after having been
inactive for <b>3 days</b>. I'm not sure if that use case is very common today.
Anyway, you can change it by setting <code>clean-buffer-list-delay-general</code> (which
takes the number of <b>days</b> before a buffer becomes eligible for killing).
</p>
<p>
You can ask <code>midnight-mode</code> to clean-up unused buffers <b>right now</b> with <code>M-x clean-buffer-list</code>. Also, you can use some variables to control which buffers
are to be killed, and which ones specifically not:
</p>


<pre class=\"example\">clean-buffer-list-kill-buffer-names
clean-buffer-list-kill-never-buffer-names
clean-buffer-list-kill-regexps
clean-buffer-list-kill-never-regexps
</pre>



<p>
To run <code>clean-buffer-list</code> every <i>n</i> minutes or so, you could use
<code>run-at-time</code>, left as an exercise to the reader.
</p>
</div>

</div>

<div id=\"outline-container-1.2\" class=\"outline-3\">
<h3 id=\"sec-1.2\">tempbuf </h3>
<div class=\"outline-text-3\" id=\"text-1.2\">


<p>
Another way to accomplish roughly the same is <a href=\"http://www.emacswiki.org/emacs/TempbufMode\">TempbufMode</a>.
</p>
<p>
It seems a bit better equipped for shorter cleanup interval, and you have some
killed. However, that requires you to add it to the modes where you'd like to
more influence on the algorithm it uses to decide whether a buffer may be use
it, something like:
</p>



<pre class=\"src src-emacs-lisp\"><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">download tempbuf: http://www.emacswiki.org/emacs/tempbuf.el
</span>(<span class=\"org-keyword\">when</span> (<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">tempbuf</span> nil 'noerror) 
  (<span class=\"org-keyword\">add-hook</span> 'custom-mode-hook 'turn-on-tempbuf-mode)
  (<span class=\"org-keyword\">add-hook</span> 'w3-mode-hook 'turn-on-tempbuf-mode)
  (<span class=\"org-keyword\">add-hook</span> 'Man-mode-hook 'turn-on-tempbuf-mode)
  (<span class=\"org-keyword\">add-hook</span> 'view-mode-hook 'turn-on-tempbuf-mode))
</pre>



<p>
Side-note: I'm using the <code>(when (require 'tempbuf nil 'noerror) ... )</code> pattern
here to make sure that my <code>.emacs</code> also works when <code>tempbuf</code> is not available.
</p>
<p>
<b>Added</b>: for cleaning-up your buffer list <em>non</em>-automatically, you can simply
use <code>M-x kill-some-buffers</code>. (Thanks Susan!). Or you can use <code>C-x C-b</code>.
</div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-4807516215162297206?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/4807516215162297206/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=4807516215162297206") (title . "4 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/4807516215162297206"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/4807516215162297206"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/03/cleaning-up-buffers-automatically.html") (title . "cleaning up buffers automatically"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "4"))) ("wanderlust iii" "<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">Wanderlust </h2>
<div class=\"outline-text-2\" id=\"text-1\">
<p>
I have been using the <a href=\"http://www.gohome.org/wl/\">Wanderlust E-mail client</a> for almost a year now, and I
am very happy with it. In previous postings I already discussed <a href=\"http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html\">setup</a> and
some <a href=\"http://emacs-fu.blogspot.com/2009/09/wanderlust-tips-and-tricks.html\">tips and tricks</a>; and I also had somewhat related posts on <a href=\"http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html\">bbdb</a> (the
address book) and <a href=\"http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html\">warning you about new mail</a>. But I think it's time for an
update.
</p>
</div>
<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">maintenance </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">
<p>
One question that I have received quite a few times was about the
<i>maintenance</i> of Wanderlust; it's may be a nice e-mail client, but little
seems to have happened in the last few years. It's reasonable concern.
</p>
<p>
Fortunately, it seems the situation has improved significantly. There's
more traffic on the mailing lists, both from old and new users. Various
improvements are circulating; the place to get the latest stuff is in David
Abrahams' git-repository: <a href=\"http://github.com/dabrahams/semi\">semi</a>, <a href=\"http://github.com/dabrahams/flim\">flim</a>, <a href=\"http://github.com/dabrahams/apel\">apel</a> and <a href=\"http://github.com/dabrahams/wanderlust\">wanderlust</a>. The plan is to
gradually apply the changes to the upstream (CVS) repository.
</p>
</div>
</div>
<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">bugs </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">
<p>
Although I have been quite happy with Wanderlust, there was one <a href=\"http://debbugs.gnu.org/cgi/bugreport.cgi%3Fmsg=8;bug=5534\">bug #5534</a>
that has bitten me a few times, causing occasional <i>hangs</i> when saving
(draft) messages with non-ascii characters. It seemed finally to be a bug
in emacs itself, which is triggered by something in Wanderlust. A fix will
probably be available for the next emacs version; until then, you can work
around this by using an external MIME-encoder. To do this, add the
following to your WL initialization code (thanks to various helpful people
on the WL mailing list):
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> mel-b-ccl-module nil)
(<span class=\"org-keyword\">setq</span> mel-q-ccl-module nil)
(<span class=\"org-keyword\">setq</span> base64-external-encoder '(<span class=\"org-string\">\"mimencode\"</span>))
(<span class=\"org-keyword\">setq</span> base64-external-decoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-u\"</span>))
(<span class=\"org-keyword\">setq</span> base64-external-decoder-option-to-specify-file '(<span class=\"org-string\">\"-o\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-encoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-q\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-decoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-q\"</span> <span class=\"org-string\">\"-u\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-decoder-option-to-specify-file '(<span class=\"org-string\">\"-o\"</span>))
(<span class=\"org-keyword\">setq</span> base64-internal-decoding-limit 0)
(<span class=\"org-keyword\">setq</span> base64-internal-encoding-limit 0)
(<span class=\"org-keyword\">setq</span> quoted-printable-internal-decoding-limit 0)
(<span class=\"org-keyword\">setq</span> quoted-printable-internal-encoding-limit 0)
(<span class=\"org-keyword\">setq</span>-default mime-transfer-level 8)
(<span class=\"org-keyword\">setq</span> mime-header-accept-quoted-encoded-words t)
</pre>
<p>
This requires the <code>mimencode</code>-program, which is part of the
<code>metamail</code>-package. For the time being, this seems to be the best solution
when using Wanderlust with Emacs 23.
</p>
</div>
</div>
<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">one more trick: reformatting </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">
<p>
Let's finish with one more trick. Sometimes, incoming mail is formatted
quite <i>badly</i>; in particular, the new lines are too long for comfortable
reading. From the WL-mailing list, here's a trick to deal with that:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">filladapt</span>)
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">from a WL mailing list post by Per b. Sederber
</span><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">Re-fill messages that arrive poorly formatted
</span>(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">wl-summary-refill-message</span> (all)
(interactive <span class=\"org-string\">\"P\"</span>)
(<span class=\"org-keyword\">if</span> (and wl-message-buffer (get-buffer-window wl-message-buffer))
(<span class=\"org-keyword\">progn</span>
(wl-summary-toggle-disp-msg 'on)
(<span class=\"org-keyword\">save-excursion</span>
(set-buffer wl-message-buffer)
(goto-char (point-min))
(re-search-forward <span class=\"org-string\">\"^$\"</span>)
(<span class=\"org-keyword\">while</span> (or (looking-at <span class=\"org-string\">\"^\\\\[[1-9]\"</span>) (looking-at <span class=\"org-string\">\"^$\"</span>))
(forward-line 1))
(<span class=\"org-keyword\">let*</span> ((buffer-read-only nil)
(find (<span class=\"org-keyword\">lambda</span> (regexp)
(<span class=\"org-keyword\">save-excursion</span>
(<span class=\"org-keyword\">if</span> (re-search-forward regexp nil t)
(match-beginning 0)
(point-max)))))
(start (point))
(end (<span class=\"org-keyword\">if</span> all
(point-max)
(min (funcall find <span class=\"org-string\">\"^[</span><span class=\"org-string\"><span class=\"org-negation-char\">^</span></span><span class=\"org-string\">&gt;\\n]* wrote:[ \\n]+\"</span>)
(funcall find <span class=\"org-string\">\"^&gt;&gt;&gt;&gt;&gt;\"</span>)
(funcall find <span class=\"org-string\">\"^ *&gt;.*\\n *&gt;\"</span>)
(funcall find <span class=\"org-string\">\"^-----Original Message-----\"</span>)))))
(<span class=\"org-keyword\">save-restriction</span>
(narrow-to-region start end)
(filladapt-mode 1)
(fill-region (point-min) (point-max)))))
(message <span class=\"org-string\">\"Message re-filled\"</span>))
(message <span class=\"org-string\">\"No message to re-fill\"</span>)))
(define-key wl-summary-mode-map <span class=\"org-string\">\"\\M-q\"</span> 'wl-summary-refill-message)
</pre>
<p>
Now, you can refill your messages with <code>M-q</code> when in the Summary.
</p>
<p>
If you have any other nifty WL-tricks that could be useful for others, please
share them in the comments, thanks!
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-246570950774488454?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/246570950774488454/comments/default" (19477 62900) new 19 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-246570950774488454") (published nil "2010-02-23T20:06:00.003+02:00") (updated nil "2010-06-14T12:26:12.665+03:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "updated"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "wanderlust"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "e-mail"))) (title ((type . "text")) "wanderlust iii") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<h2 id=\"sec-1\">Wanderlust </h2>
<div class=\"outline-text-2\" id=\"text-1\">


<p>
I have been using the <a href=\"http://www.gohome.org/wl/\">Wanderlust E-mail client</a> for almost a year now, and I
am very happy with it. In previous postings I already discussed <a href=\"http://emacs-fu.blogspot.com/2009/06/e-mail-with-wanderlust.html\">setup</a> and
some <a href=\"http://emacs-fu.blogspot.com/2009/09/wanderlust-tips-and-tricks.html\">tips and tricks</a>; and I also had somewhat related posts on <a href=\"http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html\">bbdb</a> (the
address book) and <a href=\"http://emacs-fu.blogspot.com/2009/11/showing-pop-ups.html\">warning you about new mail</a>. But I think it's time for an
update.
</p>

</div>

<div id=\"outline-container-1_1\" class=\"outline-3\">
<h3 id=\"sec-1_1\">maintenance </h3>
<div class=\"outline-text-3\" id=\"text-1_1\">


<p>
One question that I have received quite a few times was about the
<i>maintenance</i> of Wanderlust; it's may be a nice e-mail client, but little
seems to have happened in the last few years. It's reasonable concern.
</p>
<p>
Fortunately, it seems the situation has improved significantly. There's
more traffic on the mailing lists, both from old and new users. Various
improvements are circulating; the place to get the latest stuff is in David
Abrahams' git-repository: <a href=\"http://github.com/dabrahams/semi\">semi</a>, <a href=\"http://github.com/dabrahams/flim\">flim</a>, <a href=\"http://github.com/dabrahams/apel\">apel</a> and <a href=\"http://github.com/dabrahams/wanderlust\">wanderlust</a>. The plan is to
gradually apply the changes to the upstream (CVS) repository.
</p>
</div>

</div>

<div id=\"outline-container-1_2\" class=\"outline-3\">
<h3 id=\"sec-1_2\">bugs </h3>
<div class=\"outline-text-3\" id=\"text-1_2\">


<p>
Although I have been quite happy with Wanderlust, there was one <a href=\"http://debbugs.gnu.org/cgi/bugreport.cgi%3Fmsg=8;bug=5534\">bug #5534</a>
that has bitten me a few times, causing occasional <i>hangs</i> when saving
(draft) messages with non-ascii characters. It seemed finally to be a bug
in emacs itself, which is triggered by something in Wanderlust. A fix will
probably be available for the next emacs version; until then, you can work
around this by using an external MIME-encoder. To do this, add the
following to your WL initialization code (thanks to various helpful people
on the WL mailing list):
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> mel-b-ccl-module nil)
(<span class=\"org-keyword\">setq</span> mel-q-ccl-module nil)
(<span class=\"org-keyword\">setq</span> base64-external-encoder '(<span class=\"org-string\">\"mimencode\"</span>))
(<span class=\"org-keyword\">setq</span> base64-external-decoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-u\"</span>))
(<span class=\"org-keyword\">setq</span> base64-external-decoder-option-to-specify-file '(<span class=\"org-string\">\"-o\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-encoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-q\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-decoder '(<span class=\"org-string\">\"mimencode\"</span> <span class=\"org-string\">\"-q\"</span> <span class=\"org-string\">\"-u\"</span>))
(<span class=\"org-keyword\">setq</span> quoted-printable-external-decoder-option-to-specify-file '(<span class=\"org-string\">\"-o\"</span>))
(<span class=\"org-keyword\">setq</span> base64-internal-decoding-limit 0)
(<span class=\"org-keyword\">setq</span> base64-internal-encoding-limit 0)
(<span class=\"org-keyword\">setq</span> quoted-printable-internal-decoding-limit 0)
(<span class=\"org-keyword\">setq</span> quoted-printable-internal-encoding-limit 0)

(<span class=\"org-keyword\">setq</span>-default mime-transfer-level 8)
(<span class=\"org-keyword\">setq</span> mime-header-accept-quoted-encoded-words t)
</pre>




<p>
This requires the <code>mimencode</code>-program, which is part of the
<code>metamail</code>-package. For the time being, this seems to be the best solution
when using Wanderlust with Emacs 23.
</p>
</div>

</div>

<div id=\"outline-container-1_3\" class=\"outline-3\">
<h3 id=\"sec-1_3\">one more trick: reformatting </h3>
<div class=\"outline-text-3\" id=\"text-1_3\">


<p>
Let's finish with one more trick. Sometimes, incoming mail is formatted
quite <i>badly</i>; in particular, the new lines are too long for comfortable
reading. From the WL-mailing list, here's a trick to deal with that:
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">filladapt</span>)

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">from a WL mailing list post by Per b. Sederber
</span><span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">Re-fill messages that arrive poorly formatted
</span>(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">wl-summary-refill-message</span> (all)
  (interactive <span class=\"org-string\">\"P\"</span>)
  (<span class=\"org-keyword\">if</span> (and wl-message-buffer (get-buffer-window wl-message-buffer))
      (<span class=\"org-keyword\">progn</span>
        (wl-summary-toggle-disp-msg 'on)
        (<span class=\"org-keyword\">save-excursion</span>
          (set-buffer wl-message-buffer)
          (goto-char (point-min))
          (re-search-forward <span class=\"org-string\">\"^$\"</span>)
          (<span class=\"org-keyword\">while</span> (or (looking-at <span class=\"org-string\">\"^\\\\[[1-9]\"</span>) (looking-at <span class=\"org-string\">\"^$\"</span>))
            (forward-line 1))
          (<span class=\"org-keyword\">let*</span> ((buffer-read-only nil)
                 (find (<span class=\"org-keyword\">lambda</span> (regexp)
                         (<span class=\"org-keyword\">save-excursion</span>
                           (<span class=\"org-keyword\">if</span> (re-search-forward regexp nil t)
                               (match-beginning 0)
                             (point-max)))))
                 (start (point))
                 (end (<span class=\"org-keyword\">if</span> all
                          (point-max)
                        (min (funcall find <span class=\"org-string\">\"^[</span><span class=\"org-string\"><span class=\"org-negation-char\">^</span></span><span class=\"org-string\">&gt;\\n]* wrote:[ \\n]+\"</span>)
                             (funcall find <span class=\"org-string\">\"^&gt;&gt;&gt;&gt;&gt;\"</span>)
                             (funcall find <span class=\"org-string\">\"^ *&gt;.*\\n *&gt;\"</span>)
                             (funcall find <span class=\"org-string\">\"^-----Original Message-----\"</span>)))))
            (<span class=\"org-keyword\">save-restriction</span>
              (narrow-to-region start end)
              (filladapt-mode 1)
              (fill-region (point-min) (point-max)))))
        (message <span class=\"org-string\">\"Message re-filled\"</span>))
    (message <span class=\"org-string\">\"No message to re-fill\"</span>)))

(define-key wl-summary-mode-map <span class=\"org-string\">\"\\M-q\"</span> 'wl-summary-refill-message)
</pre>




<p>
Now, you can refill your messages with <code>M-q</code> when in the Summary.
</p>
<p>
If you have any other nifty WL-tricks that could be useful for others, please
share them in the comments, thanks!
</p></div>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-246570950774488454?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/246570950774488454/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=246570950774488454") (title . "15 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/246570950774488454"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/246570950774488454"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/02/i-have-been-using-wanderlust-e-mail.html") (title . "wanderlust iii"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "15"))) ("dealing with many buffers: ibuffer" "<div class=\"outline-2\" id=\"outline-container-1\"><div class=\"outline-text-2\" id=\"text-1\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s1600-h/Screenshot-emacs%40cthulhu.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s320/Screenshot-emacs%40cthulhu.png\" /></a></div><br />
If you are like me, you'll open a <i>lot</i> of buffers in <code>emacs</code>. There may be a couple of buffers with source code, a few for e-mail. <code>org-mode</code> will open buffers for all your agenda files. Then, maybe an info page, a few ERC-channels, a couple of special emacs buffers such as <code>**Messages**</code> and <code>**scratch**</code>. So, in a moderately busy emacs session there may 30-40 buffers open, and after a day or so there can be many more.<br />
<br />
With so many buffers, it can be hard to quickly find the one you are looking for - and clearly a one-tab-per-buffer (like Firefox uses) would not work very well either.<br />
<br />
So, what can we do instead? Here, on <code>emacs-fu</code>, we discussed this a couple of<br />
times already:<br />
<br />
<ul><li>using <a href=\"http://emacs-fu.blogspot.com/2009/02/switching-buffers.html\">ido-mode</a>, you can quickly switch to buffers by typing a subset of<br />
their name<br />
</li>
<li>using <a href=\"http://emacs-fu.blogspot.com/2009/07/stepping-through-your-window.html\">elscreen</a> to step through buffer configurations (this comes close to a<br />
workable tab-like solution)<br />
</li>
</ul><br />
These are really useful tools. What's still missing though, is a way to get an overview of all buffers. For that, <code>emacs</code> provide <code>buffer-menu</code>, normally bound to <code>C-x C-b</code>. It lists all your buffers, and you can interact with them in a way similar to <code>dired</code>, e.g. you can switch to a buffer by moving the point (cursor) to the buffer and pressing <code>Return</code>. Or you mark buffers for deletion by pressing <code>d</code> when point is on the buffer, and then press <code>x</code> to kill them all.<br />
<br />
Very useful. But if you really have a <i>lot</i> of buffers, just having a long list of them may still be a bit hard to deal with. For that, there is <code>ibuffer</code>, which allows you to put your buffers in different categories -- which can even overlap. Emacs ships <code>ibuffer</code> since version 22, so you'll probably already have it.<br />
<br />
Using a setup like the following, you can put your buffers in categories; each buffer is shown only once (apparently, the first match), and you can match on <code>mode</code> (the Emacs-mode of the buffer), <code>name</code> (the buffer name), <code>filename</code> (the full path to the file being visited, if any), and a couple of others (see <a href=\"http://www.emacswiki.org/emacs/IbufferMode\">EmacsWiki</a>).<br />
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">ibuffer</span>)
(<span class=\"org-keyword\">setq</span> ibuffer-saved-filter-groups
(quote ((<span class=\"org-string\">\"default\"</span>
(<span class=\"org-string\">\"Org\"</span> <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">all org-related buffers
</span>              (mode . org-mode))
(<span class=\"org-string\">\"Mail\"</span>
(or  <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">mail-related buffers
</span>               (mode . message-mode)
(mode . mail-mode)
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">etc.; all your mail related modes
</span>               ))
(<span class=\"org-string\">\"MyProject1\"</span>
(filename . <span class=\"org-string\">\"src/myproject1/\"</span>))
(<span class=\"org-string\">\"MyProject2\"</span>
(filename . <span class=\"org-string\">\"src/myproject2/\"</span>))
(<span class=\"org-string\">\"Programming\"</span> <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">prog stuff not already in MyProjectX
</span>              (or
(mode . c-mode)
(mode . perl-mode)
(mode . python-mode)
(mode . emacs-lisp-mode)
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">etc
</span>                ))
(<span class=\"org-string\">\"ERC\"</span>   (mode . erc-mode))))))
(<span class=\"org-keyword\">add-hook</span> 'ibuffer-mode-hook
(<span class=\"org-keyword\">lambda</span> ()
(ibuffer-switch-to-saved-filter-groups <span class=\"org-string\">\"default\"</span>)))
</pre>If you like <code>ibuffer</code>, you can even override the <code>buffer-menu</code> key binding for<br />
it:<br />
<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-x C-b\"</span>) 'ibuffer)
</pre>As with <code>buffer-menu</code>, you can do various funky things with those buffers, and also filter them further; see the documentation. I am mostly using it for its buffer-navigational qualities, and it's good at that.</div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6216475401649621541?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/6216475401649621541/comments/default" (19326 10495) new 20 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-6216475401649621541") (published nil "2010-02-19T07:53:00.003+02:00") (updated nil "2010-02-19T08:00:31.368+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "dealing with many buffers: ibuffer") (content ((type . "html")) "<div class=\"outline-2\" id=\"outline-container-1\"><div class=\"outline-text-2\" id=\"text-1\"><div class=\"separator\" style=\"clear: both; text-align: center;\"><a href=\"http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s1600-h/Screenshot-emacs%40cthulhu.png\" imageanchor=\"1\" style=\"clear: right; float: right; margin-bottom: 1em; margin-left: 1em;\"><img border=\"0\" src=\"http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s320/Screenshot-emacs%40cthulhu.png\" /></a></div><br />
If you are like me, you'll open a <i>lot</i> of buffers in <code>emacs</code>. There may be a couple of buffers with source code, a few for e-mail. <code>org-mode</code> will open buffers for all your agenda files. Then, maybe an info page, a few ERC-channels, a couple of special emacs buffers such as <code>**Messages**</code> and <code>**scratch**</code>. So, in a moderately busy emacs session there may 30-40 buffers open, and after a day or so there can be many more.<br />
<br />
With so many buffers, it can be hard to quickly find the one you are looking for - and clearly a one-tab-per-buffer (like Firefox uses) would not work very well either.<br />
<br />
So, what can we do instead? Here, on <code>emacs-fu</code>, we discussed this a couple of<br />
times already:<br />
<br />
<ul><li>using <a href=\"http://emacs-fu.blogspot.com/2009/02/switching-buffers.html\">ido-mode</a>, you can quickly switch to buffers by typing a subset of<br />
their name<br />
</li>
<li>using <a href=\"http://emacs-fu.blogspot.com/2009/07/stepping-through-your-window.html\">elscreen</a> to step through buffer configurations (this comes close to a<br />
workable tab-like solution)<br />
</li>
</ul><br />
These are really useful tools. What's still missing though, is a way to get an overview of all buffers. For that, <code>emacs</code> provide <code>buffer-menu</code>, normally bound to <code>C-x C-b</code>. It lists all your buffers, and you can interact with them in a way similar to <code>dired</code>, e.g. you can switch to a buffer by moving the point (cursor) to the buffer and pressing <code>Return</code>. Or you mark buffers for deletion by pressing <code>d</code> when point is on the buffer, and then press <code>x</code> to kill them all.<br />
<br />
Very useful. But if you really have a <i>lot</i> of buffers, just having a long list of them may still be a bit hard to deal with. For that, there is <code>ibuffer</code>, which allows you to put your buffers in different categories -- which can even overlap. Emacs ships <code>ibuffer</code> since version 22, so you'll probably already have it.<br />
<br />
Using a setup like the following, you can put your buffers in categories; each buffer is shown only once (apparently, the first match), and you can match on <code>mode</code> (the Emacs-mode of the buffer), <code>name</code> (the buffer name), <code>filename</code> (the full path to the file being visited, if any), and a couple of others (see <a href=\"http://www.emacswiki.org/emacs/IbufferMode\">EmacsWiki</a>).<br />
<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">ibuffer</span>) 
(<span class=\"org-keyword\">setq</span> ibuffer-saved-filter-groups
  (quote ((<span class=\"org-string\">\"default\"</span>      
            (<span class=\"org-string\">\"Org\"</span> <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">all org-related buffers
</span>              (mode . org-mode))  
            (<span class=\"org-string\">\"Mail\"</span>
              (or  <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">mail-related buffers
</span>               (mode . message-mode)
               (mode . mail-mode)
               <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">etc.; all your mail related modes
</span>               ))
            (<span class=\"org-string\">\"MyProject1\"</span>
              (filename . <span class=\"org-string\">\"src/myproject1/\"</span>))
            (<span class=\"org-string\">\"MyProject2\"</span>
              (filename . <span class=\"org-string\">\"src/myproject2/\"</span>))
            (<span class=\"org-string\">\"Programming\"</span> <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">prog stuff not already in MyProjectX
</span>              (or
                (mode . c-mode)
                (mode . perl-mode)
                (mode . python-mode)
                (mode . emacs-lisp-mode)
                <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">etc
</span>                )) 
            (<span class=\"org-string\">\"ERC\"</span>   (mode . erc-mode))))))

(<span class=\"org-keyword\">add-hook</span> 'ibuffer-mode-hook
  (<span class=\"org-keyword\">lambda</span> ()
    (ibuffer-switch-to-saved-filter-groups <span class=\"org-string\">\"default\"</span>)))
</pre>If you like <code>ibuffer</code>, you can even override the <code>buffer-menu</code> key binding for<br />
it:<br />
<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-x C-b\"</span>) 'ibuffer)
</pre>As with <code>buffer-menu</code>, you can do various funky things with those buffers, and also filter them further; see the documentation. I am mostly using it for its buffer-navigational qualities, and it's good at that.</div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-6216475401649621541?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/6216475401649621541/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=6216475401649621541") (title . "7 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6216475401649621541"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/6216475401649621541"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/02/dealing-with-many-buffers-ibuffer.html") (title . "dealing with many buffers: ibuffer"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://1.bp.blogspot.com/_kGFGcbwevHE/S34nHxJF0kI/AAAAAAAAAe8/XyQF9LWUTUw/s72-c/Screenshot-emacs%40cthulhu.png") (height . "72") (width . "72"))) (thr:total nil "7"))) ("interactive replacement" "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\"><br />
<br />
<p>I recently found an interesting little package called <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3377\">iedit.el</a>, which allows<br />
you to interactive replacements on multiple strings at the same time. That is,<br />
as you do one replace, you can see how all the same matches being replaced as<br />
you type. It's hard to explain in words, you just have to try it out.<br />
</p><p>So, how to install this package?<br />
</p><ul><li>First, download the package (see the link above)</li>
<li>Put it in a directory where <code>emacs</code> can find it; for example,<br />
<code>~/.emacs.d/elisp</code>. If you haven't done so already, you can tell <code>emacs</code> to look in that directory by adding to your <code>.emacs</code>:<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> load-path (cons <span class=\"org-string\">\"~/emacs.d/elisp/\"</span> load-path))
</pre></li>
<li>Then, tell emacs to load this specific module; you can add<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">iedit</span>)
</pre>to your <code>.emacs</code> to load it  (alternatively, you could use the <a href=\"http://www.gnu.org/software/emacs/elisp/html_node/Autoload.html\">autoload facility)</a><br />
</li>
<li>then, define a key binding for this:<br />
<pre class=\"src src-emacs-lisp\">(define-key global-map (kbd <span class=\"org-string\">\"C-;\"</span>) 'iedit-mode)
</pre></li>
<li>Now, search for some strings that appears multiple times in your buffer, select it,<br />
press <code>C-;</code> (<code>Ctrl+;</code>), and watch how all other matching strings are<br />
changing at the same time.</li>
</ul><p>Very nice.<br />
</p></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1562631001441862325?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/1562631001441862325/comments/default" (19312 3759) new 21 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-1562631001441862325") (published nil "2010-02-08T00:44:00.002+02:00") (updated nil "2010-02-08T15:16:31.494+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "interactive replacement") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\"><br />
<br />
<p>I recently found an interesting little package called <a href=\"http://permalink.gmane.org/gmane.emacs.sources/3377\">iedit.el</a>, which allows<br />
you to interactive replacements on multiple strings at the same time. That is,<br />
as you do one replace, you can see how all the same matches being replaced as<br />
you type. It's hard to explain in words, you just have to try it out.<br />
</p><p>So, how to install this package?<br />
</p><ul><li>First, download the package (see the link above)</li>
<li>Put it in a directory where <code>emacs</code> can find it; for example,<br />
<code>~/.emacs.d/elisp</code>. If you haven't done so already, you can tell <code>emacs</code> to look in that directory by adding to your <code>.emacs</code>:<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> load-path (cons <span class=\"org-string\">\"~/emacs.d/elisp/\"</span> load-path))
</pre></li>
<li>Then, tell emacs to load this specific module; you can add<br />
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">require</span> '<span class=\"org-constant\">iedit</span>)
</pre>to your <code>.emacs</code> to load it  (alternatively, you could use the <a href=\"http://www.gnu.org/software/emacs/elisp/html_node/Autoload.html\">autoload facility)</a><br />
</li>
<li>then, define a key binding for this:<br />
<pre class=\"src src-emacs-lisp\">(define-key global-map (kbd <span class=\"org-string\">\"C-;\"</span>) 'iedit-mode)
</pre></li>
<li>Now, search for some strings that appears multiple times in your buffer, select it,<br />
press <code>C-;</code> (<code>Ctrl+;</code>), and watch how all other matching strings are<br />
changing at the same time.</li>
</ul><p>Very nice.<br />
</p></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1562631001441862325?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/1562631001441862325/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=1562631001441862325") (title . "10 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1562631001441862325"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1562631001441862325"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/02/interactive-replacement.html") (title . "interactive replacement"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "10"))) ("duplicating lines and commenting them" "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\"><p>Someone on the <i>Emacs Help</i> mailing list asked for an easy way to duplicate a line<br />
and, optionally, comment-out the first one.<br />
</p><p>Let's first look at simple duplication of a line. This is a common operation,<br />
and <code>vi</code>-users might use something like <code>Yp</code> for that. In emacs, one way to do<br />
this is by typing <code>C-a C-k C-k C-y C-y</code>, which is actually not as bizarre as<br />
it looks if you try it. When using <i>slick copy</i>, as explained <a href=\"http://emacs-fu.blogspot.com/2009/11/copying-lines-without-selecting-them.html\">in another post</a>,<br />
it's as easy as <code>M-w C-n C-y</code>; and of course it's easy to define a shorter key<br />
binding.<br />
<br />
</p><pre class=\"src src-text\">repeat after me
repeat after me
</pre><p>However, neither of these methods works correctly when you're on the last line<br />
of the buffer (by default at least). Also, it puts the point (cursor) <i>below</i><br />
the duplicated line, while I'd like to put it at the start of it. It seems we<br />
need something a little smarter.<br />
</p><p>While we're at it, let's also consider the second question: commenting-out the<br />
first line of the duplicates. This is a quite common thing to do when writing<br />
programs or configuration files; you want to try the effect of a small<br />
variation of a line, but want to keep the original so it can be restored when<br />
the variation turns out not to be as good as expected.<br />
<br />
</p><pre class=\"src src-c\"><span class=\"org-comment-delimiter\">/* </span><span class=\"org-comment\">for (;;) fork (); </span><span class=\"org-comment-delimiter\">*/</span>
<span class=\"org-keyword\">for</span> (;;) fork ();
</pre><p>I hacked up something quickly to solve both questions, and it has evolved a<br />
little bit since &ndash; to answer both of the questions. The bit of weirdness in<br />
the end is because of the special case of the last line in a buffer. It<br />
defines key bindings <code>C-c y</code> for duplicating a line, and <code>C-c c</code> for<br />
duplicating + commenting &ndash; but of course you can change those.<br />
<br />
</p><pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">djcb-duplicate-line</span> (<span class=\"org-type\">&amp;optional</span> commentfirst)
<span class=\"org-doc\">\"comment line at point; if COMMENTFIRST is non-nil, comment the original\"</span>
(interactive)
(beginning-of-line)
(push-mark)
(end-of-line)
(<span class=\"org-keyword\">let</span> ((str (buffer-substring (region-beginning) (region-end))))
(<span class=\"org-keyword\">when</span> commentfirst
(comment-region (region-beginning) (region-end)))
(insert-string
(concat (<span class=\"org-keyword\">if</span> (= 0 (forward-line 1)) <span class=\"org-string\">\"\"</span> <span class=\"org-string\">\"\\n\"</span>) str <span class=\"org-string\">\"\\n\"</span>))
(forward-line -1)))
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">or choose some better bindings....
</span>
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">duplicate a line
</span>(global-set-key (kbd <span class=\"org-string\">\"C-c y\"</span>) 'djcb-duplicate-line)
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">duplicate a line and comment the first
</span>(global-set-key (kbd <span class=\"org-string\">\"C-c c\"</span>) (<span class=\"org-keyword\">lambda</span>()(interactive)(djcb-duplicate-line t)))
</pre></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-923434516280360941?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/923434516280360941/comments/default" (19288 53971) new 22 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-923434516280360941") (published nil "2010-01-21T21:37:00.003+02:00") (updated nil "2010-01-22T00:18:59.110+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "duplicating lines and commenting them") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\"><p>Someone on the <i>Emacs Help</i> mailing list asked for an easy way to duplicate a line<br />
and, optionally, comment-out the first one.<br />
</p><p>Let's first look at simple duplication of a line. This is a common operation,<br />
and <code>vi</code>-users might use something like <code>Yp</code> for that. In emacs, one way to do<br />
this is by typing <code>C-a C-k C-k C-y C-y</code>, which is actually not as bizarre as<br />
it looks if you try it. When using <i>slick copy</i>, as explained <a href=\"http://emacs-fu.blogspot.com/2009/11/copying-lines-without-selecting-them.html\">in another post</a>,<br />
it's as easy as <code>M-w C-n C-y</code>; and of course it's easy to define a shorter key<br />
binding.<br />
<br />
</p><pre class=\"src src-text\">repeat after me
repeat after me
</pre><p>However, neither of these methods works correctly when you're on the last line<br />
of the buffer (by default at least). Also, it puts the point (cursor) <i>below</i><br />
the duplicated line, while I'd like to put it at the start of it. It seems we<br />
need something a little smarter.<br />
</p><p>While we're at it, let's also consider the second question: commenting-out the<br />
first line of the duplicates. This is a quite common thing to do when writing<br />
programs or configuration files; you want to try the effect of a small<br />
variation of a line, but want to keep the original so it can be restored when<br />
the variation turns out not to be as good as expected.<br />
<br />
</p><pre class=\"src src-c\"><span class=\"org-comment-delimiter\">/* </span><span class=\"org-comment\">for (;;) fork (); </span><span class=\"org-comment-delimiter\">*/</span>
<span class=\"org-keyword\">for</span> (;;) fork ();
</pre><p>I hacked up something quickly to solve both questions, and it has evolved a<br />
little bit since &ndash; to answer both of the questions. The bit of weirdness in<br />
the end is because of the special case of the last line in a buffer. It<br />
defines key bindings <code>C-c y</code> for duplicating a line, and <code>C-c c</code> for<br />
duplicating + commenting &ndash; but of course you can change those.<br />
<br />
</p><pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">defun</span> <span class=\"org-function-name\">djcb-duplicate-line</span> (<span class=\"org-type\">&amp;optional</span> commentfirst)
  <span class=\"org-doc\">\"comment line at point; if COMMENTFIRST is non-nil, comment the original\"</span> 
  (interactive)
  (beginning-of-line)
  (push-mark)
  (end-of-line)
  (<span class=\"org-keyword\">let</span> ((str (buffer-substring (region-beginning) (region-end))))
    (<span class=\"org-keyword\">when</span> commentfirst
    (comment-region (region-beginning) (region-end)))
    (insert-string
      (concat (<span class=\"org-keyword\">if</span> (= 0 (forward-line 1)) <span class=\"org-string\">\"\"</span> <span class=\"org-string\">\"\\n\"</span>) str <span class=\"org-string\">\"\\n\"</span>))
    (forward-line -1)))

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">or choose some better bindings....
</span>
<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">duplicate a line
</span>(global-set-key (kbd <span class=\"org-string\">\"C-c y\"</span>) 'djcb-duplicate-line)

<span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">duplicate a line and comment the first
</span>(global-set-key (kbd <span class=\"org-string\">\"C-c c\"</span>) (<span class=\"org-keyword\">lambda</span>()(interactive)(djcb-duplicate-line t)))
</pre></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-923434516280360941?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/923434516280360941/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=923434516280360941") (title . "7 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/923434516280360941"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/923434516280360941"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/01/duplicating-lines-and-commenting-them.html") (title . "duplicating lines and commenting them"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "7"))) ("rectangles and cua" "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\">  <p>CUA-mode is a minor-mode that enables the use of <code>Ctrl-X/C/V</code> for cut/copy/paste, as is customary in many computer programs. Of course, it's a bit different in emacs, as it predates CUA and all of those programs. With esp. <code>Ctrl-X</code> (<code>C-x</code>) being in heavy use as a prefix-key already, it's unlikely to change. </p><p>CUA-mode has a clever trick to solve that problem &ndash; <code>C-x</code> for <i>cut</i> only works when a selection is active, and when no other key is pressed shortly. Otherwise, <code>C-x</code> behaves as usual. This works quite nicely, but personally, I don't use it, as I already have the Emacs key bindings in my muscle memory. Still, it can be useful for people migrating from other CUA-based editors. See e.g. <a href=\"http://www.emacswiki.org/emacs/CuaMode\">CuaMode</a> for more information. </p><p> However, apart from the <code>C-x</code>-trick, CUA also has some nice functionality for <i>rectangular selections</i>. These are sometimes quite useful, and during emacs-fu's prehistory there was already an <a href=\"http://emacs-fu.blogspot.com/2008/12/working-with-rectangular-selections.html\">article about it</a>. The method there works, but with CUA, it is much easier. </p><p>So, let's turn it on; put the following in your <code>.emacs</code>: </p><pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> cua-enable-cua-keys nil) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">only for rectangles
</span>(cua-mode t)
</pre><p>Now, just put your cursor anywhere, and press <code>C-RET</code> (Ctrl + Enter). You have now started a rectangular selection! There rest is pretty straightforward, you can cut, copy and paste with the normal Emacs key bindings.. </p><p>I could go into more detail, but the best way is to see it in action in this wonderful <a href=\"http://www.vimeo.com/1168225?pg=embed&amp;sec=1168225\">screen cast</a> by Mark Mansour. I especially like the way you can add numbered lists. </p></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5147188348017517901?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/5147188348017517901/comments/default" (19288 45293) new 23 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-5147188348017517901") (published nil "2010-01-16T18:54:00.003+02:00") (updated nil "2010-01-21T21:54:21.055+02:00") (title ((type . "text")) "rectangles and cua") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\"><div class=\"outline-text-2\" id=\"text-1\">  <p>CUA-mode is a minor-mode that enables the use of <code>Ctrl-X/C/V</code> for cut/copy/paste, as is customary in many computer programs. Of course, it's a bit different in emacs, as it predates CUA and all of those programs. With esp. <code>Ctrl-X</code> (<code>C-x</code>) being in heavy use as a prefix-key already, it's unlikely to change. </p><p>CUA-mode has a clever trick to solve that problem &ndash; <code>C-x</code> for <i>cut</i> only works when a selection is active, and when no other key is pressed shortly. Otherwise, <code>C-x</code> behaves as usual. This works quite nicely, but personally, I don't use it, as I already have the Emacs key bindings in my muscle memory. Still, it can be useful for people migrating from other CUA-based editors. See e.g. <a href=\"http://www.emacswiki.org/emacs/CuaMode\">CuaMode</a> for more information. </p><p> However, apart from the <code>C-x</code>-trick, CUA also has some nice functionality for <i>rectangular selections</i>. These are sometimes quite useful, and during emacs-fu's prehistory there was already an <a href=\"http://emacs-fu.blogspot.com/2008/12/working-with-rectangular-selections.html\">article about it</a>. The method there works, but with CUA, it is much easier. </p><p>So, let's turn it on; put the following in your <code>.emacs</code>: </p><pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> cua-enable-cua-keys nil) <span class=\"org-comment-delimiter\">;; </span><span class=\"org-comment\">only for rectangles
</span>(cua-mode t)
</pre><p>Now, just put your cursor anywhere, and press <code>C-RET</code> (Ctrl + Enter). You have now started a rectangular selection! There rest is pretty straightforward, you can cut, copy and paste with the normal Emacs key bindings.. </p><p>I could go into more detail, but the best way is to see it in action in this wonderful <a href=\"http://www.vimeo.com/1168225?pg=embed&amp;sec=1168225\">screen cast</a> by Mark Mansour. I especially like the way you can add numbered lists. </p></div></div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-5147188348017517901?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/5147188348017517901/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=5147188348017517901") (title . "5 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5147188348017517901"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/5147188348017517901"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2010/01/rectangles-and-cua.html") (title . "rectangles and cua"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "5"))) ("automatically checking your spelling" "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s1600-h/flyspell.png\"><img style=\"float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 400px; height: 194px;\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s400/flyspell.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5421046926127336450\" /></a>
<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
When I'm typing fast, it's easy to make spelling mistakes (as you may have
noticed reading <a href=\"http://emacs-fu.blogspot.com\">Emacs-Fu</a>). It's not so much that I don't <i>know</i> how to write
things, but sometimes there seems to be a bit of a disconnect between brain
and fingers.
</p>
<p>
One tool that helps me to make fewer mistakes is <i>automatic spelling checking</i>, and in particular <i>on-the-fly</i> spelling checking. Spell-checking in
emacs is taken care of by the <code>ispell</code>-package.  Traditionally, this was a way
to interface emacs with the <code>ispell</code>-program on Unix, but nowadays it's often
used with other programs, such as <code>aspell</code>.
</p>
<p>
<a href=\"http://aspell.net/\">aspell</a> is GNU's intended replacement for <code>ispell</code>, and has been for a long
time. In the meantime, other spelling checkers have come up; in the Free
Software world, the most prominent one is probably <a href=\"http://hunspell.sourceforge.net/\">hunspell</a>, which is used by
e.g. Mozilla and OpenOffice. As I said, Emacs supports all of those; I'm using
<code>aspell</code>, which works well for me. To use <code>aspell</code> for spelling-checking, I
have the following in my <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> ispell-program-name <span class=\"org-string\">\"aspell\"</span>
ispell-extra-args '(<span class=\"org-string\">\"--sug-mode=ultra\"</span>))
</pre>
<p>
Please consult the <code>aspell</code> documentation for the details.
</p>
<p>
You can spell-check your text with <code>ispell-buffer</code> and friends, which are also
available through the menu (<code>Tools/Spell Checking/...</code>). This works fine, but
it makes spelling checking a separate step you have to go through and you may
forget. So, I like to do the spelling-checking <i>on-the-fly</i>, that is, while I
am typing. This can be done using <code>flyspell-mode</code> (you can also use
<code>flyspell-prog-mode</code>, to do spell checking inside comments in computer
programs, but I find that a bit over the top).
</p>
<p>
When <code>flyspell-mode</code> is enabled, it will mark
<font color=\"red\"><u>misspelt</u></font>
eh misspelled words by painting them in a different color while you are typing --
the common way many word processing programs do it. A common way to enable
<code>flyspell-mode</code> is to put it the the <code>mode-hook</code> for the modes where you want
to use it. For example, to enable <code>flyspell-mode</code> for all your <code>org-mode</code>
buffers, you can add something like the following to your <code>.emacs</code>:
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">add-hook</span> 'org-mode-hook
(<span class=\"org-keyword\">lambda</span>()
(flyspell-mode 1)))
</pre>
<p>
Note, you can use the middle mouse button to get alternatives for a misspelled
word.
</p>
<p>
By default, it uses the English dictionary, but it's easy to switch to another
using <code>M-x ispell-change-dictionary</code>. To make it easier, I have defined the
<code>C-c N</code> key binding to activate Dutch-language (\"nederlands\") spelling
checking, and update the buffer.
</p>
<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-c N\"</span>)
(<span class=\"org-keyword\">lambda</span>()(interactive)
(ispell-change-dictionary <span class=\"org-string\">\"nederlands\"</span>)
(flyspell-buffer)))
</pre>
<p>
Now, there's another category of mistakes &ndash; <i>their-they're-there</i>, <i>its-it's</i>
or <i>to-too-two</i> that require a spelling checker that's a bit smarter. There
are some free implementations in OpenOffice and Abiword; it'd be interesting
to see if those could be integrated with emacs as well.
</p>
<p>
Now, laugh about the sweet irony of the spelling errors that I failed to
notice :)
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1826706243483115857?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/1826706243483115857/comments/default" (19260 42302) new 24 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-1826706243483115857") (published nil "2009-12-30T17:09:00.002+02:00") (updated nil "2009-12-31T15:21:02.241+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (title ((type . "text")) "automatically checking your spelling") (content ((type . "html")) "<a onblur=\"try {parent.deselectBloggerImageGracefully();} catch(e) {}\" href=\"http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s1600-h/flyspell.png\"><img style=\"float:right; margin:0 0 10px 10px;cursor:pointer; cursor:hand;width: 400px; height: 194px;\" src=\"http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s400/flyspell.png\" border=\"0\" alt=\"\"id=\"BLOGGER_PHOTO_ID_5421046926127336450\" /></a>
<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">

<p>
When I'm typing fast, it's easy to make spelling mistakes (as you may have
noticed reading <a href=\"http://emacs-fu.blogspot.com\">Emacs-Fu</a>). It's not so much that I don't <i>know</i> how to write
things, but sometimes there seems to be a bit of a disconnect between brain
and fingers.
</p>
<p>
One tool that helps me to make fewer mistakes is <i>automatic spelling checking</i>, and in particular <i>on-the-fly</i> spelling checking. Spell-checking in
emacs is taken care of by the <code>ispell</code>-package.  Traditionally, this was a way
to interface emacs with the <code>ispell</code>-program on Unix, but nowadays it's often
used with other programs, such as <code>aspell</code>.
</p>
<p>
<a href=\"http://aspell.net/\">aspell</a> is GNU's intended replacement for <code>ispell</code>, and has been for a long
time. In the meantime, other spelling checkers have come up; in the Free
Software world, the most prominent one is probably <a href=\"http://hunspell.sourceforge.net/\">hunspell</a>, which is used by
e.g. Mozilla and OpenOffice. As I said, Emacs supports all of those; I'm using
<code>aspell</code>, which works well for me. To use <code>aspell</code> for spelling-checking, I
have the following in my <code>.emacs</code>:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span> ispell-program-name <span class=\"org-string\">\"aspell\"</span>
  ispell-extra-args '(<span class=\"org-string\">\"--sug-mode=ultra\"</span>))
</pre>


<p>
Please consult the <code>aspell</code> documentation for the details.
</p>
<p>
You can spell-check your text with <code>ispell-buffer</code> and friends, which are also
available through the menu (<code>Tools/Spell Checking/...</code>). This works fine, but
it makes spelling checking a separate step you have to go through and you may
forget. So, I like to do the spelling-checking <i>on-the-fly</i>, that is, while I
am typing. This can be done using <code>flyspell-mode</code> (you can also use
<code>flyspell-prog-mode</code>, to do spell checking inside comments in computer
programs, but I find that a bit over the top).
</p>
<p>
When <code>flyspell-mode</code> is enabled, it will mark
<font color=\"red\"><u>misspelt</u></font>
eh misspelled words by painting them in a different color while you are typing --
the common way many word processing programs do it. A common way to enable
<code>flyspell-mode</code> is to put it the the <code>mode-hook</code> for the modes where you want
to use it. For example, to enable <code>flyspell-mode</code> for all your <code>org-mode</code>
buffers, you can add something like the following to your <code>.emacs</code>:
</p>


<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">add-hook</span> 'org-mode-hook
  (<span class=\"org-keyword\">lambda</span>()
    (flyspell-mode 1)))
</pre>


<p>
Note, you can use the middle mouse button to get alternatives for a misspelled
word.
</p>

<p>
By default, it uses the English dictionary, but it's easy to switch to another
using <code>M-x ispell-change-dictionary</code>. To make it easier, I have defined the
<code>C-c N</code> key binding to activate Dutch-language (\"nederlands\") spelling
checking, and update the buffer.
</p>


<pre class=\"src src-emacs-lisp\">(global-set-key (kbd <span class=\"org-string\">\"C-c N\"</span>) 
  (<span class=\"org-keyword\">lambda</span>()(interactive)
    (ispell-change-dictionary <span class=\"org-string\">\"nederlands\"</span>)
    (flyspell-buffer))) 
</pre>



<p>
Now, there's another category of mistakes &ndash; <i>their-they're-there</i>, <i>its-it's</i>
or <i>to-too-two</i> that require a spelling checker that's a bit smarter. There
are some free implementations in OpenOffice and Abiword; it'd be interesting
to see if those could be integrated with emacs as well.
</p>
<p>
Now, laugh about the sweet irony of the spelling errors that I failed to
notice :)
</p></div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-1826706243483115857?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/1826706243483115857/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=1826706243483115857") (title . "8 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1826706243483115857"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/1826706243483115857"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2009/12/automatically-checking-your-spelling.html") (title . "automatically checking your spelling"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (media:thumbnail ((xmlns:media . "http://search.yahoo.com/mrss/") (url . "http://2.bp.blogspot.com/_kGFGcbwevHE/SzttdRaLDAI/AAAAAAAAAe0/qvTPwsS5toY/s72-c/flyspell.png") (height . "72") (width . "72"))) (thr:total nil "8"))) ("scrolling" "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">
<p>
Scrolling It's an integral part of just about any graphical user interface,
including emacs. However, I always found that the default way scrolling works
in emacs left something to be desired. It puts the scroll bar on the left (!),
and when scrolling around, it does not scroll smoothly, but instead it seem to
do so in bursts. But, this being emacs, we can change it!
</p>
<p>
First, the position of the scroll bar. Presumably for historical reasons,
emacs puts the scroll bar on the <i>left</i> of the window, unlike most other
programs. We can easily change that, by putting the following in <code>.emacs</code>
(or <code>~/.emacs.d/init.el</code>):
</p>
<pre class=\"src src-emacs-lisp\">(set-scroll-bar-mode 'right)
</pre>
<p>
Instead of <code>right</code>, you can also use <code>left</code>, or <code>nil</code> to hide the scroll bar
completely. You can also do this through the menu (Options / Show/Hide /
Scroll bar). Note that on X, when the cursor (point) reaches the end of the
document, the slider on the scroll bar may not be at the bottom; I understand
this is because of some disagreement between Emacs and the toolkit (GTK+ in
this case).
</p>
<p>
Now, what about the other issue, the non-smoothness when scrolling with the
cursor-keys or with <code>C-n</code>, <code>C-p</code>? Below are my settings for making scrolling a
bit smoother, and the explanation. Of course, these are just my personal
preferences.
</p>
<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span>
scroll-margin 0
scroll-conservatively 100000
scroll-preserve-screen-position 1)
</pre>
<ul>
<li>
The <code>scroll-margin</code>. This determines when scrolling should start; by
setting it to 0, emacs will start to scroll whenever you are entering the
top or bottom line of the window. You can also this to, say, 5 to let
scrolling start whenever you're getting closer than 5 lines from top or bottom
</li>
<li>
Then, <code>scroll-conservatively</code> determines how far the cursor is allowed to
be distanced from the center of the screen when scrolling start. The
default sets this to 0, which means that whenever you start scrolling, the
cursor jumps to the center of the screen. I find that quite annoying, so I
set it to some big number (the 'effective maximum' for that is
lines-in-window / 2, but you can put any bigger number there to avoid the
jumpiness)
</li>
<li>
<code>scroll-preserve-screen-position</code> tries to maintain the current screen
position when you scroll using Page-Up/Page-Down. I like that.
</li>
</ul>
<p>There are also the variables <code>scroll-up-aggressively</code> and
<code>scroll-down-aggressively</code>. Normally, they determine how far emacs will scroll
(up and down, respectively) when it does so. However, they don't make any
difference with a big <code>scroll-conservatively</code> like I am using. Still, if you
want to play with it, their values are fractions between 0.0 and 1.0
(inclusive); a value of 1 means that it will move a full screen when scrolling
starts, a value of 0.0 causes a move of only one single line.
</p>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2113402687085325239?l=emacs-fu.blogspot.com' alt='' /></div>" "http://emacs-fu.blogspot.com/feeds/2113402687085325239/comments/default" (19237 6755) new 25 nil nil ((id nil "tag:blogger.com,1999:blog-3992530807750384868.post-2113402687085325239") (published nil "2009-12-13T15:46:00.002+02:00") (updated nil "2009-12-13T18:46:27.698+02:00") (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "new"))) (category ((scheme . "http://www.blogger.com/atom/ns#") (term . "basic"))) (title ((type . "text")) "scrolling") (content ((type . "html")) "<div id=\"outline-container-1\" class=\"outline-2\">
<div class=\"outline-text-2\" id=\"text-1\">


<p>
Scrolling It's an integral part of just about any graphical user interface,
including emacs. However, I always found that the default way scrolling works
in emacs left something to be desired. It puts the scroll bar on the left (!),
and when scrolling around, it does not scroll smoothly, but instead it seem to
do so in bursts. But, this being emacs, we can change it!
</p>
<p>

First, the position of the scroll bar. Presumably for historical reasons,
emacs puts the scroll bar on the <i>left</i> of the window, unlike most other
programs. We can easily change that, by putting the following in <code>.emacs</code>
(or <code>~/.emacs.d/init.el</code>):
</p>


<pre class=\"src src-emacs-lisp\">(set-scroll-bar-mode 'right)
</pre>



<p>
Instead of <code>right</code>, you can also use <code>left</code>, or <code>nil</code> to hide the scroll bar
completely. You can also do this through the menu (Options / Show/Hide /
Scroll bar). Note that on X, when the cursor (point) reaches the end of the
document, the slider on the scroll bar may not be at the bottom; I understand
this is because of some disagreement between Emacs and the toolkit (GTK+ in
this case).
</p>
<p>
Now, what about the other issue, the non-smoothness when scrolling with the
cursor-keys or with <code>C-n</code>, <code>C-p</code>? Below are my settings for making scrolling a
bit smoother, and the explanation. Of course, these are just my personal
preferences.
</p>



<pre class=\"src src-emacs-lisp\">(<span class=\"org-keyword\">setq</span>
  scroll-margin 0                  
  scroll-conservatively 100000
  scroll-preserve-screen-position 1)
</pre>




<ul>
<li>
The <code>scroll-margin</code>. This determines when scrolling should start; by
setting it to 0, emacs will start to scroll whenever you are entering the
top or bottom line of the window. You can also this to, say, 5 to let
scrolling start whenever you're getting closer than 5 lines from top or bottom

</li>
<li>
Then, <code>scroll-conservatively</code> determines how far the cursor is allowed to
be distanced from the center of the screen when scrolling start. The
default sets this to 0, which means that whenever you start scrolling, the
cursor jumps to the center of the screen. I find that quite annoying, so I
set it to some big number (the 'effective maximum' for that is
lines-in-window / 2, but you can put any bigger number there to avoid the
jumpiness)
</li>
<li>
<code>scroll-preserve-screen-position</code> tries to maintain the current screen
position when you scroll using Page-Up/Page-Down. I like that.

</li>
</ul>

<p>There are also the variables <code>scroll-up-aggressively</code> and

<code>scroll-down-aggressively</code>. Normally, they determine how far emacs will scroll
(up and down, respectively) when it does so. However, they don't make any
difference with a big <code>scroll-conservatively</code> like I am using. Still, if you
want to play with it, their values are fractions between 0.0 and 1.0
(inclusive); a value of 1 means that it will move a full screen when scrolling
starts, a value of 0.0 causes a move of only one single line.
</p>
</div>
</div><div class=\"blogger-post-footer\"><img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/3992530807750384868-2113402687085325239?l=emacs-fu.blogspot.com' alt='' /></div>") (link ((rel . "replies") (type . "application/atom+xml") (href . "http://emacs-fu.blogspot.com/feeds/2113402687085325239/comments/default") (title . "Post Comments"))) (link ((rel . "replies") (type . "text/html") (href . "https://www.blogger.com/comment.g?blogID=3992530807750384868&postID=2113402687085325239") (title . "14 Comments"))) (link ((rel . "edit") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2113402687085325239"))) (link ((rel . "self") (type . "application/atom+xml") (href . "http://www.blogger.com/feeds/3992530807750384868/posts/default/2113402687085325239"))) (link ((rel . "alternate") (type . "text/html") (href . "http://emacs-fu.blogspot.com/2009/12/scrolling.html") (title . "scrolling"))) (author nil (name nil "djcb") (email nil "noreply@blogger.com") (gd:extendedProperty ((xmlns:gd . "http://schemas.google.com/g/2005") (name . "OpenSocialUserId") (value . "03767955735751524901")))) (thr:total nil "14"))))