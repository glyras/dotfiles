;; -*- coding: utf-8 -*-
(("good coders code, great reuse" "Peteris Krumins' blog about programming, hacking, software reuse, software ideas, computer security, google and technology." nil (19659 26084 328805) feed 0 nil nil ((title ((type . "text")) "good coders code, great reuse") (id nil "http://www.catonmat.net/feed") (updated nil "2010-10-18T15:19:41Z") (link ((href . "http://www.catonmat.net"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (subtitle ((type . "text")) "Peteris Krumins' blog about programming, hacking, software reuse, software ideas, computer security, google and technology.") (icon nil "http://www.catonmat.net/favicon.ico") (generator ((uri . "http://www.catonmat.net") (version . "v1.0")) "catonmat blog") (atom10:link ((xmlns:atom10 . "http://www.w3.org/2005/Atom") (rel . "self") (type . "application/atom+xml") (href . "http://feeds.feedburner.com/catonmat"))) (feedburner:info ((uri . "catonmat"))) (atom10:link ((xmlns:atom10 . "http://www.w3.org/2005/Atom") (rel . "hub") (href . "http://pubsubhubbub.appspot.com/"))) (feedburner:emailServiceId nil "catonmat") (feedburner:feedburnerHostname nil "http://feedburner.google.com") (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Introducing node-lazy - lazy lists for node.js") (id nil "243") (updated nil "2010-10-18T15:19:41Z") (published nil "2010-10-14T22:45:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/rx2li53pnlQ/lazy-lists-javascript-nodejs"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>I wrote an awesome node.js module for use at <a href=\"http://stackvm.com\">StackVM</a> - a module called <a href=\"http://github.com/pkrumins/node-lazy\">node-lazy</a> that does lazy list processing through events!</p>
<p>It comes really handy when you need to treat a stream of events like a list. The best use case currently is returning a lazy list from an asynchronous function, and having data pumped into it via events. In asynchronous programming you can't just return a regular list because you don't yet have data for it. The usual solution so far has been to provide a callback that gets called when the data is available. But doing it this way you lose the power of chaining functions and creating pipes, which leads to not that nice interfaces. (See the 2nd example below to see how it improved the interface in one of my modules.)</p>
<p>Check out this toy example:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Lazy</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;lazy&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">lazy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Lazy</span><span class=\"p\">;</span>
<span class=\"nx\">lazy</span>
  <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">return</span> <span class=\"nx\">item</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>
  <span class=\"p\">})</span>
  <span class=\"p\">.</span><span class=\"nx\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>
  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>
  <span class=\"p\">})</span>
  <span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
</pre>
</div>
<p>This code says that <code>lazy</code> is going to be a lazy list that filters even numbers, takes first five of them, then multiplies all of them by 2, and then calls the join function (think of join as in threads) on the final list.</p>
<p>And now you can emit <code>data</code> events with data in them at some point later,</p>
<div class=\"highlight\"><pre ><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"nx\">lazy</span><span class=\"p\">.</span><span class=\"nx\">emit</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
</pre>
</div>
<p>The output will be produced by the <code>join</code> function, which will output the expected <code>[0, 4, 8, 12, 16]</code>.</p>
<p>And here is a real-world example. Some time ago I wrote a hash database for node.js called <a href=\"http://github.com/pkrumins/node-supermarket\">node-supermarket</a> (think of key-value store except greater). Now it had a similar interface as a list, you could <code>.forEach</code> on the stored elements, <code>.filter</code> them, etc. But being asynchronous in nature it lead to the following code, littered with callbacks and temporary lists:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;supermarket&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">({</span> <span class=\"nx\">filename</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;users.db&#39;</span><span class=\"p\">,</span> <span class=\"nx\">json</span> <span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span>

<span class=\"kd\">var</span> <span class=\"nx\">users_over_20</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span>
  <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"c1\">// predicate function</span>
    <span class=\"k\">return</span> <span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span><span class=\"p\">;</span>
  <span class=\"p\">},</span>
  <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"c1\">// function that gets executed when predicate is true</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">users_over_20</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>
      <span class=\"nx\">users_over_20</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">meta</span><span class=\"p\">);</span>
  <span class=\"p\">},</span>
  <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"c1\">// done function, called when all records have been filtered</span>

    <span class=\"c1\">// now do something with users_over_20</span>
  <span class=\"p\">}</span>
<span class=\"p\">)</span>
</pre>
</div>
<p>This code selects first five users who are over 20 years old and stores them in users_over_20.</p>
<p>But now we changed the node-supermarket interface to return lazy lists, and the code became:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;supermarket&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">({</span> <span class=\"nx\">filename</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;users.db&#39;</span><span class=\"p\">,</span> <span class=\"nx\">json</span> <span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span>

<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">return</span> <span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span><span class=\"p\">;</span>
  <span class=\"p\">})</span>
  <span class=\"p\">.</span><span class=\"nx\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>
  <span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"c1\">// xs contains the first 5 users who are over 20!</span>
  <span class=\"p\">});</span>
</pre>
</div>
<p>This is so much nicer!</p>
<p>If you wish to try node-lazy just do <code>npm install lazy</code>! Alternatively, if you don't have <a href=\"http://npmjs.org/\">npm</a>, you can <code>git clone http://github.com/pkrumins/node-lazy.git</code> and set your <code>NODE_PATH</code> environment variable to point to that directory.</p>
<p>Enjoy and follow the future node-lazy developments in its github repo - <a href=\"http://github.com/pkrumins/node-lazy\">node-lazy at github</a>!</p>
<h2>Article Sponsors</h2>
<p><strong>None!</strong></p>
<p>Want to sponsor my future (or past) articles? <a href=\"http://www.catonmat.net/feedback\">Contact me</a> for prices and options!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/rx2li53pnlQ\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/lazy-lists-javascript-nodejs")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "I pushed 20 more of my projects to GitHub") (id nil "229") (updated nil "2010-09-23T08:38:08Z") (published nil "2010-09-20T07:35:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/tUT4eaQZM-8/i-pushed-20-more-of-my-projects-to-github"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2009/12/github-social-coding.gif' alt='GitHub Social Coding' class=\"post-icon\" align=\"left\">Remember my previous article \"<a href=\"http://www.catonmat.net/blog/i-pushed-30-of-my-projects-to-github/\">I pushed 30 of my projects to GitHub</a>?\" Well, I just gathered 20 more projects that I had done (or did recently) and pushed them all to <a href=\"http://github.com\">GitHub</a>.</p>
<p>Quick note on GitHub - GitHub is the best invention ever for programmers. Nothing stimulates you more than pushing more and more projects to GitHub and seeing people forking them, following them, finding and fixing bugs for you. I wouldn't be doing so much coding if there wasn't GitHub.</p>
<p>If you like my projects, I'd love if you <a href=\"http://github.com/pkrumins\">followed me on github</a>! Oh, and also on <a href=\"http://twitter.com/pkrumins\">twitter</a>! Thank you!</p>
<p>Right, so here are the new projects:</p>
<h2>node-video</h2>
<p>This is a node.js module for recording HTML5 Theora/Ogg videos. It's written in C++ and is the first class citizen of node.js, meaning that it's fully asynchronous. It uses <a href=\"http://www.theora.org/downloads/\">libtheora and libogg</a> libraries for recording.</p>
<p>I wrote this module for my <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup/\">StackVM startup</a> so that anyone could record virtual machine video screencasts. See <a href=\"http://www.youtube.com/watch?v=TWdkNO6XlFI#t=1m23s\">StackVM demo video #1</a> at around 1min 23secs, where I demo this module in action.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-video\">node-video on github</a></li>
</ul>
<h2>node-png</h2>
<p>This is another node.js module for producing PNG images from raw RGB/BGR/RGBA/BGRA buffers. It's also written in C++, is asynchronous, and uses <a href=\"http://www.libpng.org/pub/png/libpng.html\">libpng</a> to produce images. I also wrote it for StackVM. I added a concept of stacked-pngs to the library where many virtual machine screen updates get stacked together to produce the final image, but that is a topic for a separate post.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-png\">node-png on github</a></li>
</ul>
<h2>node-jpeg</h2>
<p>This is also a node.js module for producing JPEG images from raw RGB buffers. It uses <a href=\"http://www.ijg.org/\">libjpeg</a> (or <a href=\"http://libjpeg-turbo.virtualgl.org/\">libjpeg-turbo</a>, which is much faster than libjpeg), it's is written in C++ and is asynchronous.</p>
<p>This module was also written for StackVM and it will be used in cases when the client has a really slow connection. In that case the virtual machine screen updates get downsampled to quality and size that the client is able to receive.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg on GitHub</a></li>
</ul>
<h2>node-gif</h2>
<p>This is a module for node.js for producing GIF images. I like this module the most because it can be used to record what I call \"gifcasts\". Gifcasts are screencasts that get recorded to animated gifs. Here is an example gifcast that I recorded - <a href=\"http://www.catonmat.net/ftp/plurk-gifcast.gif\">A gifcast of me plurking from Windows XP</a>.</p>
<p>This module is also written in C++ and uses <a href=\"http://sourceforge.net/projects/giflib/\">giflib</a>.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-gif\">node-gif on github</a></li>
</ul>
<h2>node-image</h2>
<p>This is a module for node.js that unifies node-png, node-jpeg and node-gif. So instead of requiring all three modules, you just <code>var Image = require('image')</code> and then can do things like:</p>
<pre >
var png = Image.encodeSync('png', buffer); // or
var jpeg = Image.encodeSync('jpeg', buffer); // etc.
var gif = Image.encodeSync('gif', buffer);
</pre>
<ul><li><a href=\"http://github.com/pkrumins/node-image\">node-image on github</a></li>
</ul>
<h2>node-supermarket</h2>
<p>Node-supermarket is like a regular key-value store (hash-table), except greater. It uses node-sqlite as the underlying storage engine that gives it unprecedented stability. This library doesn't end here. The plan is to create an object store, where you can just dump the whole js objects, and then restore them back, map, filter and fold on them, etc.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-supermarket\">node-supermarket on github</a></li>
</ul>
<h2>supermarket-cart</h2>
<p>Supermarket-cart stores <a href=\"http://github.com/senchalabs/connect\">connect</a> sessions in supermarket key-value store.</p>
<ul><li><a href=\"http://github.com/pkrumins/supermarket-cart\">supermarket-cart on github</a></li>
</ul>
<h2>node-base64</h2>
<p>This ia a node.js module for doing base64 encoding/decoding. I wrote it because half a year ago when I started working on StackVM, node.js didn't have base64 encoding functions and all other modules were terribly broken for binary data. So I named this module \"base64 module <b>that actually works</b>.\"</p>
<ul><li><a href=\"http://github.com/pkrumins/node-base64\">node-base64 on github</a></li>
</ul>
<h2>nodejs-proxy</h2>
<p>This is a HTTP proxy written in node.js. It has access control and URL black lists. I wrote it for fun.</p>
<ul><li><a href=\"http://github.com/pkrumins/nodejs-proxy\">nodejs-proxy on github</a></li>
<li>Related article: <a href=\"http://www.catonmat.net/http-proxy-in-nodejs\">A HTTP Proxy Server in 20 Lines of node.js Code</a></li>
</ul>
<h2>Perl TCP Proxy</h2>
<p>This is a TCP proxy written in Perl. I wrote it as a helper program for my \"<a href=\"http://www.catonmat.net/blog/linux-socks5-proxy\">Turn any Linux computer into SOCKS5 proxy in one command</a>\" post.</p>
<ul><li><a href=\"http://github.com/pkrumins/perl-tcp-proxy\">tcp-proxy.pl on github</a></li>
</ul>
<h2>node-chess</h2>
<p>This is a my, James's and Joshua's <a href=\"http://www.catonmat.net/blog/node-js-knockout-competition\">node.js knockout</a> entry - an online chess game (half-working).</p>
<ul><li><a href=\"http://github.com/pkrumins/node-chess\">node-chess</a></li>
</ul>
<h2>catonmat.net blog engine</h2>
<p>I wrote a new catonmat.net engine in Python. I used <a href=\"http://werkzeug.pocoo.org/\">Werkzeug</a>, <a href=\"http://www.sqlalchemy.org/\">SQLAlchemy<a>, <a href=\"http://www.makotemplates.org/\">Mako</a>, <a href=\"http://pygments.org/\">Pygments</a>, <a href =\"http://memcached.org/\">Memcached</a>, <a href=\"http://www.sphinxsearch.com/\">Sphinx</a> and <a href=\"http://pypi.python.org/pypi/repoze.profile\">repoze.profile</a> to make it as awesome as it is.The design followed the \"<a href=\"http://www.catonmat.net/blog/50-ideas-for-the-new-catonmat-website/\">50 ideas for the new catonmat.net website</a>.\"</a></a></p>
<ul><li><a href=\"http://github.com/pkrumins/catonmat.net\">catonmat.net on github</a></li>
</ul>
<h2>Social Scraper</h2>
<p>This is an older project from 2007 that I found on my hard drive. It's a social media website scraper (and also some popular news site scraper). It used to scrape data from <a href=\"http://boingboing.net/\">boingboing</a>, <a href=\"http://www.delicious.com/\">del.icio.us</a>, <a href=\"http://digg.com\">digg</a>, <a href=\"http://www.flickr.com/\">flickr</a>, <a href=\"http://en.wikipedia.org/wiki/Furl\">furl</a>, <a href=\"http://reddit.com\">reddit</a>, <a href=\"http://en.wikipedia.org/wiki/Simpy\">simpy</a>, <a href=\"http://www.stumbleupon.com/\">stumbleupon</a> and <a href=\"http://www.wired.com/\">wired</a>.</p>
<ul><li><a href=\"http://github.com/pkrumins/social-scraper\">social scraper on github</a></li>
</ul>
<h2>The Little Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a>. The book is a dialogue between you and the authors about interesting examples of Scheme programs and it teaches you to think recursively.</p>
<p>If anyone asks me which book do I recommend for learning basics of Lisp, I recommend this one (and <a href=\"http://www.amazon.com/Seasoned-Schemer-Daniel-P-Friedman/dp/026256100X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964015&tag=catonmat-20&sr=1-1\">The Seasoned Schemer</a>, see below). It's very fun to read and can be read in one evening.</p>
<ul><li><a href=\"http://github.com/pkrumins/the-little-schemer\">The Little Schemer book review on github</a></li>
</ul>
<h2>The Seasoned Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Seasoned-Schemer-Daniel-P-Friedman/dp/026256100X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964015&tag=catonmat-20&sr=1-1\">The Seasoned Schemer</a>. This book continues where <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a> ended and introduces more advanced programming and Scheme concepts such as accumulators, letrec, letcc, call/cc and generators.</p>
<p>Where <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a> can be read in one evening, this book will take one whole day.</p>
<ul><li><a href=\"http://github.com/pkrumins/the-seasoned-schemer\">The Seasoned Schemer book review on github</a></li>
</ul>
<h2>The Reasoned Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Reasoned-Schemer-Daniel-P-Friedman/dp/0262562146/ref=sr_1_1?s=books&ie=UTF8&qid=1284964359&tag=catonmat-20&sr=1-1\">The Reasoned Schemer</a>. Though this is not yet a full book review. I currently only had time to go through first few chapters. It's really complicated and takes a lot of effort to understand. One of the authors is <a href=\"http://okmij.org/ftp/\">Oleg Kiselyov</a>, which instantly makes this book so conceptually difficult that it may take one full week to comprehend some of the topics.</p>
<p>Here is how I summarize this book:</p>
<blockquote><p>The goal of the book is to show the beauty of relational programming. The authors of the book believe that it is natural to extend functional programming to relational programming. They demonstrate this by extending Scheme with a few new constructs, thereby combining the benefits of both styles. This extension also captures the essence of Prolog, the most well-known logic programming language.</p>
</blockquote>
<ul><li><a href=\"http://github.com/pkrumins/the-reasoned-schemer\">The Reasoned Schemer book review on github</a></li>
</ul>
<h2>The Little MLer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Little-MLer-Matthias-Felleisen/dp/026256114X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964996&sr=1-1\">The Little MLer</a>. The Little MLer book has two goals. The first and primary goal is to teach you to think recursively about types and programs. The second goal is to expose you to two important topics concerning large programs: dealing with exceptional situations and composing program components.</p>
<p>Having learned the concept of functors in ML, I realized that various programming languages like to call all kinds of unrelated things \"functors\". So I wrote a post \"<a href=\"http://www.catonmat.net/blog/on-functors\">On Functors</a>\".</p>
<ul><li><a href=\"http://github.com/pkrumins/the-little-mler\">The Little MLer book review on github</a></li>
</ul>
<h2>More!</h2>
<p>These are not all the projects that I have pushed to GitHub since last time, but the others are not that interesting. Just for completeness, they are:</p>
<ul> <li><a href=\"http://github.com/pkrumins/php2000\">php2000</a> - written in 2000, a php routing engine via require().</li>
 <li><a href=\"http://github.com/pkrumins/webdev-template\">webdev-template</a> - a small webdev template with reset css.</li>
 <li><a href=\"http://github.com/pkrumins/node-bufferdiff\">node-bufferdiff</a> - compares two node.js buffers fast.</li>
 <li><a href=\"http://github.com/pkrumins/node-time\">node-time</a> - time functions for node.js (had forgotten about Date object).</li>
 <li><a href=\"http://github.com/pkrumins/node-jsmin\">node-jsmin</a> - javascript minification node.js module.</li>
 <li><a href=\"http://github.com/pkrumins/node-async\">node-async</a> - simplest possible asynchronous node.js C++ module (useful as an example).</li>
 <li><a href=\"http://github.com/pkrumins/rfb-protocols\">rfb-protocols</a> - implements hextile rfb decoder to RGB buffer in C++.</li>
</ul>
<p>This is actually more than 20 projects, but not all of them count. :) Anyway, hope you find some of them useful and until the next post!</p>
<p>And just another reminder, I'd love if you followed me on <a href=\"http://github.com/pkrumins\">github</a> and <a href=\"http://twitter.com/pkrumins\">twitter</a>! :)</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/tUT4eaQZM-8\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/i-pushed-20-more-of-my-projects-to-github")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Reflections on Node.js Knockout Competition") (id nil "237") (updated nil "2010-09-02T07:12:37Z") (published nil "2010-08-30T18:50:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/7CGefS4mtHY/node-js-knockout-competition"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>So I participated in the 48 hour <a href=\"http://nodeknockout.com/\">Node.js Knockout</a> competition together with <a href=\"http://substack.net\">James Halliday</a> and <a href=\"http://jesusabdullah.github.com/\">Joshua Holbrook</a>. Our team was called <a href=\"http://nodeknockout.com/teams/dark-knights\">Dark Knights</a> and we created an online chess application called <a href=\"http://dark-knights.no.de\">Node Chess</a>.</p>
<p>We didn't quite manage to completely finish the game and it has several bugs, like the turns don't alternate and the king can be captured, but it's crazy awesome anyway. If both players follow the rules, it all works correctly. Castling works, pawn promotion works, capture en-passant also. <a href=\"http://dark-knights.no.de\">Try it</a> and if you find it awesome, please <a href=\"http://nodeknockout.com/teams/dark-knights#your_vote\">vote</a>! Oh, and it works only in Chrome. We were under time pressure and at one point it stopped working under Firefox and we did not get to fixing it.</p>
<p>Here is how the game looks,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/reflections-nodeko/node-chess.gif\"><br>
<small>A chess game between pkrumins and someone. King's Indian Defence.</small></p>
</div>
<p>Joshua did all the awesome vector graphics work. I did the chess engine work, and James used his amazing <a href=\"http://github.com/substack/dnode\">dnode node.js module</a> to blend client and server code together. James has actually redefined how web development happens. Instead of writing server code and client code, as we are so used to, with his dnode framework it's now possible to use the same code both server and client side! Much less hustle and purely ingenious!</p>
<p>Here is the same game in perspective view, the highlighted squares are the available moves,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/reflections-nodeko/node-chess-perspective.gif\"><br>
<small>The same game in perspective view.</small></p>
</div>
<p>And the moves are animated, too! The pawns shoot the opponent pieces and the queen stabs them. <a href=\"http://dark-knights.no.de/\">Try it</a>!</p>
<p>Right, so my reflections on the competition.</p>
<p>It was well organized, and we were sent access to a <a href=\"http://www.joyent.com/\">Joyent</a> deployment server and a <a href=\"http://heroku.com/\">Heroku</a> server early on together with instructions. It turned out that Heroku's didn't support <a href=\"http://github.com/LearnBoost/Socket.IO\">Socket.IO</a> or websockets. Win for Joyent. Pretty much everyone went with Joyent as far as I know. We had some technical difficulties at the start with deploying our code, but guys at #node.js helped us and we got our app running pretty quickly.</p>
<p>We used 3 Git repositories to push the code to, our own GitHub repositories (<a href=\"http://github.com/pkrumins/node-chess\">pkrumins</a>, <a href=\"http://github.com/substack/node-chess\">substack</a>, <a href=\"http://github.com/jesusabdullah/node-chess\">jesusabdullah</a>), then the node knockout's private repository for judges, and deployment repository on Joyent. Joyent was configured so that as you push your code to its Git repo, the hooks in it would restart the node.js service and the you'd be instantly running the latest version of your code.</p>
<p>So I'd make changes push to my GitHub repo, James would pull from me. He'd make changes, I'd pull from him, and same for Joshua. It went pretty flawless. We had like 12 merge errors total, but those were all resolved within a minute or two.</p>
<p>Now some numbers. We're actually amazed by our performance. Check out these numbers:</p>
<pre >
$ git log | grep Author | wc -l
429
</pre>
<p><strong>429 commits</strong>! Can you believe that? 429 commits in 2 days! That's 9 commits per hour on average! That is what I call hacking!</p>
<p>My commits:</p>
<pre >
$ git log | grep Author | grep Peteris | wc -l
169
</pre>
<p>I did 3.5 commits per hour on average. And funnily, James and Joshua each had 130 commits:</p>
<pre >
$ git log | grep Author | grep James | wc -l
130
$ git log | grep Author | grep Joshua | wc -l
130
</pre>
<p>That's 2.7 commits per hour on average! Amazing! But we also slept between the competition days. On the both days we did about 4 hours of clean sleep, shrinking our competition time to 40 hours. Then our average becomes <strong>10.7 commits per hour</strong>! Wowsers!</p>
<p>Here is a graph, made with <a href=\"http://raphaeljs.com/\">Raphael.js</a>, that shows our <code>git commit</code> activity by hour, starting from 3am UTC Aug 28 to 3am UTC Aug 30:</p>
<div class=\"c\"><p><img src=\"/images/reflections-nodeko/git-commit-activity.gif\"><br>
<small>Team \"Dark Knights\" git commit activity by hour.</small></p>
</div>
<p>Our peak commit intensity was at 9pm the last night, when we did 23 commits in one hour. Our team was also widely spread out. I am in Riga, Latvia, James is in Kenai, Alaska, and Joshua is in Fairbanks, Alaska. Yet we managed to keep the same schedule. I'd go to bed at noon (noon for me is 3pm UTC, see the graph above), while James and Joshua at midnight, and we'd wake up several hours later and keep hacking!</p>
<p>Total number of code lines written:</p>
<pre >
$ wc -l `find . -name '*.js' -o -name '*.html' -o -name '*.css' | \\
  egrep -v '(jquery|raphael)'`
3074 total
</pre>
<p>So we wrote 3074 lines in two days, which according to git break up into added vs. deleted as following:</p>
<pre >
$ git log --numstat | grep '^[0-9]' | \\
  egrep '(\\.js|\\.css|\\.html|jquery|raphael)' | \\
  awk '{a+=$1;d+=$2}END{print \"Added: \" a, \"Deleted: \" d}'
Added: 5210 Deleted: 2042
</pre>
<p>Hmm, 5210-2042 doesn't quite add up to 3074 but is close enough. From these 3074 lines of code non-empty were:</p>
<pre >
$ cat `find . -name '*.js' -o -name '*.html' -o -name '*.css' | \\
  egrep -v '(jquery|raphael)'` | perl -nle 'print if /\\S/' | \\
  wc -l
2659
</pre>
<p>So 2659 real lines of code in 2 days! Talk about productivity! And that's just code alone. Joshua also did 50 artworks,</p>
<pre >
$ find . -name '*.svg' -o -name '*.png' | wc -l
50
</pre>
<p>Total number of file changes:</p>
<pre >
$ git log --shortstat | grep 'files changed' | \\
  awk '{t+=$1}END{print t}'  
724
</pre>
<p>We communicated in IRC, in our #stackvm <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup/\">startup</a> channel. Here are some statistics on how much stuff went on in our IRC channel:</p>
<pre >
$ (
  grep -v '^0[012]:' '#stackvm.08-28.log';
  cat '#stackvm.08-29.log';
  grep '^0[012]' '#stackvm.08-30.log'
  ) | wc -l
5069
</pre>
<p>So 5069 events happened during the challenge. That's 105 events per hour on average. We have a special lulbot in it who tells us when we commit, for example:</p>
<pre >
05:59 &lt; lulzbot-X> Whoa Nelly! New commits to pkrumins/node-chess (master)!
05:59 &lt; lulzbot-X>     * Peteris Krumins: MoveGenerator stub
05:59 &lt; lulzbot-X>     * Peteris Krumins: abstract pieces
05:59 &lt; lulzbot-X> githubs: http://github.com/pkrumins/node-chess/tree/master
</pre>
<p>Here lulzbot informed us that I committed MoveGenerator stub and abstracted pieces in node-chess repo.</p>
<p>Out of these 5069 events, we talked this much,</p>
<pre >
$ (
  grep -v '^0[012]:' '#stackvm.08-28.log';
  cat '#stackvm.08-29.log';
  grep '^0[012]' '#stackvm.08-30.log'
  ) | egrep -i '^&lt; pkrumins|substack|jesus' | wc -l
2682
</pre>
<p>So we spoke 2682 times or 83.8 times per hour. We also asked quite a lot questions:</p>
<pre >
$ (
  grep -v '^0[012]:' '#stackvm.08-28.log';
  cat '#stackvm.08-29.log';
  grep '^0[012]' '#stackvm.08-30.log';
  ) | grep '?$' | wc -l
246
</pre>
<p>246 questions, for example (random selection):</p>
<pre >
&lt; pkrumins> wait, are we including a version of socket.io.js in dnode?
&lt; jesusabdullah> but: simplified pieces for thumbs--yea or nay?
&lt; pkrumins> is anyone working ont he problem where the opponent cant make moves?
&lt; SubStack> pkrumins did you see how I just dumped the node EventEmitter code into our lib/?
&lt; SubStack> does S create a row?
&lt; jesusabdullah> pkrumins: You fixing the board?
&lt; pkrumins> how does resizing in raphael happen?
</pre>
<p>My chess code wasn't the easiest to write and to make sure it works correctly, I wrote 52 <a href=\"http://github.com/visionmedia/expresso\">expresso</a> tests,</p>
<pre >
$ expresso 

   100% 52 tests
</pre>
<p>Without tests I would have never got that chess code right.</p>
<p>That's about it. The competition was awesome, A++ would participate again. Hope they organize node.js knockout the next year, too!</p>
<p>I hope you enjoyed my post and don't forget to <a href=\"http://nodeknockout.com/teams/dark-knights#your_vote\">vote for our project</a>! Your vote is so important to us. Thank you!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/7CGefS4mtHY\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/node-js-knockout-competition")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "StackVM Demo Video #2") (id nil "231") (updated nil "2010-08-10T10:20:30Z") (published nil "2010-08-10T07:30:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/sc4EAbRvfxE/stackvm-demo-video-two"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"c\"><p><a href=\"http://stackvm.com\"><img src=\"http://www.catonmat.net/images/stackvm.png\"></a></p>
</div>
<p>Hey everyone. We at <a href=\"http://stackvm.com\">StackVM</a> just finished recording the 2nd demo video. The 2nd video shows all the cool new features we have recently built - user login system, chatting and sharing of virtual machines by just dragging and dropping. Also this time <a href=\"http://substack.net\">James Halliday</a> joins me from Fairbanks, Alaska!</p>
<p>Here is the video #2,</p>
<div class=\"c\"><object width=\"576\" height=\"467\"><param name=\"movie\" value=\"http://www.youtube.com/v/ppXUbj0MA3E&amp;hl=en_US&amp;fs=1&amp;hd=1\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/ppXUbj0MA3E&amp;hl=en_US&amp;fs=1&amp;hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"576\" height=\"467\"></embed>
</object>
<p><small>StackVM brings virtual machines to the web. Join #stackvm on FreeNode to discuss!</small></p>
</div>
<p>If you haven't seen the first video, see my <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup\">StackVM startup announcement post</a>!</p>
<p>Also, if you wish to be the first to try StackVM when we launch, please leave your email below. We'll send you a free demo as soon as we can!</p>
<div class=\"c\"><div class=\"stackvm-form\"><form action=\"http://stackvm.com/sign-up.cgi\" method=\"POST\"><p>   <input type=\"hidden\" name=\"from\" value=\"catonmat\"><br>
   <input type=\"hidden\" name=\"back\" value=\"http://www.catonmat.net/blog/stackvm-demo-video-two\"><br>
   Your email: <input type=\"text\" name=\"email\"> <input type=\"submit\" value=\"Submit\"><br>
  </p>
</form>
</div>
</div>
<p>During the past few weeks we have also written two new node.js libraries for use at StackVM:</p>
<ul> <li><a href=\"http://github.com/pkrumins/node-gif\">node-gif</a> - for producing GIF images and animated GIFs (gifcasts).</li>
 <li><a href=\"http://github.com/pkrumins/node-image\">node-image</a> - unifies <a href=\"http://github.com/pkrumins/node-png\">node-png</a>, <a href=\"http://github.com/pkrumins/node-gif\">node-gif</a> and <a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg</a>.</li>
</ul>
<p>We did not demo gifcasts in this video but I am going to do a separate video in the next week or two showing just that. They're pretty awesome!</p>
<p>In a few weeks we'll also post the 3rd demo video. In that video we have planned to show virtual network editor that allows to network virtual machines by just dragging and dropping! Be sure to subscribe to <a href=\"http://www.catonmat.net/feed/\">catonmat's rss feed</a> and <a href=\"http://twitter.com/pkrumins\">follow me on twitter</a> to know when the video is out!</p>
<p>See you!</p>
<p>Ps. Join #stackvm on FreeNode to discuss StackVM with me and James! We're there 24/7!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/sc4EAbRvfxE\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/stackvm-demo-video-two")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Announcement: I am doing a startup - StackVM!") (id nil "226") (updated nil "2010-08-10T10:21:12Z") (published nil "2010-07-21T12:10:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/Xx1yGj-DeVo/i-am-doing-a-startup"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Hey everyone,</p>
<p>I have exceptional news - I am doing a startup together with <a href=\"http://substack.net\">James Halliday</a>!</p>
<p>I met James on FreeNode several years ago and it turned out that we had very similar ideas about doing great hacking. So we teamed up as equal co-founders to do a startup. We're on different continents but we use IRC, <a href=\"http://github.com/pkrumins/stackvm\">GitHub</a> and <a href=\"http://www.wedoist.com\">WeDoist</a> to get stuff done!</p>
<div class=\"c\"><p><a href=\"http://stackvm.com\"><img src=\"http://www.catonmat.net/images/stackvm.png\"></a></p>
</div>
<p>Check out an early demo of our software:</p>
<div class=\"c\"><object width=\"576\" height=\"447\"><param name=\"movie\" value=\"http://www.youtube.com/v/TWdkNO6XlFI&amp;hl=en_US&amp;fs=1\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/TWdkNO6XlFI&amp;hl=en_US&amp;fs=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"576\" height=\"447\"></embed>
</object>
<p><small>StackVM brings virtual machines to the web. Join #stackvm on FreeNode to discuss!</small></p>
</div>
<p>We can't present a live demo of our startup right now because we don't have that much computing power, however we'll soon be able to send out time-limited demos to several people a day. If you wish to try our software before anyone else does, fill in this form and we'll send you an invite code as soon as we have the hardware:</p>
<div class=\"c\"><div class=\"stackvm-form\"><form action=\"http://stackvm.com/sign-up.cgi\" method=\"POST\"><p>   <input type=\"hidden\" name=\"from\" value=\"catonmat\"><br>
   <input type=\"hidden\" name=\"back\" value=\"http://www.catonmat.net/blog/i-am-doing-a-startup\"><br>
   Your email: <input type=\"text\" name=\"email\"> <input type=\"submit\" value=\"Submit\"><br>
  </p>
</form>
</div>
</div>
<p>The startup we're doing is called <strong><a href=\"http://www.stackvm.com\">StackVM</a></strong>. StackVM makes virtual machines much more accessible over the web, makes them easier to use, and makes them embeddable in webpages (like putting a virtual machine in a blog post). This is just the first step that we're starting with. Next we're making networking between them very easy, just drag and drop to create any virtual network topology you wish, with firewalls, switches, etc. (fun for hacking competitions and learning networking). Then we're making what we call \"vmcasts\" - much like a screencasts, except the computation is recorded, meaning that at any point you can break into the playing vmcast and change the course of computation (and return back to it later).</p>
<p>Our plan is to host the virtual machines and our awesome software for you, so that you don't have to worry about anything. We'll make sure it all works! At the moment we're actually already at our third major iteration of the software.</p>
<p>Here are a few use cases:</p>
<ul> <li>Suppose you're selling software and you want your users to try it before they buy it. Perfect use of StackVM - put your software in the virtual machine and embed it on your products page. The potential customers can try your software before they buy it right from your website!</li>
 <li>Suppose you're an application developer and have written a program that should work cross-platform. You can easily rent 10 virtual machines with Linux, Windows, MacOS, and other operating systems and test your software. Just drag and drop it into the virtual machines, and you can test your software!</li>
 <li>Suppose you want to teach someone how to work in Perl in a series of blog posts (like I do), you can embed the terminal with a vmcast in your blog post, and everyone can follow your tutorial, and also try out the examples interactively, in a real shell!</li>
 <li>You can build a virtual honeypot network and have hackers break into it, then analyse how they did breakins. Or, you can build a huge network and learn routing and networking concepts!</li>
 <li>Suppose you want to share your work with a group of people. You can easily do it in stackvm! Just send the other people link to your VM and they can connect to it with any web browser. They'll be able to see what you're doing, comment on your work, and if you allow fix your bugs (think pair programming!)</li>
</ul>
<p>Hosting virtual machines requires a lot of infrastructure, so we plan to start collecting revenue as soon as possible with affordable paid user accounts. We're not going to do the common nonsense among startups of first building up the project for years and only then trying to figure out how to make it profitable. We're going to offer virtual machines together with an awesome interface and features to them as a monthly paid service from the day we launch. We're also going to have an open API to our software, so that you can build on top of it or customize it (for example script virtual machines to do something specific).</p>
<p>We're also testing out the idea of complete openness with this startup. It's going to be 100% open-source and 100% idea-open, meaning that anyone can read what we're up to, and run our code if they want to run stackvm on their own. So far we have shared all the code on github (<a href=\"http://github.com/pkrumins/stackvm\">my stackvm repo</a>, <a href=\"http://github.com/substack/stackvm\">James's stackvm repo</a>) and documented most of the ideas and experiments on <a href=\"http://wiki.github.com/substack/stackvm/\">stackvm github wiki</a>. </p>
<p>We're applying for YC funding later this year so that we can focus on hacking and not paperwork.</p>
<p>Now a little bit about the tech we use at StackVM. I won't go into much details right now because many of the future posts will detail the tech at StackVM.</p>
<p>At the moment StackVM is in its 3rd major iteration already and is almost entirely built on <a href=\"http://nodejs.org/\">node.js</a>. Since we're doing everything open-source, we've written a bunch of reusable node.js modules:</p>
<ul> <li><a href=\"http://github.com/substack/dnode\">dnode</a> - Simple asynchronous remote method invocation for node.js.</li>
 <li><a href=\"http://github.com/substack/node-bufferlist\">node-bufferlist</a> - Abstraction of node.js's buffers and monadic binary parsing.</li>
 <li><a href=\"http://github.com/substack/node-rfb\">node-rfb</a> - Implements the client-side of the RFB protocol that VNC uses.</li>
 <li><a href=\"http://github.com/pkrumins/node-png\">node-png</a> - Produces PNG images from RGB or RGBA values.</li>
 <li><a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg</a> - Produces JPEG images from RGB or RGBA values.</li>
 <li><a href=\"http://github.com/pkrumins/node-video\">node-video</a> - Records Theora/Ogg videos from RGB values.</li>
 <li><a href=\"http://github.com/pkrumins/node-base64\">node-base64</a> - Encodes binary data to base64 to send across websockets and ajax.</li>
 <li><a href=\"http://github.com/pkrumins/node-jsmin\">node-jsmin</a> - Minify JavaScript on the server side, before sending it to the browser.</li>
 <li><a href=\"http://github.com/pkrumins/node-bufferdiff\">node-bufferdiff</a> - A module to compare two buffers quickly.</li>
</ul>
<p>I'll keep everyone updated on the progress and technical insight into our development. If you're not yet subscribed to my posts, please do it - <a href=\"http://www.catonmat.net/feed\">catonmat rss feed</a>. Going to make this happen!</p>
<p>And if you wish to talk about our software, come join #stackvm on FreeNode!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/Xx1yGj-DeVo\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/i-am-doing-a-startup")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Three Years of Blogging") (id nil "225") (updated nil "2010-07-08T16:09:03Z") (published nil "2010-07-06T17:02:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/LD7qo8re6-c/three-years-of-blogging"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2009/07/two-years-of-blogging.jpg' alt='A Year of Blogging' class=\"post-icon\" align=\"left\">Hey everyone! Another year has passed and it's now 3 years since I've been blogging here on catonmat! In this post I wish to summarize this year's statistics.</p>
<p>See the <a href=\"http://www.catonmat.net/blog/a-year-of-blogging/\">one year of blogging</a> and <a href=\"http://www.catonmat.net/blog/two-years-of-blogging\">two years of blogging</a> for previous year statistics.</p>
<p>First of all traffic statistics,</p>
<div class=\"c\"><p><a href=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-3rd-year-full.jpg\"><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-3rd-year.jpg\"></a><br>
<small>Traffic statistics for the period 2009-07-01 - 2010-07-01 from Google Analytics.</small></p>
</div>
<p>Alright, so catonmat has received 1.43 million visitors and 2.11 million page views during this year. That's 120k visits and 175k page views per month. Or 4,000 visitors per day and 5,800 page views per day. Good numbers.</p>
<p>Let's look at the whole traffic picture from the day one of blogging,</p>
<div class=\"c\"><p><a href=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-all-years-full.jpg\"><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-all-years.jpg\"></a><br>
<small>Traffic statistics for the period 2007-07-01 - 2010-07-01 from Google Analytics.</small></p>
</div>
<p>Looks pretty random but seems to have a hidden linear trend upwards.</p>
<p>Now the FeedBurner subscriber stats,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-feedburner-statistics-3rd-year.png\"><br>
<small>Feedburner statistics for the period 2009-07-01 - 2010-07-01.</small></p>
</div>
<p>Last year I left off with 7000 subscribers, and now I have around 12,000. That's 5000 new subscribers, or 13 new subscribers per day on average.</p>
<p>And the whole picture of subscriber dynamics since the beginning of blogging,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-feedburner-statistics-all-years.png\"><br>
<small>Feedburner statistics for the period 2007-07-01 - 2010-07-01.</small></p>
</div>
<p>Also a nice positive trend, if it keeps going the same way, I expect to have around 17,000 subscribers the next year.</p>
<p>Now to articles. During this year I have written 43 articles. Here are ten most popular ones:</p>
<ul> <li><a href=\"/blog/using-fibonacci-numbers-to-convert-from-miles-to-kilometers\">Using Fibonacci Numbers to Convert from Miles to Kilometers and Vice Versa</a> (194,417 views).</li>
 <li><a href=\"/blog/top-ten-one-liners-from-commandlinefu-explained\">Top Ten One-Liners from CommandLineFu Explained</a>  (155,079 views).</li>
 <li><a href=\"/blog/unix-utilities-lsof\">A Unix Utility You Should Know About: lsof</a> (59,204 views).</li>
 <li><a href=\"/blog/ldd-arbitrary-code-execution\">ldd arbitrary code execution</a> (55,833 views).</li>
 <li><a href=\"/blog/summary-of-mit-introduction-to-algorithms\">Summary of all the MIT Introduction to Algorithms lectures</a> (54,954 views).</li>
 <li><a href=\"/blog/must-have-windows-programs\">Must-Have Windows Software (or Windows Programs that I use)</a> (53,825 views).</li>
 <li><a href=\"/blog/busy-beaver\">The Busy Beaver Problem</a> (52,238 views).</li>
 <li><a href=\"/blog/vim-plugins-snipmate-vim\">Vim Plugins You Should Know About, Part IV: snipmate.vim</a> (35,735 views).</li>
 <li><a href=\"/blog/secret-perl-operators\">Secret Perl Operators</a> (34,346 views).</li>
 <li><a href=\"/http-proxy-in-nodejs\">A HTTP Proxy Server in 20 Lines of node.js Code</a> (31,822 views).</li>
</ul>
<p>Here are my personal favorites that didn't make it into top ten:</p>
<ul> <li><a href=\"/blog/on-the-linear-time-algorithm-for-finding-fibonacci-numbers\">On the Linear Time Algorithm For Finding Fibonacci Numbers</a>.</li>
 <li><a href=\"/blog/recursive-regular-expressions\">Recursive Regular Expressions</a>.</li>
 <li><a href=\"/blog/on-functors\">On Functors</a>.</li>
 <li><a href=\"/blog/derivation-of-ycombinator\">Deriving the Y-Combinator</a>.</li>
 <li><a href=\"/blog/donald-knuths-first-computer\">Donald Knuth's First Computer</a>.</li>
</ul>
<p>It's now time for delicious cake:</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/portal-cake-three-years.jpg\"></p>
</div>
<p>Let's meet for cake the next year again! See you!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/LD7qo8re6-c\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/three-years-of-blogging")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "The Four Polymorphisms in C++") (id nil "224") (updated nil "2010-06-20T05:20:52Z") (published nil "2010-06-18T10:10:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/hw0jXfDKemQ/cpp-polymorphism"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>When people talk about polymorphism in C++ they usually mean the thing of using a derived class through the base class pointer or reference, which is called <strong>subtype polymorphism</strong>. But they often forget that there are all kinds of other polymorphisms in C++, such as <strong>parametric polymorphism</strong>, <strong>ad-hoc polymorphism</strong> and <strong>coercion polymorphism</strong>.</p>
<p>These polymorphisms also go by different names in C++,</p>
<ul> <li>Subtype polymorphism is also known as <strong>runtime polymorphism</strong>.</li>
 <li>Parametric polymorphism is also known as <strong>compile-time polymorphism</strong>.</li>
 <li>Ad-hoc polymorphism is also known as <strong>overloading</strong>.</li>
 <li>Coercion is also known as (implicit or explicit) <strong>casting</strong>.</li>
</ul>
<p>In this article I'll illustrate all the polymorphisms through examples in C++ language and also give insight on why they have various other names.</p>
<h2>Subtype Polymorphism (Runtime Polymorphism)</h2>
<p>Subtype polymorphism is what everyone understands when they say \"polymorphism\" in C++. It's the ability to use derived classes through base class pointers and references.</p>
<p>Here is an example. Suppose you have various cats like these felines,</p>
<div class=\"c\"><p><img src=\"/images/polymorphic-cats.gif\" alt=\"Polymorphic Cats\"><br>
<small>Polymorphic cats on a mat by <a href=\"http://substack.net\">James Halliday</a>.</small></p>
</div>
<p>Since they are all of Felidae biological family, and they all should be able to meow, they can be represented as classes inheriting from <code>Felid</code> base class and overriding the <code>meow</code> pure virtual function,</p>
<div class=\"highlight\"><pre ><span class=\"c1\">// file cats.h</span>

<span class=\"k\">class</span> <span class=\"nc\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>
<span class=\"p\">};</span>

<span class=\"k\">class</span> <span class=\"nc\">Cat</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like a regular cat! meow!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"k\">class</span> <span class=\"nc\">Tiger</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like a tiger! MREOWWW!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"k\">class</span> <span class=\"nc\">Ocelot</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like an ocelot! mews!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
</pre>
</div>
<p>Now the main program can use <code>Cat</code>, <code>Tiger</code> and <code>Ocelot</code> interchangeably through <code>Felid</code> (base class) pointer,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &quot;cats.h&quot;</span>

<span class=\"kt\">void</span> <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"n\">Felid</span> <span class=\"o\">*</span><span class=\"n\">cat</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">cat</span><span class=\"o\">-&gt;</span><span class=\"n\">meow</span><span class=\"p\">();</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">Cat</span> <span class=\"n\">cat</span><span class=\"p\">;</span>
 <span class=\"n\">Tiger</span> <span class=\"n\">tiger</span><span class=\"p\">;</span>
 <span class=\"n\">Ocelot</span> <span class=\"n\">ocelot</span><span class=\"p\">;</span>

 <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cat</span><span class=\"p\">);</span>
 <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tiger</span><span class=\"p\">);</span>
 <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ocelot</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here the main program passes pointers to <code>cat</code>, <code>tiger</code> and <code>ocelot</code> to <code>do_meowing</code> function that expects a pointer to <code>Felid</code>. Since they are all <code>Felid</code>s, the program calls the right <code>meow</code> function for each felid and the output is:</p>
<pre >
Meowing like a regular cat! meow!
Meowing like a tiger! MREOWWW!
Meowing like an ocelot! mews!
</pre>
<p>Subtype polymorphism is also called <strong>runtime polymorphism</strong> for a good reason. The resolution of polymorphic function calls happens at runtime through an indirection via the virtual table. Another way of explaining this is that compiler does not locate the address of the function to be called at compile-time, instead when the program is run, the function is called by dereferencing the right pointer in the virtual table.</p>
<p>In type theory it's also known as <strong>inclusion polymorphism</strong>.</p>
<h2>Parametric Polymorphism (Compile-Time Polymorphism)</h2>
<p>Parametric polymorphism provides a means to execute the same code for any type. In C++ parametric polymorphism is implemented via templates.</p>
<p>One of the simplest examples is a generic <code>max</code> function that finds maximum of two of its arguments,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>

<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"o\">&gt;</span>
<span class=\"n\">T</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>     <span class=\"c1\">// 9</span>

 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">),</span> <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"s\">&quot;bar&quot;</span><span class=\"p\">);</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// &quot;foo&quot;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here the <code>max</code> function is polymorphic on type <code>T</code>. Note, however, that it doesn't work on pointer types because comparing pointers compares the memory locations and not the contents. To get it working for pointers you'd have to specialize the template for pointer types and that would no longer be parametric polymorphism but would be ad-hoc polymorphism.</p>
<p>Since parametric polymorphism happens at compile time, it's also called <strong>compile-time polymorphism</strong>.</p>
<h2>Ad-hoc Polymorphism (Overloading)</h2>
<p>Ad-hoc polymorphism allows functions with the same name act differently for each type. For example, given two <code>int</code>s and the <code>+</code> operator, it adds them together. Given two <code>std::string</code>s it concatenates them together. This is called <strong>overloading</strong>.</p>
<p>Here is a concrete example that implements function <code>add</code> for <code>int</code>s and <code>string</code>s,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>

<span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>
 <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">b</span><span class=\"p\">;</span>
 <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">&quot;hello &quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;world&quot;</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Ad-hoc polymorphism also appears in C++ if you specialize templates. Returning to the previous example about <code>max</code> function, here is how you'd write a max for two <code>char *</code>,</p>
<pre >
template &lt;>
const char *max(const char *a, const char *b) {
 return strcmp(a, b) > 0 ? a : b;
}
</pre>
<p>Now you can call <code>::max(\"foo\", \"bar\")</code> to find maximum of strings \"foo\" and \"bar\".</p>
<h2>Coercion Polymorphism (Casting)</h2>
<p>Coercion happens when an object or a primitive is cast into another object type or primitive type. For example,</p>
<div class=\"highlight\"><pre ><span class=\"kt\">float</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"c1\">// int gets promoted (cast) to float implicitly</span>
<span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mf\">9.99</span> <span class=\"c1\">// float gets demoted to int implicitly</span>
</pre>
</div>
<p>Explicit casting happens when you use C's type-casting expressions, such as <code>(unsigned int *)</code> or <code>(int)</code> or C++'s <code>static_cast</code>, <code>const_cast</code>, <code>reinterpret_cast</code>, or <code>dynamic_cast</code>.</p>
<p>Coercion also happens if the constructor of a class isn't <code>explicit</code>, for example,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>

<span class=\"k\">class</span> <span class=\"nc\">A</span> <span class=\"p\">{</span>
 <span class=\"kt\">int</span> <span class=\"n\">foo</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">ffoo</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">ffoo</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
 <span class=\"kt\">void</span> <span class=\"n\">giggidy</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">foo</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"kt\">void</span> <span class=\"n\">moo</span><span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">giggidy</span><span class=\"p\">();</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">moo</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">);</span>     <span class=\"c1\">// prints 55</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>If you made the constructor of A <code>explicit</code>, that would no longer be possible. It's always a good idea to make your constructors explicit to avoid accidental conversions.</p>
<p>Also if a class defines conversion operator for type <code>T</code>, then it can be used anywhere where type <code>T</code> is expected.</p>
<p>For example,</p>
<div class=\"highlight\"><pre ><span class=\"k\">class</span> <span class=\"nc\">CrazyInt</span> <span class=\"p\">{</span>
 <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"n\">CrazyInt</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
 <span class=\"k\">operator</span> <span class=\"kt\">int</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// conversion from CrazyInt to int</span>
<span class=\"p\">};</span>
</pre>
</div>
<p>The <code>CrazyInt</code> defines a conversion operator to type <code>int</code>. Now if we had a function, let's say, <code>print_int</code> that took <code>int</code> as an argument, we could also pass it an object of type CrazyInt,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>

<span class=\"kt\">void</span> <span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">CrazyInt</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">55</span><span class=\"p\">;</span>
 <span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"mi\">999</span><span class=\"p\">);</span>    <span class=\"c1\">// prints 999</span>
 <span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>      <span class=\"c1\">// prints 55</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Subtype polymorphism that I discussed earlier is actually also coercion polymorphism because the derived class gets converted into base class type.</p>
<h2>Have Fun!</h2>
<p>Have fun with all the new knowledge about polymorphism!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/hw0jXfDKemQ\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/cpp-polymorphism")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Yet Another Ten One-Liners from CommandLineFu Explained") (id nil "222") (updated nil "2010-06-09T20:10:01Z") (published nil "2010-06-02T12:45:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/dqjNsh7dF8k/yet-another-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Hey everyone, this is the fourth article in the series on the most popular <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> one-liners explained.</p>
<p>Here are the first three parts:</p>
<ul><li><a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">Part I: Top Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained/\">Part II: The Next Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained/\">Part III: Another Ten One-Liners from CommandLineFu Explained</a></li>
</ul>
<p>And here are today's one-liners:</p>
<h2>31. Quickly access ASCII table.</h2>
<pre >$ man 7 ascii</pre>
<p>Ever forgot a keycode for some ASCII character or escape code? Look no further, <code>man ascii</code> contains the 7-bit ASCII table. Take a look at it <a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/ascii.7.html\">online</a>.</p>
<p>Linux <a href=\"http://www.kernel.org/doc/man-pages/\">man pages</a> are full of gems like these. One day I actually went through all the man pages to find the most interesting ones. An article about them is upcoming but before I get it published, here are a few interesting ones:</p>
<ul> <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man1/intro.1.html\">man 1 intro</a> - a tutorial that gets you started with Linux if you have never used it.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man2/syscalls.2.html\">man 2 syscalls</a> - lists all Linux system calls by kernel version.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man2/select_tut.2.html\">man 2 select_tut</a> - <code>select()</code> system call tutorial.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/string.3.html\">man 3 string</a> - lists all &lt;string.h&gt; string manipulation functions.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/stdio.3.html\">man 3 stdio</a> - lists and describes all &lt;stdio.h&gt; standard input/output library functions.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/errno.3.html\">man 3 errno</a> - lists and describes all <code>errno</code> error numbers.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man4/console_codes.4.html\">man 4 console_codes</a> - Linux console escape and control sequences.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man4/full.4.html\">man 4 full</a> - <code>/dev/full</code> - a device that simulates a full device.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html\">man 5 proc</a> - lots of info about the <code>/proc</code> filesystem.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man5/filesystems.5.html\">man 5 filesystems</a> - lists various Linux filesystems.</li>
</ul>
<p>And finally the section 7 man pages that are most packed with wild and cool info,</p>
<ul> <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/bootparam.7.html\">man 7 bootparam</a> - a tutorial and reference of Linux kernel boot parameters.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/charsets.7.html\">man 7 charsets</a> - a Linux programmer's view of character sets and internationalization.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/glob.7.html\">man 7 glob</a> - how pathname globbing works.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/hier.7.html\">man 7 hier</a> - description of the Linux file system hierarchy.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/operator.7.html\">man 7 operator</a> - C language operator precedence and associativity table.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/regex.7.html\">man 7 regex</a> - basic and extended regular expression overview.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/suffixes.7.html\">man 7 suffixes</a> - lists common Linux file suffixes and the associated file types.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/time.7.html\">man 7 time</a> - overview of time and timers.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/units.7.html\">man 7 units</a> - kilo, kibi, mega, mebi, giga, gibi, ... - decimal (SI) and binary system of units.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/utf8.7.html\">man 7 utf8</a> - description of UTF-8 encoding.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/url.7.html\">man 7 url</a> - description of URIs, URLs and URNs.</li>
</ul>
<p>There are a lot more interesting man pages but these stood out from the rest.</p>
<h2>32. Simple timer.</h2>
<pre >$ time read</pre>
<p>This one-liner can be used a simple timer. For example, if you wish to time something, you can execute it when the event starts and press the return key when the event ends. It will output the time the event took to finish.</p>
<p>Here is how this one-liner works. First the <code>time</code> command times any command that is supplied to it. In this case the command supplied to it is <code>read</code> that reads a line from the standard input. As soon as you press enter, <code>read</code> finishes and time reports how long it took.</p>
<p>If you get annoyed by having to press enter, you can specify that <code>read</code> should return after having read 1 character,</p>
<pre >$ time read -N 1</pre>
<p>Now you can press any key to stop the timer.</p>
<p>If you wish to run a timer for a specific number of seconds, you can add <code>-t</code> flag for timeout,</p>
<pre >$ time read -t 60</pre>
<p>This would stop the timer after 60 seconds.</p>
<h2>33. Shutdown a Windows machine.</h2>
<pre >$ net rpc shutdown -I IP_ADDRESS -U username%password</pre>
<p>Everyone knows the <code>net</code> command, right? We all used to <code>net use \\\\ip\\ipc$ *</code>, right? :)</p>
<p>Anyway, the <code>net</code> command comes as part of <a href=\"http://samba.org/\">Samba</a>, which allows you, for example, to use Linux in a Windows workgroup.</p>
<p>This particular one-liner executes the <code>shutdown</code> command on a Windows computer located at <code>IP_ADDRESS</code> with as the user <code>username</code> with password <code>password</code>.</p>
<p>To reboot a machine use the <code>-r</code> switch to <code>net rpc</code>:</p>
<pre >$ net rpc shutdown -r -I IP_ADDRESS -U username%password</pre>
<p>If you're on an unsecured network, don't forget about the good old <code>nmblookup</code> and <code>smbclient</code> tools that come with Samba.</p>
<h2>34. Execute a command independently from the current shell.</h2>
<pre >$ (cd /tmp && ls)</pre>
<p>This one-liner illustrates subshells. Here the commands <code>cd /tmp</code> and <code>ls</code> are executed but they do not affect the current shell. If you had done just <code>cd /tmp && ls</code>, your current shell would have changed directory to <code>/tmp</code> but in this one-liner it happens in a subshell and your current shell is not affected.</p>
<p>Surely, this is only a toy example. If you wanted to know what's in <code>/tmp</code>, you'd do just <code>ls /tmp</code>.</p>
<p>Actually, talking about <code>cd</code>, be aware of <code>pushd</code> and <code>popd</code> commands. They allow you to maintain a stack of directories you want to return to later. For example,</p>
<pre >
/long/path/is/long$ pushd .
/long/path/is/long$ cd /usr
/usr$ popd 
/long/path/is/long$
</pre>
<p>Or even shorter, passing the directory you're gonna <code>cd</code> to directly to <code>pushd</code>,</p>
<pre >
/long/path/is/long$ pushd /usr
/usr$ popd 
/long/path/is/long$
</pre>
<p>Another cool trick is to use <code>cd -</code> to return to the previous directory. Here is an example,</p>
<pre >
/home/pkrumins$ cd /tmp
/tmp$ cd -
/home/pkrumins$
</pre>
<h2>35. Tunnel your SSH connection via intermediate host.</h2>
<pre >$ ssh -t reachable_host ssh unreachable_host</pre>
<p>This one-liner creates an ssh connection to <code>unreachable_host</code> via <code>reachable_host</code>. It does it by executing the <code>ssh unreachable_host</code> on <code>reachable_host</code>. The <code>-t</code> forces ssh to allocate a pseudo-tty, which is necessary for working interactively in the second ssh to <code>unreachable_host</code>.</p>
<p>This one-liner can be generalized. You can tunnel through arbitrary number of ssh servers:</p>
<pre >$ ssh -t host1 ssh -t host2 ssh -t host3 ssh -t host4 ...</pre>
<p>Now catch me if you can. ;)</p>
<h2>36. Clear the terminal screen.</h2>
<pre >$ CTRL+l</pre>
<p>Pressing CTRL+l (that's small <code>L</code>) clears the screen leaving the current line at the top of the screen.</p>
<p>If you wish to clear just some line, you can use argumented version of <code>CTRL+l</code> - first press <code>ESC</code>, then the line you want to clear, let's say 21 (21st line), and then press the same CTRL+l. That will clear the 21st line on the screen without erasing the whole screen.</p>
<pre >$ ESC 21 CTRL+l</pre>
<p>This command outputs a special \"clear-screen\" sequence to the terminal. The same can be achieved by <code>tput</code> command,</p>
<pre >$ tput clear</pre>
<p>Another way to clear the terminal (usually when the screen gets garbled) is to use the <code>reset</code> command,</p>
<pre >$ reset</pre>
<h2>37. Hear when the machine comes back online.</h2>
<pre >$ ping -a IP</pre>
<p>Ever had a situation when you need to know when the system comes up after a reboot? Up until now you probably launched <code>ping</code> and either followed the timeouts until the system came back, or left it running and occasionally checked its output to see if the host is up. But that is unnecessary, you can make ping <code>-a</code> audible! As soon as the host at <code>IP</code> is back, <code>ping</code> will beep!</p>
<h2>38. List 10 most often used commands.</h2>
<pre >$ history | awk '{a[$2]++}END{for(i in a){print a[i] \" \" i}}' | sort -rn | head</pre>
<p>The person who wrote it has the Unix mindset right. He's combining several shell commands to get the result he/she wants.</p>
<p>First, <code>history</code> outputs all the commands the person has executed. Next, <code>awk</code> counts how many times the second column <code>$2</code> appears in the output. Once <code>history</code> has output all the commands and <code>awk</code> has counted them, <code>awk</code> loops over all the commands and outputs the count <code>a[i]</code> separated by space, followed by the command itself. Then <code>sort</code> takes this input and sorts numerically <code>-n</code> and reverses the output <code>-r</code>, so that most frequent commands were on top. Finally <code>head</code> outputs the first 10 most frequent history commands.</p>
<p>If you want to see more than 10 commands (or less), change <code>head</code> to <code>head -20</code> for 20 commands or <code>head -5</code> for 5 commands.</p>
<h2>39. Check gmail for new mail.</h2>
<pre >
$ curl -u you@gmail.com --silent \"https://mail.google.com/mail/feed/atom\" |
  perl -ne \\
  '
    print \"Subject: $1 \" if /&lt;title>(.+?)&lt;\\/title>/ && $title++;
    print \"(from $1)\\n\" if /&lt;email>(.+?)&lt;\\/email>/;
  '
</pre>
<p>Gmail is cool because they offer an Atom feed for the new mail. This one-liner instructs <code>curl</code> to retrieve the feed and authenticate as <code>you@gmail.com</code>. You'll be prompted a password after you execute the command. Next it feeds the output to <code>perl</code>. Perl extracts the title (subject) of each email and the sender's email. These two items are printed to stdout.</p>
<p>Here is a the output when I run the command,</p>
<pre >
Subject: i heard you liked windows! (from gates@microsoft.com)
Subject: got root? (from bofh@underground.org)
</pre>
<h2>40. Watch Star-Wars via telnet.</h2>
<pre >$ telnet towel.blinkenlights.nl</pre>
<p>Needs no explaining. Just telnet to the host to watch ASCII Star-Wars.</p>
<p>And here is another one,</p>
<pre >$ telnet towel.blinkenlights.nl 666</pre>
<p>Connecting on port 666 will spit out BOFH excuses.</p>
<h2>That's it for today.</h2>
<p>I hope you enjoyed the 4th part of the article. Tune in next time for the 5th part.</p>
<p>Oh, and I'd love if you <a href=\"http://twitter.com/pkrumins\">followed me on Twitter!</a></p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/dqjNsh7dF8k\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/yet-another-ten-one-liners-from-commandlinefu-explained")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "On Functors") (id nil "219") (updated nil "2010-05-17T14:31:53Z") (published nil "2010-05-17T13:30:45Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/sm6nLqjn1Cs/on-functors"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>It's interesting how the term \"<strong>functor</strong>\" means completely different things in various programming languages. Take <strong>C++</strong> for example. Everyone who has mastered C++ knows that you call a class that implements <code>operator()</code> a functor. Now take <strong>Standard ML</strong>. In ML functors are mappings from structures to structures. Now <strong>Haskell</strong>. In Haskell functors are just homomorphisms over containers. And in <strong>Prolog</strong> functor means the atom at the start of a structure. They all are different. Let's take a closer look at each one.</p>
<h2>Functors in C++</h2>
<p>Functors in C++ are short for \"<strong>function objects</strong>.\" Function objects are instances of C++ classes that have the <code>operator()</code> defined. If you define <code>operator()</code> on C++ classes you get objects that act like functions but can also store state. Here is an example,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>

<span class=\"k\">class</span> <span class=\"nc\">SimpleFunctor</span> <span class=\"p\">{</span>
    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name_</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
    <span class=\"n\">SimpleFunctor</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">name_</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
    <span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"p\">()()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Oh, hello, &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name_</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"n\">SimpleFunctor</span> <span class=\"n\">sf</span><span class=\"p\">(</span><span class=\"s\">&quot;catonmat&quot;</span><span class=\"p\">);</span>
    <span class=\"n\">sf</span><span class=\"p\">();</span>  <span class=\"c1\">// prints &quot;Oh, hello, catonmat&quot;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Notice how I was able to call <code>sf()</code> in the <code>main</code> function, even though <code>sf</code> was an object? That's because I defined <code>operator()</code> in <code>SimpleFunctor</code>'s class.</p>
<p>Most often functors in C++ are used as predicates, fake closures or comparison functions in STL algorithms. Here is another example. Suppose you have a list of integers and you wish to find the sum of all even ones, and the sum of all odd ones. Perfect job for a functor and <code>for_each</code> algorithm.</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;algorithm&gt;</span>
<span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;list&gt;</span>

<span class=\"k\">class</span> <span class=\"nc\">EvenOddFunctor</span> <span class=\"p\">{</span>
    <span class=\"kt\">int</span> <span class=\"n\">even_</span><span class=\"p\">;</span>
    <span class=\"kt\">int</span> <span class=\"n\">odd_</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
    <span class=\"n\">EvenOddFunctor</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">even_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">odd_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
    <span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"p\">()(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>
        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">even_</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">;</span>
        <span class=\"k\">else</span> <span class=\"n\">odd_</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
    <span class=\"kt\">int</span> <span class=\"n\">even_sum</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">even_</span><span class=\"p\">;</span> <span class=\"p\">}</span>
    <span class=\"kt\">int</span> <span class=\"n\">odd_sum</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">odd_</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"n\">EvenOddFunctor</span> <span class=\"n\">evenodd</span><span class=\"p\">;</span>
    
    <span class=\"kt\">int</span> <span class=\"n\">my_list</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"p\">};</span>
    <span class=\"n\">evenodd</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">,</span>
                  <span class=\"n\">my_list</span><span class=\"o\">+</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>
                  <span class=\"n\">evenodd</span><span class=\"p\">);</span>

    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Sum of evens: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">evenodd</span><span class=\"p\">.</span><span class=\"n\">even_sum</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>
    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Sum of odds: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">evenodd</span><span class=\"p\">.</span><span class=\"n\">odd_sum</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>

    <span class=\"c1\">// output:</span>
    <span class=\"c1\">// Sum of evens: 30</span>
    <span class=\"c1\">// Sum of odds: 25</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here an instance of an <code>EvenOddFunctor</code> gets passed to <code>for_each</code> algorithm. The <code>for_each</code> algorithm iterates over each element in <code>my_list</code> and calls the functor. After it's done, it returns a copy of <code>evenodd</code> functor that contains the sum of evens and odds.</p>
<h2>Functors in Standard ML</h2>
<p>Vaguely talking in object-oriented terms, functors in ML are generic implementations of interfaces. In ML terms, functors are part of ML module system and they allow to compose structures.</p>
<p>Here is an example, suppose you want to write a plugin system and you wish all the plugins to implement the required interface, which, for simplicity, includes only the <code>perform</code> function. In ML you can first define a signature for plugins,</p>
<div class=\"highlight\"><pre ><span class=\"n\">signature</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">sig</span>
    <span class=\"k\">val</span> <span class=\"n\">perform</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">unit</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>Now that we have defined an interface (signature) for plugins, we can implement two Plugins, let's say <code>LoudPlugin</code> and <code>SilentPlugin</code>. The implementation is done via structures,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">LoudPlugin</span> <span class=\"o\">:&gt;</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
    <span class=\"k\">fun</span> <span class=\"n\">perform</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">print</span> <span class=\"s2\">&quot;DOING JOB LOUDLY!</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>And the SilentPlugin,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">SilentPlugin</span> <span class=\"o\">:&gt;</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
    <span class=\"k\">fun</span> <span class=\"n\">perform</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">print</span> <span class=\"s2\">&quot;doing job silently</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>Now we get to functors. Remember functors in ML take structures as their arguments, so we can write one that takes <code>Plugin</code> as its argument,</p>
<div class=\"highlight\"><pre ><span class=\"k\">functor</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">P</span> <span class=\"o\">:</span> <span class=\"nc\">Plugin</span><span class=\"o\">)</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
    <span class=\"k\">fun</span> <span class=\"n\">job</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"nn\">P</span><span class=\"p\">.</span><span class=\"n\">perform</span> <span class=\"bp\">()</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>This functor takes <code>Plugin</code> as <code>P</code> argument, and uses it in the <code>job</code> function, that calls <code>P</code> plugin's <code>perform</code> function.</p>
<p>Now let's use the <code>Performer</code> functor. Remember that a functor returns a structure,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">LoudPerformer</span> <span class=\"o\">=</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">LoudPlugin</span><span class=\"o\">);</span>
<span class=\"n\">structure</span> <span class=\"nc\">SilentPerformer</span> <span class=\"o\">=</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">SilentPlugin</span><span class=\"o\">);</span>

<span class=\"nn\">LoudPerformer</span><span class=\"p\">.</span><span class=\"n\">job</span> <span class=\"bp\">()</span><span class=\"o\">;</span>
<span class=\"nn\">SilentPerformer</span><span class=\"p\">.</span><span class=\"n\">job</span> <span class=\"bp\">()</span><span class=\"o\">;</span>
</pre>
</div>
<p>This outputs,</p>
<pre >
DOING JOB LOUDLY!
doing job silently
</pre>
<p>This is probably the simplest possible example of Standard ML functors.</p>
<h2>Functors in Haskell</h2>
<p>Functors in Haskell is what real functors are supposed to be. Haskell functors resemble mathematical functors from category theory. In category theory a functor F is a mapping between two categories such that the structure of the category being mapped over is preserved, in other words, it's a homomorphism between two categories.</p>
<p>In Haskell this definition is implemented as a simple type class,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">class</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span> <span class=\"kr\">where</span>
  <span class=\"n\">fmap</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span>
</pre>
</div>
<p>Looking back at ML example, a type class in Haskell is like a signature, except it's defined on types. It defines what operations a type has to implement to be an instance of this class. In this case, however, the <code>Functor</code> is not defined over types but over type constructors <code>f</code>. It says, a <code>Functor</code> is something that implements the <code>fmap</code> function that takes a function from type <code>a</code> to type <code>b</code>, and a value of type <code>f a</code> (a type constructed from type constructor <code>f</code> applied to type <code>a</code>) and returns a value of type <code>f b</code>.</p>
<p>To understand what it does, think of <code>fmap</code> as a function that applies an operation to each element in some kind of a container.</p>
<p>The simplest example of functors is regular lists and the <code>map</code> function that maps a function to each element in the list.</p>
<pre >
Prelude> map (+1) [1,2,3,4,5]
[2,3,4,5,6]
</pre>
<p>In this simple example, the <code>Functor</code>'s <code>fmap</code> function is just <code>map</code> and type constructor <code>f</code> is <code>[]</code> - the list type constructor. Therefore the <code>Functor</code> instance for lists is defined as</p>
<div class=\"highlight\"><pre ><span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">[]</span> <span class=\"kr\">where</span>
  <span class=\"n\">fmap</span> <span class=\"ow\">=</span> <span class=\"n\">map</span>
</pre>
</div>
<p>Let's see if it really is true by using <code>fmap</code> instead of <code>map</code> in the previous example,</p>
<pre >
Prelude> fmap (+1) [1,2,3,4,5]
[2,3,4,5,6]
</pre>
<p>But notice that Functor definition does not say anything about preserving the structure! Therefore any sensible functor must satisfy the functor laws, which are part of the definition of the mathematical functor, implicitly. There are two rules on <code>fmap</code>:</p>
<pre >
fmap id = id
fmap (g . h) = fmap g . fmap h
</pre>
<p>The first rule says that mapping the identity function over every element in a container has no effect. The second rule says that a composition of two functions over every item in a container is the same as first mapping one function, and then mapping the other.</p>
<p>Another example of Functors that illustrate them the most vividly is operations over trees. Think of a tree as a container, then <code>fmap</code> maps a function over tree values, while preserving the tree's structure.</p>
<p>Let's define a Tree first,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">data</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span>
            <span class=\"o\">|</span> <span class=\"kt\">Leaf</span> <span class=\"n\">a</span>
              <span class=\"kr\">deriving</span> <span class=\"kt\">Show</span>
</pre>
</div>
<p>This definition says that a <code>Tree</code> of type <code>a</code> is either a <code>Node</code> of two <code>Tree</code>s (left and right branches) or a <code>Leaf</code>. The <code>deriving Show</code> expression allows us to inspect the Tree via <code>show</code> function.</p>
<p>Now we can define a <code>Functor</code> over <code>Tree</code>s,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">Tree</span> <span class=\"kr\">where</span>
    <span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"kt\">Leaf</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Leaf</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"n\">v</span><span class=\"p\">)</span>
    <span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"kt\">Node</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"n\">r</span><span class=\"p\">)</span>
</pre>
</div>
<p>This definition says, that <code>fmap</code> of function <code>g</code> over a <code>Leaf</code> with value <code>v</code> is just a <code>Leaf</code> of <code>g</code> applied to <code>v</code>. And <code>fmap</code> of <code>g</code> over a <code>Node</code> with left <code>l</code> and right <code>r</code> branches is just a <code>Node</code> of <code>fmap</code> applied to the values of left and right branches.</p>
<p>Now let's illustrate how fmap works on trees. Let's construct a tree with String leaves and map the length function over them to find out the length of each leaf.</p>
<pre >
Prelude> let tree = (Node (Node (Leaf \"hello\") (Leaf \"foo\")) (Leaf \"baar\"))
Prelude> fmap length tree
Node (Node (Leaf 5) (Leaf 3)) (Leaf 4)
</pre>
<p>Here I constructed the following tree,</p>
<pre >
           *
          / \\
         /   \\
        *  \"baar\"
       / \\
      /   \\
     /     \\
    /       \\
 \"hello\"  \"foo\"
</pre>
<p>And mapped <code>length</code> function over it, producing,</p>
<pre >
           *
          / \\
         /   \\
        *     4
       / \\     
      /   \\
     /     \\
    /       \\
   5         3
</pre>
<p>Another way of saying what <code>fmap</code> does is that is <strong>lifts</strong> a function from the \"normal world\" into the \"<code>f</code> world.\"</p>
<p>In fact Functor is the most fundamental type class in Haskell because Monads, Applicatives and Arrows are all Functors. As I like to say it, Haskell starts where the functors start.</p>
<p>If you wish to learn more about Haskell type classes, start with the excellent article <a href=\"http://www.catonmat.net/docs/typeclassopedia.pdf\">Typeclassopedia</a> (starts at page 17).</p>
<h2>Functors in Prolog</h2>
<p>Finally, functors in Prolog. Functors in Prolog are the simplest of all. They refer to two things. The first is the atom at the start of the structure. Here is an example, given an expression,</p>
<div class=\"highlight\"><pre ><span class=\"s-Atom\">?-</span> <span class=\"nf\">likes</span><span class=\"p\">(</span><span class=\"s-Atom\">mary</span><span class=\"p\">,</span> <span class=\"s-Atom\">pizza</span><span class=\"p\">)</span>
</pre>
</div>
<p>the functor is the first atom - <code>likes</code>.</p>
<p>The second is built-in predicate called <code>functor</code>. It returns the arity and the functor of a structure. For example,</p>
<div class=\"highlight\"><pre ><span class=\"s-Atom\">?-</span> <span class=\"nf\">functor</span><span class=\"p\">(</span><span class=\"nf\">likes</span><span class=\"p\">(</span><span class=\"s-Atom\">mary</span><span class=\"p\">,</span> <span class=\"s-Atom\">pizza</span><span class=\"p\">),</span> <span class=\"nv\">Functor</span><span class=\"p\">,</span> <span class=\"nv\">Arity</span><span class=\"p\">).</span>
<span class=\"nv\">Functor</span> <span class=\"o\">=</span> <span class=\"s-Atom\">likes</span>
<span class=\"nv\">Arity</span> <span class=\"o\">=</span> <span class=\"m\">2</span>
</pre>
</div>
<p>That's it for functors in Prolog.</p>
<h2>Conclusion</h2>
<p>This article demonstrated how a simple term like \"functor\" can refer to completely different things in various programming languages. Therefore when you hear a the term \"functor\", it's important to know the context it's being mentioned in.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/sm6nLqjn1Cs\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/on-functors")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Turn any Linux computer into SOCKS5 proxy in one command") (id nil "216") (updated nil "2010-05-07T12:18:07Z") (published nil "2010-05-06T19:20:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/4zYK7bywA9E/linux-socks5-proxy"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>I thought I'd do a shorter article on catonmat this time. It goes hand in hand with my upcoming article series on \"<strong>100% technical guide to anonymity</strong>\" and it's much easier to write larger articles in smaller pieces. Then I can edit them together and produce the final article.</p>
<p>This article will be interesting for those who didn't know it already -- you can turn any Linux computer into a SOCKS5 (and SOCKS4) proxy in just one command:</p>
<pre >ssh -N -D 0.0.0.0:1080 localhost</pre>
<p>And it doesn't require root privileges. The <code>ssh</code> command starts up dynamic <code>-D</code> port forwarding on port <code>1080</code> and talks to the clients via SOCSK5 or SOCKS4 protocols, just like a regular SOCKS5 proxy would! The <code>-N</code> option makes sure ssh stays idle and doesn't execute any commands on localhost.</p>
<p>If you also wish the command to go into background as a daemon, then add <code>-f</code> option:</p>
<pre >ssh -f -N -D 0.0.0.0:1080 localhost</pre>
<p>To use it, just make your software use SOCKS5 proxy on your Linux computer's IP, port 1080, and you're done, all your requests now get proxied.</p>
<p>Access control can be implemented via <code>iptables</code>. For example, to allow only people from the ip <code>1.2.3.4</code> to use the SOCKS5 proxy, add the following <code>iptables</code> rules:</p>
<pre >
iptables -A INPUT --src 1.2.3.4 -p tcp --dport 1080 -j ACCEPT
iptables -A INPUT -p tcp --dport 1080 -j REJECT
</pre>
<p>The first rule says, allow anyone from <code>1.2.3.4</code> to connect to port <code>1080</code>, and the other rule says, deny everyone else from connecting to port <code>1080</code>.</p>
<p>Surely, executing <code>iptables</code> requires root privileges. If you don't have root privileges, and you don't want to leave your proxy open (and you really don't want to do that), you'll have to use some kind of a simple TCP proxy wrapper to do access control.</p>
<p>Here, I wrote one in Perl. It's called <code>tcp-proxy.pl</code> and it uses <code>IO::Socket::INET</code> to abstract sockets, and <code>IO::Select</code> to do connection multiplexing.</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"c1\">#!/usr/bin/perl</span>
<span class=\"c1\">#</span>

<span class=\"k\">use</span> <span class=\"n\">warnings</span><span class=\"p\">;</span>
<span class=\"k\">use</span> <span class=\"n\">strict</span><span class=\"p\">;</span>

<span class=\"k\">use</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"p\">;</span>
<span class=\"k\">use</span> <span class=\"nn\">IO::</span><span class=\"n\">Select</span><span class=\"p\">;</span>

<span class=\"k\">my</span> <span class=\"nv\">@allowed_ips</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">&#39;1.2.3.4&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;5.6.7.8&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;127.0.0.1&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;192.168.1.2&#39;</span><span class=\"p\">);</span>
<span class=\"k\">my</span> <span class=\"nv\">$ioset</span> <span class=\"o\">=</span> <span class=\"nn\">IO::</span><span class=\"n\">Select</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">%socket_map</span><span class=\"p\">;</span>

<span class=\"k\">my</span> <span class=\"nv\">$debug</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>

<span class=\"k\">sub </span><span class=\"nf\">new_conn</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"p\">(</span><span class=\"nv\">$host</span><span class=\"p\">,</span> <span class=\"nv\">$port</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nv\">@_</span><span class=\"p\">;</span>
    <span class=\"k\">return</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">(</span>
        <span class=\"n\">PeerAddr</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$host</span><span class=\"p\">,</span>
        <span class=\"n\">PeerPort</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$port</span>
    <span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nb\">die</span> <span class=\"s\">&quot;Unable to connect to $host:$port: $!&quot;</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">new_server</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"p\">(</span><span class=\"nv\">$host</span><span class=\"p\">,</span> <span class=\"nv\">$port</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nv\">@_</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">(</span>
        <span class=\"n\">LocalAddr</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$host</span><span class=\"p\">,</span>
        <span class=\"n\">LocalPort</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$port</span><span class=\"p\">,</span>
        <span class=\"n\">ReuseAddr</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>
        <span class=\"n\">Listen</span>    <span class=\"o\">=&gt;</span> <span class=\"mi\">100</span>
    <span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nb\">die</span> <span class=\"s\">&quot;Unable to listen on $host:$port: $!&quot;</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">new_connection</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nv\">$server</span><span class=\"o\">-&gt;</span><span class=\"nb\">accept</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>

    <span class=\"k\">unless</span> <span class=\"p\">(</span><span class=\"n\">client_allowed</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">))</span> <span class=\"p\">{</span>
        <span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip denied.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>
        <span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>
        <span class=\"k\">return</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
    <span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip accepted.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>

    <span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"n\">new_conn</span><span class=\"p\">(</span><span class=\"s\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"mi\">55555</span><span class=\"p\">);</span>
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$remote</span><span class=\"p\">);</span>

    <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nv\">$remote</span><span class=\"p\">;</span>
    <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$remote</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nv\">$client</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">close_connection</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">};</span>
    
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nv\">$remote</span><span class=\"p\">);</span>

    <span class=\"nb\">delete</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">};</span>
    <span class=\"nb\">delete</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$remote</span><span class=\"p\">};</span>

    <span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>
    <span class=\"nv\">$remote</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>

    <span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip closed.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">client_ip</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">return</span> <span class=\"n\">inet_ntoa</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"n\">sockaddr</span><span class=\"p\">);</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">client_allowed</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"k\">return</span> <span class=\"nb\">grep</span> <span class=\"p\">{</span> <span class=\"nv\">$_</span> <span class=\"ow\">eq</span> <span class=\"nv\">$client_ip</span> <span class=\"p\">}</span> <span class=\"nv\">@allowed_ips</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">print</span> <span class=\"s\">&quot;Starting a server on 0.0.0.0:1080\\n&quot;</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"n\">new_server</span><span class=\"p\">(</span><span class=\"s\">&#39;0.0.0.0&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1080</span><span class=\"p\">);</span>
<span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$server</span><span class=\"p\">);</span>

<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">for</span> <span class=\"k\">my</span> <span class=\"nv\">$socket</span> <span class=\"p\">(</span><span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">can_read</span><span class=\"p\">)</span> <span class=\"p\">{</span>
        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$socket</span> <span class=\"o\">==</span> <span class=\"nv\">$server</span><span class=\"p\">)</span> <span class=\"p\">{</span>
            <span class=\"n\">new_connection</span><span class=\"p\">(</span><span class=\"nv\">$server</span><span class=\"p\">);</span>
        <span class=\"p\">}</span>
        <span class=\"k\">else</span> <span class=\"p\">{</span>
            <span class=\"k\">next</span> <span class=\"k\">unless</span> <span class=\"nb\">exists</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$socket</span><span class=\"p\">};</span>
            <span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$socket</span><span class=\"p\">};</span>
            <span class=\"k\">my</span> <span class=\"nv\">$buffer</span><span class=\"p\">;</span>
            <span class=\"k\">my</span> <span class=\"nv\">$read</span> <span class=\"o\">=</span> <span class=\"nv\">$socket</span><span class=\"o\">-&gt;</span><span class=\"nb\">sysread</span><span class=\"p\">(</span><span class=\"nv\">$buffer</span><span class=\"p\">,</span> <span class=\"mi\">4096</span><span class=\"p\">);</span>
            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$read</span><span class=\"p\">)</span> <span class=\"p\">{</span>
                <span class=\"nv\">$remote</span><span class=\"o\">-&gt;</span><span class=\"nb\">syswrite</span><span class=\"p\">(</span><span class=\"nv\">$buffer</span><span class=\"p\">);</span>
            <span class=\"p\">}</span>
            <span class=\"k\">else</span> <span class=\"p\">{</span>
                <span class=\"n\">close_connection</span><span class=\"p\">(</span><span class=\"nv\">$socket</span><span class=\"p\">);</span>
            <span class=\"p\">}</span>
        <span class=\"p\">}</span>
    <span class=\"p\">}</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>To use it, you'll have to make a change to the previous configuration. Instead of running ssh SOCKS5 proxy on <code>0.0.0.0:1080</code>, you'll need to run it on <code>localhost:55555</code>,</p>
<pre >ssh -f -N -D 55555 localhost</pre>
<p>After that, run the <code>tcp-proxy.pl</code>,</p>
<pre >perl tcp-proxy.pl &</pre>
<p>The TCP proxy will start listening on <code>0.0.0.0:1080</code> and will redirect only the allowed IPs in <code>@allowed_ips</code> list to <code>localhost:55555</code>.</p>
<p>Another possibility is to use another computer instead of your own as exit node. What I mean is you can do the following:</p>
<pre >ssh -f -N -D 1080 other_computer.com</pre>
<p>This will set up a SOCKS5 proxy on <code>localhost:1080</code> but when you use it, ssh will automatically tunnel your requests (encrypted) via <code>other_computer.com</code>. This way you can hide what you're doing on the Internet from anyone who might be sniffing your link. They will see that you're doing something but the traffic will be encrypted so they won't be able to tell what you're doing.</p>
<p>That's it. You're now the proxy king!</p>
<h2>Thanks To Vitalik</h2>
<p>Special thanks to Vitalik from \"<a href=\"http://www.itransition.com/\">Itransition company</a>\" for helpful tips!</p>
<div class=\"download\"><div class=\"download-title\"><p>Download tcp-proxy.pl</p>
</div>
<p>Download link: <a href=\"/download/tcp-proxy.pl\" title=\"Download &quot;tcp proxy (tcp-proxy.pl)&quot;\">tcp proxy (tcp-proxy.pl)</a><br>
Download URL: <code>http://www.catonmat.net/download/tcp-proxy.pl</code><br>
Downloaded: 753 times</p>
<p>I also pushed the tcp-proxy.pl to GitHub: <a href=\"http://github.com/pkrumins/perl-tcp-proxy\">tcp-proxy.pl on GitHub</a>. This project is also pretty nifty to generalize and make a program that redirects between any number of hosts:ports, not just two.</p>
</div>
<p>PS. I will probably also write \"<strong>A definitive guide to ssh port forwarding</strong>\" some time in the future because it's an interesting but little understood topic.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/4zYK7bywA9E\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/linux-socks5-proxy")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "A HTTP Proxy Server in 20 Lines of node.js Code") (id nil "215") (updated nil "2010-06-27T16:55:31Z") (published nil "2010-04-28T11:10:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/kn7okZClh-E/http-proxy-in-nodejs"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
</pre>
</div>
<p>This is just amazing. In 20 lines of <a href=\"http://nodejs.org/\">node.js</a> code and 10 minutes of time I was able to write a HTTP proxy. And it scales well, too. It's not a blocking HTTP proxy, it's event driven and asynchronous, meaning hundreds of people can use simultaneously and it will work well.</p>
<p>To get the proxy running all you have to do is download node.js, compile it, and run the proxy program via the <code>node</code> program:</p>
<pre >
$ ./configure --prefix=/home/pkrumins/installs/nodejs-0.1.92
$ make
$ make install

$ PATH=$PATH:/home/pkrumins/installs/nodejs-0.1.92/bin

$ node proxy.js
</pre>
<p>And from here you can take this proxy wherever your imagination takes. For example, you can start by adding logging:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
</pre>
</div>
<p>Next, you can add a regex-based host blacklist in 15 additional lines:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>

<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
              <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
              <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
      <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Denied: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
      <span class=\"k\">return</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>

  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary);</span>
<span class=\"s1\">  });</span>
<span class=\"s1\">  request.addListener(&#39;</span><span class=\"nx\">end</span><span class=\"err\">&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>

<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
</pre>
</div>
<p>Now to block proxy users from using Facebook, just echo <code>facebook.com</code> to <code>blacklist</code> file:</p>
<pre >
$ echo 'facebook.com' >> blacklist
</pre>
<p>The proxy server will automatically notice the changes to the file and update the blacklist.</p>
<p>Surely, a proxy server without IP control is no proxy server, so let's add that as well:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"kd\">var</span> <span class=\"nx\">iplist</span>    <span class=\"o\">=</span> <span class=\"p\">[];</span>

<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_iplist</span><span class=\"p\">();</span> <span class=\"p\">});</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
              <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
              <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_iplist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating iplist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">iplist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
           <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">ip</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"kd\">var</span> <span class=\"nx\">allowed_ip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">iplist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iplist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">allowed_ip</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
      <span class=\"k\">break</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>

  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">allowed_ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;IP &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; is not allowed&quot;</span><span class=\"p\">);</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"k\">return</span><span class=\"p\">;</span>
  <span class=\"p\">}</span>

  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
      <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Denied: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
      <span class=\"k\">return</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>

  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>

<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
<span class=\"nx\">update_iplist</span><span class=\"p\">();</span>
</pre>
</div>
<p>By default the proxy server will not allow any connections, so add all the IPs you want the proxy to be accessible from to <code>iplist</code> file:</p>
<pre >
$ echo '1.2.3.4' >> iplist
</pre>
<p>Finally, let's refactor the code a little:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"kd\">var</span> <span class=\"nx\">iplist</span>    <span class=\"o\">=</span> <span class=\"p\">[];</span>

<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_iplist</span><span class=\"p\">();</span> <span class=\"p\">});</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
              <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
              <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_iplist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating iplist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">iplist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
           <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">ip_allowed</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">iplist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iplist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>
  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">host_allowed</span><span class=\"p\">(</span><span class=\"nx\">host</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">host</span><span class=\"p\">))</span> <span class=\"p\">{</span>
      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>
  <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">401</span><span class=\"p\">);</span>
  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">}</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"kd\">var</span> <span class=\"nx\">ip</span> <span class=\"o\">=</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">;</span>
  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">ip_allowed</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">))</span> <span class=\"p\">{</span>
    <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;IP &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; is not allowed to use this proxy&quot;</span><span class=\"p\">;</span>
    <span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"k\">return</span><span class=\"p\">;</span>
  <span class=\"p\">}</span>

  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">host_allowed</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
    <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Host &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; has been denied by proxy configuration&quot;</span><span class=\"p\">;</span>
    <span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"k\">return</span><span class=\"p\">;</span>
  <span class=\"p\">}</span>

  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary);</span>
<span class=\"s1\">  });</span>
<span class=\"s1\">  request.addListener(&#39;</span><span class=\"nx\">end</span><span class=\"err\">&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>

<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
<span class=\"nx\">update_iplist</span><span class=\"p\">();</span>
</pre>
</div>
<p>Again, it's amazing how fast you can write server software in node.js and JavaScript. It would have probably taken me a day to write the same in C. I love how fast you can prototype the software nowadays.</p>
<div class=\"download\"><div class=\"download-title\"><p>Download proxy.js</p>
</div>
<p>Download link: <a href=\"/download/proxy.js\" title=\"Download &quot;proxy server written in node.js&quot;\">proxy server written in node.js</a><br>
Download URL: <code>http://www.catonmat.net/download/proxy.js</code><br>
Downloaded: 1310 times</p>
<p>I am gonna build this proxy up, so I also put it on GitHub: <a href=\"http://github.com/pkrumins/nodejs-proxy\">proxy.js on GitHub</a></p>
</div>
<p>Happy proxying!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/kn7okZClh-E\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/http-proxy-in-nodejs")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Another Ten One-Liners from CommandLineFu Explained") (id nil "212") (updated nil "2010-04-30T11:54:34Z") (published nil "2010-04-20T21:05:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/u10fej7POxc/another-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Another week and another top ten one-liners from <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> explained.</p>
<p>This is the third post in the series already, covering one-liners 21-30. See the previous two posts for the introduction of the series and one-liners 1-20:</p>
<ul><li><a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained\">Part I: Top Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained\">Part II: The Next Ten One-Liners from CommandLineFu Explained</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/oneliners21_30.html\">Russian translation now available.</a></p>
<h2>#21. Display currently mounted file systems nicely</h2>
<pre >
$ mount | column -t
</pre>
<p>The file systems are not that important here. The <code>column -t</code> command is what is important. It takes the input and formats it into multiple columns so that all columns were aligned vertically.</p>
<p>Here is how the mounted filesystem list looks without <code>column -t</code> command:</p>
<pre >
$ mount

/dev/root on / type ext3 (rw)
/proc on /proc type proc (rw)
/dev/mapper/lvmraid-home on /home type ext3 (rw,noatime)
</pre>
<p>And now with <code>column -t</code> command:</p>
<pre >
$ mount | column -t

/dev/root                 on  /      type  ext3   (rw)
/proc                     on  /proc  type  proc   (rw)
/dev/mapper/lvmraid-home  on  /home  type  ext3   (rw,noatime)
</pre>
<p>You can improve this one-liner now by also adding column titles:</p>
<pre >
$ (echo \"DEVICE - PATH - TYPE FLAGS\" && mount) | column -t

DEVICE                    -   PATH   -     TYPE   FLAGS
/dev/root                 on  /      type  ext3   (rw)
/proc                     on  /proc  type  proc   (rw)
/dev/mapper/lvmraid-home  on  /home  type  ext3   (rw,noatime)
</pre>
<p>Columns 2 and 4 are not really necessary. We can use <code>awk</code> text processing utility to get rid of them:</p>
<pre >
$ (echo \"DEVICE PATH TYPE FLAGS\" && mount | awk '$2=$4=\"\";1') | column -t

DEVICE                    PATH   TYPE   FLAGS
/dev/root                 /      ext3   (rw)
/proc                     /proc  proc   (rw)
/dev/mapper/lvmraid-home  /home  ext3   (rw,noatime)
</pre>
<p>Finally, we can make it an alias so that we always enjoyed the nice output from mount. Let's call this alias <code>nicemount</code>:</p>
<pre >
$ nicemount() { (echo \"DEVICE PATH TYPE FLAGS\" && mount | awk '$2=$4=\"\";1') | column -t; }
</pre>
<p>Let's try it out:</p>
<pre >
$ nicemount

DEVICE                    PATH   TYPE   FLAGS
/dev/root                 /      ext3   (rw)
/proc                     /proc  proc   (rw)
/dev/mapper/lvmraid-home  /home  ext3   (rw,noatime)
</pre>
<p>It works!</p>
<h2>#22. Run the previous shell command but replace every \"foo\" with \"bar\"</h2>
<pre >$ !!:gs/foo/bar</pre>
<p>I explained this type of one-liners in <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained\">one-liner #5 already</a>. Please take a look for a longer discussion.</p>
<p>To summarize, what happens here is that the <code>!!</code> recalls the previous executed shell command and <code>:gs/foo/bar</code> substitutes (the <code>:s</code> flag) all (the <code>g</code> flag) occurrences of <code>foo</code> with <code>bar</code>. The <code>!!</code> construct is called an event designator.</p>
<h2>#23. Top for files</h2>
<pre >$ watch -d -n 1 'df; ls -FlAt /path'</pre>
<p>This one-liner watches for file changes in directory <code>/path</code>. It uses the <code>watch</code> command that executes the given command periodically. The <code>-d</code> flag tells <code>watch</code> to display differences between the command calls (so you saw what files get added or removed in <code>/path</code>). The <code>-n 1</code> flag tells it to execute the command every second.</p>
<p>The command to execute is <code>df; ls -FlAt /path</code> that is actually two commands, executed one after other. First, <code>df</code> outputs the filesystem disk space usage, and then <code>ls -FlAt</code> lists the files in <code>/path</code>. The <code>-F</code> argument to <code>ls</code> tells it to classify files, appending <code>*/=>@|</code> to the filenames to indicate whether they are executables <code>*</code>, directories <code>/</code>, sockets <code>=</code>, doors <code>></code>, symlinks <code>@</code>, or named pipes <code>|</code>. The <code>-l</code> argument lists all files, <code>-A</code> hides <code>.</code> and <code>..</code>, and <code>-t</code> sorts the files by time.</p>
<p>Special note about doors - they are Solaris thing that act like pipes, except they launch the program that is supposed to be the receiving party. A plain pipe would block until the other party opens it, but a door launches the other party itself.</p>
<p>Actually the output is nicer if you specify <code>-h</code> argument to <code>df</code> so it was human readable. You can also join the arguments to <code>watch</code> together, making them <code>-dn1</code>. Here is the final version:</p>
<pre >
$ watch -dn1 'df -h; ls -FlAt /path'
</pre>
<p>Another note - <code>-d</code> in BSD is <code>--differences</code></p>
<h2>#24. Mount a remote folder through SSH</h2>
<pre >$ sshfs name@server:/path/to/folder /path/to/mount/point</pre>
<p>That's right, you can mount a remote directory locally via SSH! You'll first need to install two programs however:</p>
<ul>  <li><a href=\"http://fuse.sourceforge.net/\">FUSE</a> that allows to implement filesystems in userspace programs, and</li>
  <li><a href=\"http://fuse.sourceforge.net/sshfs.html\">sshfs</a> client that uses FUSE and <code>sftp</code> (secure ftp - comes with OpenSSH, and is on your system already) to access the remote host.</li>
</ul>
<p>And that's it, now you can use <code>sshfs</code> to mount remote directories via SSH.</p>
<p>To unmount, use <code>fusermount</code>:</p>
<pre >fusermount -u /path/to/mount/point</pre>
<h2>#25. Read Wikipedia via DNS</h2>
<pre >$ dig +short txt &lt;keyword>.wp.dg.cx</pre>
<p>This is probably the most interesting one-liner today. <a href=\"https://dgl.cx/\">David Leadbeater</a> created a <a href=\"https://dgl.cx/wikipedia-dns\">DNS server</a>, which when queried the TXT record type, returns a short plain-text version of a Wikipedia article. Here is his <a href=\"http://dgl.cx/2008/11/wpdns-pres/\">presentation</a> on he did it.</p>
<p>Here is an example, let's find out what \"hacker\" means:</p>
<pre >
$ dig +short txt hacker.wp.dg.cx

\"Hacker may refer to: Hacker (computer security), someone involved
in computer security/insecurity, Hacker (programmer subculture), a
programmer subculture originating in the US academia in the 1960s,
which is nowadays mainly notable for the free software/\" \"open
source movement, Hacker (hobbyist), an enthusiastic home computer
hobbyist http://a.vu/w:Hacker\"
</pre>
<p>The one-liner uses <code>dig</code>, the standard sysadmin's utility for DNS troubleshooting to do the DNS query. The <code>+short</code> option makes it output only the returned text response, and <code>txt</code> makes it query the TXT record type.</p>
<p>This one-liner is actually alias worthy, so let's make an alias:</p>
<pre >wiki() { dig +short txt $1.wp.dg.cx; }</pre>
<p>Try it out:</p>
<pre >
$ wiki hacker

\"Hacker may refer to: Hacker (computer security), ...\"
</pre>
<p>It works!</p>
<p>If you don't have <code>dig</code>, you may also use <code>host</code> that also performs DNS lookups:</p>
<pre >host -t txt hacker.wp.dg.cx</pre>
<h2>#26. Download a website recursively with wget</h2>
<pre >$ wget --random-wait -r -p -e robots=off -U Mozilla www.example.com</pre>
<p>This one-liner does what it says. Here is the explanation of the arguments:</p>
<ul> <li><code>--random-wait</code> - wait between 0.5 to 1.5 seconds between requests.</li>
 <li><code>-r</code> - turn on recursive retrieving.</li>
 <li><code>-e robots=off</code> - ignore robots.txt.</li>
 <li><code>-U Mozilla</code> - set the \"User-Agent\" header to \"Mozilla\". Though a better choice is a real User-Agent like \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729)\".</li>
</ul>
<p>Some other useful options are:</p>
<ul> <li><code>--limit-rate=20k</code> - limits download speed to 20kbps.</li>
 <li><code>-o logfile.txt</code> - log the downloads.</li>
 <li><code>-l 0</code> - remove recursion depth (which is 5 by default).</li>
 <li><code>--wait=1h</code> - be sneaky, download one file every hour.</li>
</ul>
<h2>#27. Copy the arguments of the most recent command</h2>
<pre >ALT + . (or ESC + .)</pre>
<p>This keyboard shortcut works in shell's <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">emacs editing mode</a> only, it copies the last argument form the last command to the current command. Here is an example:</p>
<pre >
$ echo a b c
a b c

$ echo &lt;Press ALT + .>
$ echo c
</pre>
<p>If you repeat the command, it copies the last argument from the command before the last, then if you repeat again, it copies the last argument from command before the command before the last, etc.</p>
<p>Here is an example:</p>
<pre >
$ echo 1 2 3
1 2 3
$ echo a b c
a b c

$ echo &lt;Press ALT + .>
$ echo c

$ echo &lt;Press ALT + .> again
$ echo 3
</pre>
<p>However, if you wish to get 1st or 2nd or n-th argument, use the digit-argument command <code>ALT + 1 (or ESC + 1)</code> or <code>ALT + 2 (or ESC +2)</code>, etc. Here is an example:</p>
<pre >
$ echo a b c
a b c

$ echo &lt;Press ALT + 1> &lt;Press ALT + .>
$ echo a
a

$ echo &lt;Press ALT + 2> &lt;Press ALT + .>
$ echo b
b
</pre>
<p>See my article on <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">Emacs Editing Mode Keyboard Shortcuts</a> for a tutorial and a cheat sheet of all the shortcuts.</p>
<h2>#28. Execute a command without saving it in the history</h2>
<pre >$ &lt;space>command</pre>
<p>This one-liner works at least on bash, I haven't tested other shells.</p>
<p>If you start your command by a space, it won't be saved to bash history (~/.bash_history file). This behavior is controlled by <code>$HISTIGNORE</code> shell variable. Mine is set to <code>HISTIGNORE=\"&:[ ]*\"</code>, which means don't save repeated commands to history, and don't save commands that start with a space to history. The values in <code>$HISTIGNORE</code> are colon-separated.</p>
<p>If you're interested, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>\" for a short tutorial on how to work with shell history and a summary cheat sheet.</p>
<h2>#29. Show the size of all sub folders in the current directory</h2>
<pre >$ du -h --max-depth=1</pre>
<p>The <code>--max-depth=1</code> causes <code>du</code> to summarize disk usage statistics for directories that are depth 1 from the current directory, that is, all directories in the current directory. The <code>-h</code> argument makes the summary human-readable, that is, displays 5MB instead of 5242880 (bytes).</p>
<p>If you are interested in both sub folder size and file size in the current directory, you can use the shorter:</p>
<pre >$ du -sh *</pre>
<h2>#30. Display the top ten running processes sorted by memory usage</h2>
<pre >$ ps aux | sort -nk +4 | tail</pre>
<p>This is certainly not the best way to display the top ten processes that consume the most memory, but, hey, it works.</p>
<p>It takes the output of <code>ps aux</code>, <code>sort</code>s it by 4th column numerically and then uses <code>tail</code> to output the last then lines which happen to be the processes with the biggest memory consumption.</p>
<p>If I was to find out who consumes the most memory, I'd simply use <code>htop</code> or <code>top</code> and not <code>ps</code>.</p>
<h2>Bonus one-liner: Start an SMTP server</h2>
<pre >python -m smtpd -n -c DebuggingServer localhost:1025</pre>
<p>This one-liner starts an SMTP server on port 1025. It uses Python's standard library <code>smtpd</code> (specified by <code>-m smtpd</code>) and passes it three arguments - <code>-n</code>, <code>-c DebuggingServer</code> and <code>localhost:1025</code>.</p>
<p>The <code>-n</code> argument tells Python not to setuid (change user) to \"nobody\" - it makes the code run under your user.</p>
<p>The <code>-c DebuggingServer</code> argument tells Python to use <code>DebuggingServer</code> class as the SMTP implementation that prints each message it receives to stdout.</p>
<p>The <code>localhost:1025</code> argument tells Python to start the SMTP server on locahost, port 1025.</p>
<p>However, if you wish to start it on the standard port 25, you'll have to use <code>sudo</code> command, because only root is allowed to start services on ports 1-1024. These are also known as privileged ports.</p>
<pre >sudo python -m smtpd -n -c DebuggingServer localhost:25</pre>
<p>This one-liner was coined by <a href=\"http://evanculver.com/2010/03/18/handy-one-liners/\">Evan Culver</a>. Thanks to him!</p>
<h2>That's it for today,</h2>
<p>but be sure to come back the next time for \"Yet Another Ten One-Liners from CommandLineFu Explained!\"</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/u10fej7POxc\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "A Real Turing Machine Running The Busy Beaver") (id nil "210") (updated nil "2010-03-29T09:45:37Z") (published nil "2010-03-29T05:15:45Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/b1VVNTQ28Ao/a-real-turing-machine-running-the-busy-beaver"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Remember my article on <a href=\"http://www.catonmat.net/blog/busy-beaver/\">The Busy Beaver Problem</a>? Well, someone built a real Turing Machine and decided to run the busy beaver with 4 states on it. Here is the video.</p>
<div class=\"center-aligner\"><object width=\"480\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/2PjU6DJyBpw&hl=en_US&fs=1&\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/2PjU6DJyBpw&hl=en_US&fs=1&\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"385\"></embed>
</object>
<p>Video URL: <a href=\"http://www.youtube.com/watch?v=2PjU6DJyBpw\">http://www.youtube.com/watch?v=2PjU6DJyBpw</a></p>
</div>
<p>The Turing Machine in this video runs for 107 steps and halts with the total of 13 ones, as expected.</p>
<p>In <a href=\"http://www.catonmat.net/blog/busy-beaver/\">my article on The Busy Beaver Problem</a>, I also wrote a program that visualizes the tape changes. If you follow the video closely, you'll see that they match the visualization (black square stands for 1, white for 0).</p>
<div class=\"center-aligner\"><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2009/10/busy-beaver-four-states.png\"><br>
<small>Tape changes for 4 state busy beaver.</small></p>
</div>
<p>See <a href=\"http://aturingmachine.com\">A Turing Machine</a> website for more videos and information about how this machine was actually built. Also see <a href=\"http://www.catonmat.net/blog/busy-beaver/\">my article on Busy Beaver</a> for a Turing Machine implementation in Python and C++.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/b1VVNTQ28Ao\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/a-real-turing-machine-running-the-busy-beaver")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "The Next Ten One-Liners from CommandLineFu Explained") (id nil "208") (updated nil "2010-04-30T11:53:56Z") (published nil "2010-03-24T06:00:57Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/IbHTZFjHPU0/the-next-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Here are the next ten top one-liners from the <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> website. The <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">first post</a> about the topic became massively popular and received over 100,000 views in the first two days.</p>
<p>Before I dive into the next ten one-liners, I want to take the chance and promote the other three article series on one-liners that I have written:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/awk-one-liners-explained-part-one/\">Awk One-Liners Explained (4 part article).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/sed-one-liners-explained-part-one/\">Sed One-Liners Explained (3 part article).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/perl-one-liners-explained-part-one/\">Perl One-Liners Explained (9 part article, work in progress).</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/next_ten_oneliners.html\">Russian translation now available.</a></p>
<p>Alright, so here are today's one-liners:</p>
<h2 style=\"margin-bottom: 10px\">#11. Edit the command you typed in your favorite editor</h2>
<pre >$ command &lt;CTRL-x CTRL-e></pre>
<p>This one-liner opens the so-far typed <code>command</code> in your favorite text editor for further editing. This is handy if you are typing a lengthier shell command. After you have done editing the command, quit from your editor successfully to execute it. To cancel execution, just erase it. If you quit unsuccessfully, the command you had typed before diving into the editor will be executed.</p>
<p>Actually, I have to educate you, it's not a feature of the shell per se but a feature of the <a href=\"http://tiswww.case.edu/php/chet/readline/rltop.html\">readline library</a> that most shells use for command line processing. This particular binding <code>CTRL-x CTRL-e</code> only works in <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">readline emacs editing mode</a>. The other mode is <a href=\"http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/\">readline vi editing mode</a>, in which the same can be accomplished by pressing <code>ESC</code> and then <code>v</code>.</p>
<p>The emacs editing mode is the default in all the shells that use the readline library. The usual command to change between the modes is <code>set -o vi</code> to change to vi editing mode and <code>set -o emacs</code> to change back to emacs editing mode.</p>
<p>To change the editor, export the <code>$EDITOR</code> shell variable to your preference. For example, to set the default editor to pico, type <code>export EDITOR=pico</code>.</p>
<p>Another way to edit commands in a text editor is to use <code>fc</code> shell builtin (at least bash has this builtin). The <code>fc</code> command opens the previous edited command in your favorite text editor. It's easy to remember the <code>fc</code> command because it stands for \"<strong>f</strong>ix <strong>c</strong>ommand.\"</p>
<p>Remember the <code>^foo^bar^</code> command from the <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">first top ten one-liners</a>? You can emulate this behavior by typing <code>fc -s foo=bar</code>. It will replace <code>foo</code> with <code>bar</code> in the previous command and execute it.</p>
<h2 style=\"margin-bottom: 10px\">#12. Empty a file or create a new file</h2>
<pre >$ > file.txt</pre>
<p>This one-liner either wipes the file called <code>file.txt</code> empty or creates a new file called <code>file.txt</code>.</p>
<p>The shell first checks if the file <code>file.txt</code> exists. If it does, the shell opens it and wipes it clean. If it doesn't exist, the shell creates the file and opens it. Next the shell proceeds to redirecting standard output to the opened file descriptor. Since there is nothing on the standard output, the command succeeds, closes the file descriptor, leaving the file empty.</p>
<p>Creating a new empty file is also called <em>touching</em> and can be done by <code>$ touch file.txt</code> command. The <code>touch</code> command can also be used for changing timestamps of the commands. Touch, however, won't wipe the file clean, it will only change the access and modification timestamps to the current time.</p>
<h2 style=\"margin-bottom: 10px\">#13. Create a tunnel from localhost:2001 to somemachine:80</h2>
<pre >$ ssh -N -L2001:localhost:80 somemachine</pre>
<p>This one-liner creates a tunnel from your computer's port 2001 to somemachine's port 80. Each time you connect to port 2001 on your machine, your connection gets tunneled to somemachine:80.</p>
<p>The <code>-L</code> option can be summarized as <code>-L port:host:hostport</code>. Whenever a connection is made to <code>localhost:port</code>, the connection is forwarded over the secure channel, and a connection is made to <code>host:hostport</code> from the remote machine.</p>
<p>The <code>-N</code> option makes sure you don't run shell as you connect to somemachine.</p>
<p>To make things more concrete, here is another example:</p>
<pre >$ ssh -f -N -L2001:www.google.com:80 somemachine</pre>
<p>This one-liner creates a tunnel from your computer's port 2001 to www.google.com:80 via somemachine. Each time you connect to localhost:2001, ssh tunnels your request via somemachine, where it tries to open a connection to www.google.com.</p>
<p>Notice the additional <code>-f</code> flag - it makes ssh daemonize (go into background) so it didn't consume a terminal.</p>
<h2 style=\"margin-bottom: 10px\">#14. Reset terminal</h2>
<pre >$ reset</pre>
<p>This command resets the terminal. You know, when you have accidentally output binary data to the console, it becomes messed up. The <code>reset</code> command usually cleans it up. It does that by sending a bunch of special byte sequences to the terminal. The terminal interprets them as special commands and executes them.</p>
<p>Here is what BusyBox's <code>reset</code> command does:</p>
<pre >printf(\"\\033c\\033(K\\033[J\\033[0m\\033[?25h\");</pre>
<p>It sends a bunch of escape codes and a bunch of CSI commands. Here is what they mean:</p>
<ul>	<li><code>\\033c</code>: \"ESC c\" - sends reset to the terminal.</li>
	<li><code>\\033(K</code>: \"ESC ( K\" - reloads the screen output mapping table.</li>
	<li><code>\\033[J</code>: \"ESC [ J\" - erases display.</li>
	<li><code>\\033[0m</code>: \"ESC [ 0 m\" - resets all display attributes to their defaults.</li>
	<li><code>\\033[?25h</code>: \"ESC [ ? 25 h\" - makes cursor visible.</li>
</ul>
<h2 style=\"margin-bottom: 10px\">#15. Tweet from the shell</h2>
<pre >$ curl -u user:pass -d status='Tweeting from the shell' http://twitter.com/statuses/update.xml</pre>
<p>This one-liner tweets your message from the terminal. It uses the <a href=\"http://curl.haxx.se/\">curl</a> program to HTTP POST your tweet via <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update\">Twitter's API</a>.</p>
<p>The <code>-u user:pass</code> argument sets the login and password to use for authentication. If you don't wish your password to be saved in the shell history, omit the <code>:pass</code> part and curl will prompt you for the password as it tries to authenticate. Oh, and while we are at shell history, another way to omit password from being saved in the history is to start the command with a space! For example, <code>&lt;space>curl ...</code> won't save the curl command to the shell history.</p>
<p>The <code>-d status='...'</code> instructs curl to use the HTTP POST method for the request and send <code>status=...</code> as POST data.</p>
<p>Finally, <code>http://twitter.com/statuses/update.xml</code> is the API URL to POST the data to.</p>
<p>Talking about Twitter, I'd love if you <a href=\"http://twitter.com/pkrumins\">followed me on Twitter!</a> :)</p>
<h2 style=\"margin-bottom: 10px\">#16. Execute a command at midnight</h2>
<pre >$ echo cmd | at midnight</pre>
<p>This one-liner sends the shell command <code>cmd</code> to the at-daemon (atd) for execution at midnight.</p>
<p>The <code>at</code> command is light on the execution-time argument, you may write things like <code>4pm tomorrow</code> to execute it at 4pm tomorrow, <code>9pm next year</code> to run it on the same date at 9pm the next year, <code>6pm + 10 days</code> to run it at 6pm after 10 days, or <code>now +1minute</code> to run it after a minute.</p>
<p>Use <code>atq</code> command to list all the jobs that are scheduled for execution and <code>atrm</code> to remove a job from the queue.</p>
<p>Compared to the universally known <code>cron</code>, <code>at</code> is suitable for one-time jobs. For example, you'd use <code>cron</code> to execute a job every day at midnight but you would use <code>at</code> to execute a job only today at midnight.</p>
<p>Also be aware that if the load is greater than some number (for one processor systems the default is 0.8), then <code>atd</code> <strong>will not</strong> execute the command! That can be fixed by specifying a greater max load to <code>atd</code> via <code>-l</code> argument.</p>
<h2 style=\"margin-bottom: 10px\">#17. Output your microphone to other computer's speaker</h2>
<pre >$ dd if=/dev/dsp | ssh username@host dd of=/dev/dsp</pre>
<p>The default sound device on Linux is <code>/dev/dsp</code>. It can be both written to and read from. If it's read from then the audio subsystem will read the data from the microphone. If it's written to, it will send audio to your speaker.</p>
<p>This one-liner reads audio from your microphone via the <code>dd if=/dev/dsp</code> command (<code>if</code> stands for input file) and pipes it as standard input to <code>ssh</code>. <code>Ssh</code>, in turn, opens a connection to a computer at <code>host</code> and runs the <code>dd of=/dev/dsp</code> (<code>of</code> stands for output file) on it. <code>Dd of=/dev/dsp</code> receives the standard input that <code>ssh</code> received from <code>dd if=/dev/dsp</code>. The result is that your microphone gets output on <code>host</code> computer's speaker.</p>
<p>Want to scare your colleague? Dump <code>/dev/urandom</code> to his speaker by <code>dd if=/dev/urandom</code>.</p>
<h2 style=\"margin-bottom: 10px\">#18. Create and mount a temporary RAM partition</h2>
<pre ># mount -t tmpfs -o size=1024m tmpfs /mnt </pre>
<p>This command creates a temporary RAM filesystem of 1GB (1024m) and mounts it at <code>/mnt</code>. The <code>-t</code> flag to mount specifies the filesystem type and the <code>-o size=1024m</code> passes the <code>size</code> sets the filesystem size.</p>
<p>If it doesn't work, make sure your kernel was compiled to support the tmpfs. If tmpfs was compiled as a module, make sure to load it via <code>modprobe tmpfs</code>. If it still doesn't work, you'll have to recompile your kernel.</p>
<p>To unmount the ram disk, use the <code>umount /mnt</code> command (as root). But remember that mounting at <code>/mnt</code> is not the best practice. Better mount your drive to <code>/mnt/tmpfs</code> or a similar path.</p>
<p>If you wish your filesystem to grow dynamically, use <code>ramfs</code> filesystem type instead of <code>tmpfs</code>. Another note: tmpfs may use swap, while ramfs won't.</p>
<h2 style=\"margin-bottom: 10px\">#19. Compare a remote file with a local file</h2>
<pre >$ ssh user@host cat /path/to/remotefile | diff /path/to/localfile -</pre>
<p>This one-liner diffs the file <code>/path/to/localfile</code> on local machine with a file <code>/path/to/remotefile</code> on <code>host</code> machine.</p>
<p>It first opens a connection via <code>ssh</code> to <code>host</code> and executes the <code>cat /path/to/remotefile</code> command there. The shell then takes the output and pipes it to <code>diff /path/to/localfile -</code> command. The second argument <code>-</code> to <code>diff</code> tells it to diff the file <code>/path/to/localfile</code> against standard input. That's it.</p>
<h2 style=\"margin-bottom: 10px\">#20. Find out which programs listen on which TCP ports</h2>
<pre ># netstat -tlnp</pre>
<p>This is an easy one. Netstat is the standard utility for listing information about Linux networking subsystem. In this particular one-liner it's called with <code>-tlnp</code> arguments:</p>
<ul>	<li><code>-t</code> causes netstat to only list information about TCP sockets.</li>
	<li><code>-l</code> causes netstat to only list information about listening sockets.</li>
	<li><code>-n</code> causes netstat not to do reverse lookups on the IPs.</li>
	<li><code>-p</code> causes netstat to print the PID and name of the program to which the socket belongs (requires root).</li>
</ul>
<p>To find more detailed info about open sockets on your computer, use the <code>lsof</code> utility. See my article \"<a href=\"http://www.catonmat.net/blog/unix-utilities-lsof/\">A Unix Utility You Should Know About: lsof</a>\" for more information.</p>
<h2 style=\"margin-bottom: 10px\">That's it for today.</h2>
<p>Tune in the next time for \"Another Ten One-Liners from CommandLineFu Explained\". There are many more nifty commands to write about. But for now, have fun and see ya!</p>
<p>PS. <a href=\"http://twitter.com/pkrumins\">Follow me on twitter for updates!</a></p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/IbHTZFjHPU0\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained")) (entry ((xml:base . "http://www.catonmat.net/feed")) (title ((type . "text")) "Top Ten One-Liners from CommandLineFu Explained") (id nil "195") (updated nil "2010-09-08T17:03:45Z") (published nil "2010-03-18T03:00:21Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/crt1jT0uPnU/top-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg' alt='CommandLineFu Explained' class=\"post-icon\" align=\"left\">I love working in the shell. Mastery of shell lets you get things done in seconds, rather than minutes or hours, if you chose to write a program instead. </p>
<p>In this article I'd like to explain the <a href=\"http://www.commandlinefu.com/commands/browse/sort-by-votes\">top one-liners</a> from the <a href=\"http://www.commandlinefu.com\">commandlinefu.com</a>. It's a user-driven website where people get to choose the best and most useful shell one-liners.</p>
<p>But before I do that, I want to take the opportunity and link to a few of my articles that I wrote some time ago on working efficiently in the command line:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/\">Working Efficiently in Bash (Part I).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">Working Efficiently in Bash (Part II).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History.</a></li>
	<li><a href=\"http://www.catonmat.net/blog/set-operations-in-unix-shell/\">A fun article on Set Operations in the Shell.</a></li>
	<li><a href=\"http://www.catonmat.net/blog/solving-google-treasure-hunt-prime-number-problem-four/\">Another fun article on Solving Google Treasure Hunt in the Shell.</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/oneliners.html\">Russian translation now available.</a></p>
<p>And now the explanation of top one-liners from commandlinefu.</p>
<h2 style=\"margin-bottom: 10px\">#1. Run the last command as root</h2>
<pre >$ sudo !!</pre>
<p>We all know what the <code>sudo</code> command does - it runs the command as another user, in this case, it runs the command as superuser because no other user was specified. But what's really interesting is the bang-bang <code>!!</code> part of the command. It's called the <strong>event designator</strong>. An event designator references a command in shell's history. In this case the event designator references the previous command. Writing <code>!!</code> is the same as writing <code>!-1</code>. The <code>-1</code> refers to the last command. You can generalize it, and write <code>!-n</code> to refer to the n-th previous command. To view all your previous commands, type <code>history</code>.</p>
<p>This one-liner is actually really bash-specific, as event designators are a feature of bash.</p>
<p>I wrote about event designators in much more detail in my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" The article also comes with a printable cheat sheet for working with the history.</p>
<h2 style=\"margin-bottom: 10px\">#2. Serve the current directory at http://localhost:8000/</h2>
<pre >$ python -m SimpleHTTPServer</pre>
<p>This one-liner starts a <a href=\"http://www.webhostingsearch.com/dedicated-server.php\">dedicated server hosting</a> (web server) on port 8000 with the contents of current directory on all the interfaces (address 0.0.0.0), not just localhost. If you have \"<code>index.html</code>\" or \"<code>index.htm</code>\" files, it will serve those, otherwise it will list the contents of the currently working directory.</p>
<p>It works because python comes with a standard module called <code>SimpleHTTPServer</code>. The <code>-m</code> argument makes python to search for a module named <code>SimpleHTTPServer.py</code> in all the possible system locations (listed in <code>sys.path</code> and <code>$PYTHONPATH</code> shell variable). Once found, it executes it as a script. If you look at the source code of this module, you'll find that this module tests if it's run as a script <code>if __name__ == '__main__'</code>, and if it is, it runs the <code>test()</code> method that makes it run a web server in the current directory.</p>
<p>To use a different port, specify it as the next argument:</p>
<pre >$ python -m SimpleHTTPServer 8080</pre>
<p>This command runs a HTTP server on all local interfaces on port 8080.</p>
<p>If you're looking for hosting your website, check out <a href=\"http://www.webhostingsearch.com\">webhosting</a>.</p>
<h2 style=\"margin-bottom: 10px\">#3. Save a file you edited in vim without the needed permissions</h2>
<pre >:w !sudo tee %</pre>
<p>This happens to me way too often. I open a system config file in vim and edit it just to find out that I don't have permissions to save it. This one-liner saves the day. Instead of writing the while to a temporary file <code>:w /tmp/foobar</code> and then moving the temporary file to the right destination <code>mv /tmp/foobar /etc/service.conf</code>, you now just type the one-liner above in vim and it will save the file.</p>
<p>Here is how it works, if you look at the vim documentation (by typing <code>:he :w</code> in vim), you'll find the reference to the command <code>:w !{cmd}</code> that says that vim runs <code>{cmd}</code> and passes it the contents of the file as standard input. In this one-liner the <code>{cmd}</code> part is the <code>sudo tee %</code> command. It runs <code>tee %</code> as superuser. But wait, what is <code>%</code>? Well, it's a read-only register in vim that contains the filename of the current file! Therefore the command that vim executes becomes <code>tee current_filename</code>, with the current directory being whatever the <code>current_file</code> is in. Now what does <code>tee</code> do? The <code>tee</code> command takes standard input and write it to a file! Rephrasing, it takes the contents of the file edited in vim, and writes it to the file (while being root)! All done!</p>
<h2 style=\"margin-bottom: 10px\">#4. Change to the previous working directory</h2>
<pre >$ cd -</pre>
<p>Everyone knows this, right? The dash \"<code>-</code>\" is short for \"previous working directory.\" The previous working directory is defined by <code>$OLDPWD</code> shell variable. After you use the <code>cd</code> command, it sets the <code>$OLDPWD</code> environment variable, and then, if you type the short version <code>cd -</code>, it effectively becomes <code>cd $OLDPWD</code> and changes to the previous directory.</p>
<p>To change to a directory named \"<code>-</code>\", you have to either cd to the parent directory and then do <code>cd ./-</code> or do <code>cd /full/path/to/-</code>.</p>
<h2 style=\"margin-bottom: 10px\">#5. Run the previous shell command but replace string \"foo\" with \"bar\"</h2>
<pre >$ ^foo^bar^</pre>
<p>This is another event designator. This one is for quick substitution. It replaces <code>foo</code> with <code>bar</code> and repeats the last command. It's actually a shortcut for <code>!!:s/foo/bar/</code>. This one-liner applies the <code>s</code> modifier to the <code>!!</code> event designator. As we learned from one-liner #1, the <code>!!</code> event designator stands for the previous command. Now the <code>s</code> modifier stands for substitute (greetings to <a href=\"http://www.catonmat.net/blog/sed-one-liners-explained-part-one/\">sed</a>) and it substitutes the first word with the second word.</p>
<p>Note that this one-liner replaces just the first word in the previous command. To replace all words, add the <code>g</code> modifer (<code>g</code> for global):</p>
<pre >$ !!:gs/foo/bar</pre>
<p>This one-liner is also bash-specific, as event designators are a feature of bash.</p>
<p>Again, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" I explain all this stuff in great detail.</p>
<h2 style=\"margin-bottom: 10px\">#6. Quickly backup or copy a file</h2>
<pre >$ cp filename{,.bak}</pre>
<p>This one-liner copies the file named <code>filename</code> to a file named <code>filename.bak</code>. Here is how it works. It uses <strong>brace expansion</strong> to construct a list of arguments for the <code>cp</code> command. Brace expansion is a mechanism by which arbitrary strings may be generated. In this one-liner <code>filename{,.bak}</code> gets brace expanded to <code>filename filename.bak</code> and puts in place of the brace expression. The command becomes <code>cp filename filename.bak</code> and file gets copied.</p>
<p>Talking more about brace expansion, you can do all kinds of combinatorics with it. Here is a fun application:</p>
<pre >$ echo {a,b,c}{a,b,c}{a,b,c}</pre>
<p>It generates all the possible strings 3-letter from the set <code>{a, b, c}</code>:</p>
<pre >
aaa aab aac aba abb abc aca acb acc
baa bab bac bba bbb bbc bca bcb bcc
caa cab cac cba cbb cbc cca ccb ccc
</pre>
<p>And here is how to generate all the possible 2-letter strings from the set of <code>{a, b, c}</code>:</p>
<pre >
$ echo {a,b,c}{a,b,c}
</pre>
<p>It produces:</p>
<pre >
aa ab ac ba bb bc ca cb cc
</pre>
<p>If you liked this, you may also like my article where I defined a bunch of set operations (such as intersection, union, symmetry, powerset, etc) by using just shell commands. The article is called \"<a href=\"http://www.catonmat.net/blog/set-operations-in-unix-shell/\">Set Operations in the Unix Shell</a>.\" (And since I have sets in the shell, I will soon write articles on on \"<strong>Combinatorics in the Shell</strong>\" and \"<strong>Algebra in the Shell</strong>\". Fun topics to explore. Perhaps even \"Topology in the Shell\" :))</p>
<h2 style=\"margin-bottom: 10px\">#7. mtr - traceroute and ping combined</h2>
<pre >$ mtr google.com</pre>
<p>MTR, bettern known as \"Matt's Traceroute\" combines both <code>traceroute</code> and <code>ping</code> command. After each successful hop, it sends a ping request to the found machine, this way it produces output of both <code>traceroute</code> and <code>ping</code> to better understand the quality of link. If it finds out a packet took an alternative route, it displays it, and by default it keeps updating the statistics so you knew what was going on in real time.</p>
<h2 style=\"margin-bottom: 10px\">#8. Find the last command that begins with \"whatever,\" but avoid running it</h2>
<pre >$ !whatever:p</pre>
<p>Another use of event designators. The <code>!whatever</code> designator searches the shell history for the most recently executed command that starts with <code>whatever</code>. But instead of executing it, it prints it. The <code>:p</code> modifier makes it print instead of executing.</p>
<p>This one-liner is bash-specific, as event designators are a feature of bash.</p>
<p>Once again, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" I explain all this stuff in great detail.</p>
<h2 style=\"margin-bottom: 10px\">#9. Copy your public-key to remote-machine for public-key authentication</h2>
<pre >$ ssh-copy-id remote-machine</pre>
<p>This one-liner copies your public-key, that you generated with <code>ssh-keygen</code> (either SSHv1 file identity.pub or SSHv2 file id_rsa.pub) to the <code>remote-machine</code> and places it in <code>~/.ssh/authorized_keys</code> file. This ensures that the next time you try to log into that machine, public-key authentication (commonly referred to as \"passwordless authentication.\") will be used instead of the regular password authentication.</p>
<p>If you wished to do it yourself, you'd have to take the following steps:</p>
<pre >
your-machine$ scp ~/.ssh/identity.pub remote-machine:
your-machine$ ssh remote-machine
remote-machine$ cat identity.pub >> ~/.ssh/authorized_keys
</pre>
<p>This one-liner saves a great deal of typing. Actually I just found out that there was a shorter way to do it:</p>
<pre >
your-machine$ ssh remote-machine 'cat >> .ssh/authorized_keys' &lt; .ssh/identity.pub
</pre>
<h2 style=\"margin-bottom: 10px\">#10. Capture video of a linux desktop</h2>
<pre >$ ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq /tmp/out.mpg</pre>
<p>A pure coincidence, I have done so much video processing with ffmpeg that I know what most of this command does without looking much in the manual.</p>
<p>The ffmpeg generally can be descibed as a command that takes a bunch of options and the last option is the output file. In this case the options are <code>-f x11grab -s wxga -r 25 -i :0.0 -sameq</code> and the output file is <code>/tmp/out.mpg</code>.</p>
<p>Here is what the options mean:</p>
<ul>	<li><code>-f x11grab</code> makes ffmpeg to set the input video format as x11grab. The X11 framebuffer has a specific format it presents data in and it makes ffmpeg to decode it correctly.</li>
	<li><code>-s wxga</code> makes ffmpeg to set the size of the video to wxga which is shortcut for 1366x768. This is a strange resolution to use, I'd just write <code>-s 800x600</code>.</li>
	<li><code>-r 25</code> sets the framerate of the video to 25fps.</li>
	<li><code>-i :0.0</code> sets the video input file to X11 display 0.0 at localhost.</li>
	<li><code>-sameq</code> preserves the quality of input stream. It's best to preserve the quality and post-process it later.</li>
</ul>
<p>You can also specify ffmpeg to grab display from another x-server by changing the <code>-i :0.0</code> to <code>-i host:0.0</code>.</p>
<p>If you're interested in ffmpeg, here are my other articles on ffmpeg that I wrote while ago:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/how-to-extract-audio-tracks-from-youtube-videos/\">How to Extract Audio Tracks from YouTube Videos</a></li>
	<li><a href=\"http://www.catonmat.net/blog/converting-youtube-flvs-to-a-better-format-with-ffmpeg/\">Converting YouTube Flash Videos to a Better Format with ffmpeg</a></li>
</ul>
<p>PS. This article was so fun to write, that I decided to write several more parts. Tune in the next time for \"The Next Top Ten One-Liners from CommandLineFu Explained\" :)</p>
<p>Have fun. See ya!</p>
<p>PSS. <a href=\"http://twitter.com/pkrumins\">Follow me on twitter for updates</a>.</p>
<p><strong>This article was sponsored by:</strong></p>
<ul> <li><a href=\"http://www.netfirms.ca/\">Canadian domain names</a> available through Netfirms.ca</li>
 <li>Hosting.com offers <a href=\"http://www.hosting.com/dedicatedservershosting/\">Dedicated server hosting</a></li>
 <li>Advanceware's <a href=\"http://www.advanceware.net/\">Inventory management software</a> can help you organize your resources.</li>
 <li>Sherweb provides <a href=\"http://www.sherweb.com/hosted-exchange\">Hosted Exchange</a> solutions for your small business.</li>
</ul>
<p><a href=\"http://www.catonmat.net/feedback/?subject=Interested+in+Sponsoring+Articles\">Contact me</a>, if you wish to sponsor any other of my existing posts or future posts!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/crt1jT0uPnU\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained")))) ("Introducing node-lazy - lazy lists for node.js" "<p><a href=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>I wrote an awesome node.js module for use at <a href=\"http://stackvm.com\">StackVM</a> - a module called <a href=\"http://github.com/pkrumins/node-lazy\">node-lazy</a> that does lazy list processing through events!</p>
<p>It comes really handy when you need to treat a stream of events like a list. The best use case currently is returning a lazy list from an asynchronous function, and having data pumped into it via events. In asynchronous programming you can't just return a regular list because you don't yet have data for it. The usual solution so far has been to provide a callback that gets called when the data is available. But doing it this way you lose the power of chaining functions and creating pipes, which leads to not that nice interfaces. (See the 2nd example below to see how it improved the interface in one of my modules.)</p>
<p>Check out this toy example:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Lazy</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'lazy'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">lazy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Lazy</span><span class=\"p\">;</span>
<span class=\"nx\">lazy</span>
<span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">return</span> <span class=\"nx\">item</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>
<span class=\"p\">})</span>
<span class=\"p\">.</span><span class=\"nx\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>
<span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>
<span class=\"p\">})</span>
<span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
</pre>
</div>
<p>This code says that <code>lazy</code> is going to be a lazy list that filters even numbers, takes first five of them, then multiplies all of them by 2, and then calls the join function (think of join as in threads) on the final list.</p>
<p>And now you can emit <code>data</code> events with data in them at some point later,</p>
<div class=\"highlight\"><pre ><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">lazy</span><span class=\"p\">.</span><span class=\"nx\">emit</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
</pre>
</div>
<p>The output will be produced by the <code>join</code> function, which will output the expected <code>[0, 4, 8, 12, 16]</code>.</p>
<p>And here is a real-world example. Some time ago I wrote a hash database for node.js called <a href=\"http://github.com/pkrumins/node-supermarket\">node-supermarket</a> (think of key-value store except greater). Now it had a similar interface as a list, you could <code>.forEach</code> on the stored elements, <code>.filter</code> them, etc. But being asynchronous in nature it lead to the following code, littered with callbacks and temporary lists:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'supermarket'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">({</span> <span class=\"nx\">filename</span> <span class=\"o\">:</span> <span class=\"s1\">'users.db'</span><span class=\"p\">,</span> <span class=\"nx\">json</span> <span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span>
<span class=\"kd\">var</span> <span class=\"nx\">users_over_20</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span>
<span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"c1\">// predicate function</span>
<span class=\"k\">return</span> <span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span><span class=\"p\">;</span>
<span class=\"p\">},</span>
<span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"c1\">// function that gets executed when predicate is true</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">users_over_20</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>
<span class=\"nx\">users_over_20</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">meta</span><span class=\"p\">);</span>
<span class=\"p\">},</span>
<span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"c1\">// done function, called when all records have been filtered</span>
<span class=\"c1\">// now do something with users_over_20</span>
<span class=\"p\">}</span>
<span class=\"p\">)</span>
</pre>
</div>
<p>This code selects first five users who are over 20 years old and stores them in users_over_20.</p>
<p>But now we changed the node-supermarket interface to return lazy lists, and the code became:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'supermarket'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">({</span> <span class=\"nx\">filename</span> <span class=\"o\">:</span> <span class=\"s1\">'users.db'</span><span class=\"p\">,</span> <span class=\"nx\">json</span> <span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span>
<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">return</span> <span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span><span class=\"p\">;</span>
<span class=\"p\">})</span>
<span class=\"p\">.</span><span class=\"nx\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>
<span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"c1\">// xs contains the first 5 users who are over 20!</span>
<span class=\"p\">});</span>
</pre>
</div>
<p>This is so much nicer!</p>
<p>If you wish to try node-lazy just do <code>npm install lazy</code>! Alternatively, if you don't have <a href=\"http://npmjs.org/\">npm</a>, you can <code>git clone http://github.com/pkrumins/node-lazy.git</code> and set your <code>NODE_PATH</code> environment variable to point to that directory.</p>
<p>Enjoy and follow the future node-lazy developments in its github repo - <a href=\"http://github.com/pkrumins/node-lazy\">node-lazy at github</a>!</p>
<h2>Article Sponsors</h2>
<p><strong>None!</strong></p>
<p>Want to sponsor my future (or past) articles? <a href=\"http://www.catonmat.net/feedback\">Contact me</a> for prices and options!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/rx2li53pnlQ\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/rx2li53pnlQ/lazy-lists-javascript-nodejs" (19644 25997) old 1 nil nil ((title ((type . "text")) "Introducing node-lazy - lazy lists for node.js") (id nil "243") (updated nil "2010-10-18T15:19:41Z") (published nil "2010-10-14T22:45:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/rx2li53pnlQ/lazy-lists-javascript-nodejs"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/sV4UalefgGTYBezq2zs8UfEjX1s/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>I wrote an awesome node.js module for use at <a href=\"http://stackvm.com\">StackVM</a> - a module called <a href=\"http://github.com/pkrumins/node-lazy\">node-lazy</a> that does lazy list processing through events!</p>
<p>It comes really handy when you need to treat a stream of events like a list. The best use case currently is returning a lazy list from an asynchronous function, and having data pumped into it via events. In asynchronous programming you can't just return a regular list because you don't yet have data for it. The usual solution so far has been to provide a callback that gets called when the data is available. But doing it this way you lose the power of chaining functions and creating pipes, which leads to not that nice interfaces. (See the 2nd example below to see how it improved the interface in one of my modules.)</p>
<p>Check out this toy example:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Lazy</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;lazy&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">lazy</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Lazy</span><span class=\"p\">;</span>
<span class=\"nx\">lazy</span>
  <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">return</span> <span class=\"nx\">item</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>
  <span class=\"p\">})</span>
  <span class=\"p\">.</span><span class=\"nx\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>
  <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">item</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">return</span> <span class=\"nx\">item</span><span class=\"o\">*</span><span class=\"mi\">2</span><span class=\"p\">;</span>
  <span class=\"p\">})</span>
  <span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
</pre>
</div>
<p>This code says that <code>lazy</code> is going to be a lazy list that filters even numbers, takes first five of them, then multiplies all of them by 2, and then calls the join function (think of join as in threads) on the final list.</p>
<p>And now you can emit <code>data</code> events with data in them at some point later,</p>
<div class=\"highlight\"><pre ><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">].</span><span class=\"nx\">forEach</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"nx\">lazy</span><span class=\"p\">.</span><span class=\"nx\">emit</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"nx\">x</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
</pre>
</div>
<p>The output will be produced by the <code>join</code> function, which will output the expected <code>[0, 4, 8, 12, 16]</code>.</p>
<p>And here is a real-world example. Some time ago I wrote a hash database for node.js called <a href=\"http://github.com/pkrumins/node-supermarket\">node-supermarket</a> (think of key-value store except greater). Now it had a similar interface as a list, you could <code>.forEach</code> on the stored elements, <code>.filter</code> them, etc. But being asynchronous in nature it lead to the following code, littered with callbacks and temporary lists:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;supermarket&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">({</span> <span class=\"nx\">filename</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;users.db&#39;</span><span class=\"p\">,</span> <span class=\"nx\">json</span> <span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span>

<span class=\"kd\">var</span> <span class=\"nx\">users_over_20</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span>
  <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"c1\">// predicate function</span>
    <span class=\"k\">return</span> <span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span><span class=\"p\">;</span>
  <span class=\"p\">},</span>
  <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">err</span><span class=\"p\">,</span> <span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"c1\">// function that gets executed when predicate is true</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">users_over_20</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">)</span>
      <span class=\"nx\">users_over_20</span><span class=\"p\">.</span><span class=\"nx\">push</span><span class=\"p\">(</span><span class=\"nx\">meta</span><span class=\"p\">);</span>
  <span class=\"p\">},</span>
  <span class=\"kd\">function</span> <span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"c1\">// done function, called when all records have been filtered</span>

    <span class=\"c1\">// now do something with users_over_20</span>
  <span class=\"p\">}</span>
<span class=\"p\">)</span>
</pre>
</div>
<p>This code selects first five users who are over 20 years old and stores them in users_over_20.</p>
<p>But now we changed the node-supermarket interface to return lazy lists, and the code became:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">Store</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;supermarket&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">db</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">Store</span><span class=\"p\">({</span> <span class=\"nx\">filename</span> <span class=\"o\">:</span> <span class=\"s1\">&#39;users.db&#39;</span><span class=\"p\">,</span> <span class=\"nx\">json</span> <span class=\"o\">:</span> <span class=\"kc\">true</span> <span class=\"p\">});</span>

<span class=\"nx\">db</span><span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">user</span><span class=\"p\">,</span> <span class=\"nx\">meta</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">return</span> <span class=\"nx\">meta</span><span class=\"p\">.</span><span class=\"nx\">age</span> <span class=\"o\">&gt;</span> <span class=\"mi\">20</span><span class=\"p\">;</span>
  <span class=\"p\">})</span>
  <span class=\"p\">.</span><span class=\"nx\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>
  <span class=\"p\">.</span><span class=\"nx\">join</span><span class=\"p\">(</span><span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">xs</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"c1\">// xs contains the first 5 users who are over 20!</span>
  <span class=\"p\">});</span>
</pre>
</div>
<p>This is so much nicer!</p>
<p>If you wish to try node-lazy just do <code>npm install lazy</code>! Alternatively, if you don't have <a href=\"http://npmjs.org/\">npm</a>, you can <code>git clone http://github.com/pkrumins/node-lazy.git</code> and set your <code>NODE_PATH</code> environment variable to point to that directory.</p>
<p>Enjoy and follow the future node-lazy developments in its github repo - <a href=\"http://github.com/pkrumins/node-lazy\">node-lazy at github</a>!</p>
<h2>Article Sponsors</h2>
<p><strong>None!</strong></p>
<p>Want to sponsor my future (or past) articles? <a href=\"http://www.catonmat.net/feedback\">Contact me</a> for prices and options!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=rx2li53pnlQ:J_t6RzBDcd0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=rx2li53pnlQ:J_t6RzBDcd0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/rx2li53pnlQ\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/lazy-lists-javascript-nodejs"))) ("I pushed 20 more of my projects to GitHub" "<p><a href=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2009/12/github-social-coding.gif' alt='GitHub Social Coding' class=\"post-icon\" align=\"left\">Remember my previous article \"<a href=\"http://www.catonmat.net/blog/i-pushed-30-of-my-projects-to-github/\">I pushed 30 of my projects to GitHub</a>?\" Well, I just gathered 20 more projects that I had done (or did recently) and pushed them all to <a href=\"http://github.com\">GitHub</a>.</p>
<p>Quick note on GitHub - GitHub is the best invention ever for programmers. Nothing stimulates you more than pushing more and more projects to GitHub and seeing people forking them, following them, finding and fixing bugs for you. I wouldn't be doing so much coding if there wasn't GitHub.</p>
<p>If you like my projects, I'd love if you <a href=\"http://github.com/pkrumins\">followed me on github</a>! Oh, and also on <a href=\"http://twitter.com/pkrumins\">twitter</a>! Thank you!</p>
<p>Right, so here are the new projects:</p>
<h2>node-video</h2>
<p>This is a node.js module for recording HTML5 Theora/Ogg videos. It's written in C++ and is the first class citizen of node.js, meaning that it's fully asynchronous. It uses <a href=\"http://www.theora.org/downloads/\">libtheora and libogg</a> libraries for recording.</p>
<p>I wrote this module for my <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup/\">StackVM startup</a> so that anyone could record virtual machine video screencasts. See <a href=\"http://www.youtube.com/watch?v=TWdkNO6XlFI#t=1m23s\">StackVM demo video #1</a> at around 1min 23secs, where I demo this module in action.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-video\">node-video on github</a></li>
</ul>
<h2>node-png</h2>
<p>This is another node.js module for producing PNG images from raw RGB/BGR/RGBA/BGRA buffers. It's also written in C++, is asynchronous, and uses <a href=\"http://www.libpng.org/pub/png/libpng.html\">libpng</a> to produce images. I also wrote it for StackVM. I added a concept of stacked-pngs to the library where many virtual machine screen updates get stacked together to produce the final image, but that is a topic for a separate post.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-png\">node-png on github</a></li>
</ul>
<h2>node-jpeg</h2>
<p>This is also a node.js module for producing JPEG images from raw RGB buffers. It uses <a href=\"http://www.ijg.org/\">libjpeg</a> (or <a href=\"http://libjpeg-turbo.virtualgl.org/\">libjpeg-turbo</a>, which is much faster than libjpeg), it's is written in C++ and is asynchronous.</p>
<p>This module was also written for StackVM and it will be used in cases when the client has a really slow connection. In that case the virtual machine screen updates get downsampled to quality and size that the client is able to receive.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg on GitHub</a></li>
</ul>
<h2>node-gif</h2>
<p>This is a module for node.js for producing GIF images. I like this module the most because it can be used to record what I call \"gifcasts\". Gifcasts are screencasts that get recorded to animated gifs. Here is an example gifcast that I recorded - <a href=\"http://www.catonmat.net/ftp/plurk-gifcast.gif\">A gifcast of me plurking from Windows XP</a>.</p>
<p>This module is also written in C++ and uses <a href=\"http://sourceforge.net/projects/giflib/\">giflib</a>.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-gif\">node-gif on github</a></li>
</ul>
<h2>node-image</h2>
<p>This is a module for node.js that unifies node-png, node-jpeg and node-gif. So instead of requiring all three modules, you just <code>var Image = require('image')</code> and then can do things like:</p>
<pre >
var png = Image.encodeSync('png', buffer); // or
var jpeg = Image.encodeSync('jpeg', buffer); // etc.
var gif = Image.encodeSync('gif', buffer);
</pre>
<ul><li><a href=\"http://github.com/pkrumins/node-image\">node-image on github</a></li>
</ul>
<h2>node-supermarket</h2>
<p>Node-supermarket is like a regular key-value store (hash-table), except greater. It uses node-sqlite as the underlying storage engine that gives it unprecedented stability. This library doesn't end here. The plan is to create an object store, where you can just dump the whole js objects, and then restore them back, map, filter and fold on them, etc.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-supermarket\">node-supermarket on github</a></li>
</ul>
<h2>supermarket-cart</h2>
<p>Supermarket-cart stores <a href=\"http://github.com/senchalabs/connect\">connect</a> sessions in supermarket key-value store.</p>
<ul><li><a href=\"http://github.com/pkrumins/supermarket-cart\">supermarket-cart on github</a></li>
</ul>
<h2>node-base64</h2>
<p>This ia a node.js module for doing base64 encoding/decoding. I wrote it because half a year ago when I started working on StackVM, node.js didn't have base64 encoding functions and all other modules were terribly broken for binary data. So I named this module \"base64 module <b>that actually works</b>.\"</p>
<ul><li><a href=\"http://github.com/pkrumins/node-base64\">node-base64 on github</a></li>
</ul>
<h2>nodejs-proxy</h2>
<p>This is a HTTP proxy written in node.js. It has access control and URL black lists. I wrote it for fun.</p>
<ul><li><a href=\"http://github.com/pkrumins/nodejs-proxy\">nodejs-proxy on github</a></li>
<li>Related article: <a href=\"http://www.catonmat.net/http-proxy-in-nodejs\">A HTTP Proxy Server in 20 Lines of node.js Code</a></li>
</ul>
<h2>Perl TCP Proxy</h2>
<p>This is a TCP proxy written in Perl. I wrote it as a helper program for my \"<a href=\"http://www.catonmat.net/blog/linux-socks5-proxy\">Turn any Linux computer into SOCKS5 proxy in one command</a>\" post.</p>
<ul><li><a href=\"http://github.com/pkrumins/perl-tcp-proxy\">tcp-proxy.pl on github</a></li>
</ul>
<h2>node-chess</h2>
<p>This is a my, James's and Joshua's <a href=\"http://www.catonmat.net/blog/node-js-knockout-competition\">node.js knockout</a> entry - an online chess game (half-working).</p>
<ul><li><a href=\"http://github.com/pkrumins/node-chess\">node-chess</a></li>
</ul>
<h2>catonmat.net blog engine</h2>
<p>I wrote a new catonmat.net engine in Python. I used <a href=\"http://werkzeug.pocoo.org/\">Werkzeug</a>, <a href=\"http://www.sqlalchemy.org/\">SQLAlchemy<a>, <a href=\"http://www.makotemplates.org/\">Mako</a>, <a href=\"http://pygments.org/\">Pygments</a>, <a href =\"http://memcached.org/\">Memcached</a>, <a href=\"http://www.sphinxsearch.com/\">Sphinx</a> and <a href=\"http://pypi.python.org/pypi/repoze.profile\">repoze.profile</a> to make it as awesome as it is.The design followed the \"<a href=\"http://www.catonmat.net/blog/50-ideas-for-the-new-catonmat-website/\">50 ideas for the new catonmat.net website</a>.\"</a></a></p>
<ul><li><a href=\"http://github.com/pkrumins/catonmat.net\">catonmat.net on github</a></li>
</ul>
<h2>Social Scraper</h2>
<p>This is an older project from 2007 that I found on my hard drive. It's a social media website scraper (and also some popular news site scraper). It used to scrape data from <a href=\"http://boingboing.net/\">boingboing</a>, <a href=\"http://www.delicious.com/\">del.icio.us</a>, <a href=\"http://digg.com\">digg</a>, <a href=\"http://www.flickr.com/\">flickr</a>, <a href=\"http://en.wikipedia.org/wiki/Furl\">furl</a>, <a href=\"http://reddit.com\">reddit</a>, <a href=\"http://en.wikipedia.org/wiki/Simpy\">simpy</a>, <a href=\"http://www.stumbleupon.com/\">stumbleupon</a> and <a href=\"http://www.wired.com/\">wired</a>.</p>
<ul><li><a href=\"http://github.com/pkrumins/social-scraper\">social scraper on github</a></li>
</ul>
<h2>The Little Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a>. The book is a dialogue between you and the authors about interesting examples of Scheme programs and it teaches you to think recursively.</p>
<p>If anyone asks me which book do I recommend for learning basics of Lisp, I recommend this one (and <a href=\"http://www.amazon.com/Seasoned-Schemer-Daniel-P-Friedman/dp/026256100X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964015&tag=catonmat-20&sr=1-1\">The Seasoned Schemer</a>, see below). It's very fun to read and can be read in one evening.</p>
<ul><li><a href=\"http://github.com/pkrumins/the-little-schemer\">The Little Schemer book review on github</a></li>
</ul>
<h2>The Seasoned Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Seasoned-Schemer-Daniel-P-Friedman/dp/026256100X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964015&tag=catonmat-20&sr=1-1\">The Seasoned Schemer</a>. This book continues where <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a> ended and introduces more advanced programming and Scheme concepts such as accumulators, letrec, letcc, call/cc and generators.</p>
<p>Where <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a> can be read in one evening, this book will take one whole day.</p>
<ul><li><a href=\"http://github.com/pkrumins/the-seasoned-schemer\">The Seasoned Schemer book review on github</a></li>
</ul>
<h2>The Reasoned Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Reasoned-Schemer-Daniel-P-Friedman/dp/0262562146/ref=sr_1_1?s=books&ie=UTF8&qid=1284964359&tag=catonmat-20&sr=1-1\">The Reasoned Schemer</a>. Though this is not yet a full book review. I currently only had time to go through first few chapters. It's really complicated and takes a lot of effort to understand. One of the authors is <a href=\"http://okmij.org/ftp/\">Oleg Kiselyov</a>, which instantly makes this book so conceptually difficult that it may take one full week to comprehend some of the topics.</p>
<p>Here is how I summarize this book:</p>
<blockquote><p>The goal of the book is to show the beauty of relational programming. The authors of the book believe that it is natural to extend functional programming to relational programming. They demonstrate this by extending Scheme with a few new constructs, thereby combining the benefits of both styles. This extension also captures the essence of Prolog, the most well-known logic programming language.</p>
</blockquote>
<ul><li><a href=\"http://github.com/pkrumins/the-reasoned-schemer\">The Reasoned Schemer book review on github</a></li>
</ul>
<h2>The Little MLer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Little-MLer-Matthias-Felleisen/dp/026256114X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964996&sr=1-1\">The Little MLer</a>. The Little MLer book has two goals. The first and primary goal is to teach you to think recursively about types and programs. The second goal is to expose you to two important topics concerning large programs: dealing with exceptional situations and composing program components.</p>
<p>Having learned the concept of functors in ML, I realized that various programming languages like to call all kinds of unrelated things \"functors\". So I wrote a post \"<a href=\"http://www.catonmat.net/blog/on-functors\">On Functors</a>\".</p>
<ul><li><a href=\"http://github.com/pkrumins/the-little-mler\">The Little MLer book review on github</a></li>
</ul>
<h2>More!</h2>
<p>These are not all the projects that I have pushed to GitHub since last time, but the others are not that interesting. Just for completeness, they are:</p>
<ul> <li><a href=\"http://github.com/pkrumins/php2000\">php2000</a> - written in 2000, a php routing engine via require().</li>
<li><a href=\"http://github.com/pkrumins/webdev-template\">webdev-template</a> - a small webdev template with reset css.</li>
<li><a href=\"http://github.com/pkrumins/node-bufferdiff\">node-bufferdiff</a> - compares two node.js buffers fast.</li>
<li><a href=\"http://github.com/pkrumins/node-time\">node-time</a> - time functions for node.js (had forgotten about Date object).</li>
<li><a href=\"http://github.com/pkrumins/node-jsmin\">node-jsmin</a> - javascript minification node.js module.</li>
<li><a href=\"http://github.com/pkrumins/node-async\">node-async</a> - simplest possible asynchronous node.js C++ module (useful as an example).</li>
<li><a href=\"http://github.com/pkrumins/rfb-protocols\">rfb-protocols</a> - implements hextile rfb decoder to RGB buffer in C++.</li>
</ul>
<p>This is actually more than 20 projects, but not all of them count. :) Anyway, hope you find some of them useful and until the next post!</p>
<p>And just another reminder, I'd love if you followed me on <a href=\"http://github.com/pkrumins\">github</a> and <a href=\"http://twitter.com/pkrumins\">twitter</a>! :)</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/tUT4eaQZM-8\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/tUT4eaQZM-8/i-pushed-20-more-of-my-projects-to-github" (19611 4592) old 2 nil nil ((title ((type . "text")) "I pushed 20 more of my projects to GitHub") (id nil "229") (updated nil "2010-09-23T08:38:08Z") (published nil "2010-09-20T07:35:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/tUT4eaQZM-8/i-pushed-20-more-of-my-projects-to-github"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/aLSEMKwDh1k6tPMQ08LNP7Nobjo/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2009/12/github-social-coding.gif' alt='GitHub Social Coding' class=\"post-icon\" align=\"left\">Remember my previous article \"<a href=\"http://www.catonmat.net/blog/i-pushed-30-of-my-projects-to-github/\">I pushed 30 of my projects to GitHub</a>?\" Well, I just gathered 20 more projects that I had done (or did recently) and pushed them all to <a href=\"http://github.com\">GitHub</a>.</p>
<p>Quick note on GitHub - GitHub is the best invention ever for programmers. Nothing stimulates you more than pushing more and more projects to GitHub and seeing people forking them, following them, finding and fixing bugs for you. I wouldn't be doing so much coding if there wasn't GitHub.</p>
<p>If you like my projects, I'd love if you <a href=\"http://github.com/pkrumins\">followed me on github</a>! Oh, and also on <a href=\"http://twitter.com/pkrumins\">twitter</a>! Thank you!</p>
<p>Right, so here are the new projects:</p>
<h2>node-video</h2>
<p>This is a node.js module for recording HTML5 Theora/Ogg videos. It's written in C++ and is the first class citizen of node.js, meaning that it's fully asynchronous. It uses <a href=\"http://www.theora.org/downloads/\">libtheora and libogg</a> libraries for recording.</p>
<p>I wrote this module for my <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup/\">StackVM startup</a> so that anyone could record virtual machine video screencasts. See <a href=\"http://www.youtube.com/watch?v=TWdkNO6XlFI#t=1m23s\">StackVM demo video #1</a> at around 1min 23secs, where I demo this module in action.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-video\">node-video on github</a></li>
</ul>
<h2>node-png</h2>
<p>This is another node.js module for producing PNG images from raw RGB/BGR/RGBA/BGRA buffers. It's also written in C++, is asynchronous, and uses <a href=\"http://www.libpng.org/pub/png/libpng.html\">libpng</a> to produce images. I also wrote it for StackVM. I added a concept of stacked-pngs to the library where many virtual machine screen updates get stacked together to produce the final image, but that is a topic for a separate post.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-png\">node-png on github</a></li>
</ul>
<h2>node-jpeg</h2>
<p>This is also a node.js module for producing JPEG images from raw RGB buffers. It uses <a href=\"http://www.ijg.org/\">libjpeg</a> (or <a href=\"http://libjpeg-turbo.virtualgl.org/\">libjpeg-turbo</a>, which is much faster than libjpeg), it's is written in C++ and is asynchronous.</p>
<p>This module was also written for StackVM and it will be used in cases when the client has a really slow connection. In that case the virtual machine screen updates get downsampled to quality and size that the client is able to receive.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg on GitHub</a></li>
</ul>
<h2>node-gif</h2>
<p>This is a module for node.js for producing GIF images. I like this module the most because it can be used to record what I call \"gifcasts\". Gifcasts are screencasts that get recorded to animated gifs. Here is an example gifcast that I recorded - <a href=\"http://www.catonmat.net/ftp/plurk-gifcast.gif\">A gifcast of me plurking from Windows XP</a>.</p>
<p>This module is also written in C++ and uses <a href=\"http://sourceforge.net/projects/giflib/\">giflib</a>.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-gif\">node-gif on github</a></li>
</ul>
<h2>node-image</h2>
<p>This is a module for node.js that unifies node-png, node-jpeg and node-gif. So instead of requiring all three modules, you just <code>var Image = require('image')</code> and then can do things like:</p>
<pre >
var png = Image.encodeSync('png', buffer); // or
var jpeg = Image.encodeSync('jpeg', buffer); // etc.
var gif = Image.encodeSync('gif', buffer);
</pre>
<ul><li><a href=\"http://github.com/pkrumins/node-image\">node-image on github</a></li>
</ul>
<h2>node-supermarket</h2>
<p>Node-supermarket is like a regular key-value store (hash-table), except greater. It uses node-sqlite as the underlying storage engine that gives it unprecedented stability. This library doesn't end here. The plan is to create an object store, where you can just dump the whole js objects, and then restore them back, map, filter and fold on them, etc.</p>
<ul><li><a href=\"http://github.com/pkrumins/node-supermarket\">node-supermarket on github</a></li>
</ul>
<h2>supermarket-cart</h2>
<p>Supermarket-cart stores <a href=\"http://github.com/senchalabs/connect\">connect</a> sessions in supermarket key-value store.</p>
<ul><li><a href=\"http://github.com/pkrumins/supermarket-cart\">supermarket-cart on github</a></li>
</ul>
<h2>node-base64</h2>
<p>This ia a node.js module for doing base64 encoding/decoding. I wrote it because half a year ago when I started working on StackVM, node.js didn't have base64 encoding functions and all other modules were terribly broken for binary data. So I named this module \"base64 module <b>that actually works</b>.\"</p>
<ul><li><a href=\"http://github.com/pkrumins/node-base64\">node-base64 on github</a></li>
</ul>
<h2>nodejs-proxy</h2>
<p>This is a HTTP proxy written in node.js. It has access control and URL black lists. I wrote it for fun.</p>
<ul><li><a href=\"http://github.com/pkrumins/nodejs-proxy\">nodejs-proxy on github</a></li>
<li>Related article: <a href=\"http://www.catonmat.net/http-proxy-in-nodejs\">A HTTP Proxy Server in 20 Lines of node.js Code</a></li>
</ul>
<h2>Perl TCP Proxy</h2>
<p>This is a TCP proxy written in Perl. I wrote it as a helper program for my \"<a href=\"http://www.catonmat.net/blog/linux-socks5-proxy\">Turn any Linux computer into SOCKS5 proxy in one command</a>\" post.</p>
<ul><li><a href=\"http://github.com/pkrumins/perl-tcp-proxy\">tcp-proxy.pl on github</a></li>
</ul>
<h2>node-chess</h2>
<p>This is a my, James's and Joshua's <a href=\"http://www.catonmat.net/blog/node-js-knockout-competition\">node.js knockout</a> entry - an online chess game (half-working).</p>
<ul><li><a href=\"http://github.com/pkrumins/node-chess\">node-chess</a></li>
</ul>
<h2>catonmat.net blog engine</h2>
<p>I wrote a new catonmat.net engine in Python. I used <a href=\"http://werkzeug.pocoo.org/\">Werkzeug</a>, <a href=\"http://www.sqlalchemy.org/\">SQLAlchemy<a>, <a href=\"http://www.makotemplates.org/\">Mako</a>, <a href=\"http://pygments.org/\">Pygments</a>, <a href =\"http://memcached.org/\">Memcached</a>, <a href=\"http://www.sphinxsearch.com/\">Sphinx</a> and <a href=\"http://pypi.python.org/pypi/repoze.profile\">repoze.profile</a> to make it as awesome as it is.The design followed the \"<a href=\"http://www.catonmat.net/blog/50-ideas-for-the-new-catonmat-website/\">50 ideas for the new catonmat.net website</a>.\"</a></a></p>
<ul><li><a href=\"http://github.com/pkrumins/catonmat.net\">catonmat.net on github</a></li>
</ul>
<h2>Social Scraper</h2>
<p>This is an older project from 2007 that I found on my hard drive. It's a social media website scraper (and also some popular news site scraper). It used to scrape data from <a href=\"http://boingboing.net/\">boingboing</a>, <a href=\"http://www.delicious.com/\">del.icio.us</a>, <a href=\"http://digg.com\">digg</a>, <a href=\"http://www.flickr.com/\">flickr</a>, <a href=\"http://en.wikipedia.org/wiki/Furl\">furl</a>, <a href=\"http://reddit.com\">reddit</a>, <a href=\"http://en.wikipedia.org/wiki/Simpy\">simpy</a>, <a href=\"http://www.stumbleupon.com/\">stumbleupon</a> and <a href=\"http://www.wired.com/\">wired</a>.</p>
<ul><li><a href=\"http://github.com/pkrumins/social-scraper\">social scraper on github</a></li>
</ul>
<h2>The Little Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a>. The book is a dialogue between you and the authors about interesting examples of Scheme programs and it teaches you to think recursively.</p>
<p>If anyone asks me which book do I recommend for learning basics of Lisp, I recommend this one (and <a href=\"http://www.amazon.com/Seasoned-Schemer-Daniel-P-Friedman/dp/026256100X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964015&tag=catonmat-20&sr=1-1\">The Seasoned Schemer</a>, see below). It's very fun to read and can be read in one evening.</p>
<ul><li><a href=\"http://github.com/pkrumins/the-little-schemer\">The Little Schemer book review on github</a></li>
</ul>
<h2>The Seasoned Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Seasoned-Schemer-Daniel-P-Friedman/dp/026256100X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964015&tag=catonmat-20&sr=1-1\">The Seasoned Schemer</a>. This book continues where <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a> ended and introduces more advanced programming and Scheme concepts such as accumulators, letrec, letcc, call/cc and generators.</p>
<p>Where <a href=\"http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=sr_1_1?s=books&ie=UTF8&qid=1284963794&tag=catonmat-20&sr=1-1\">The Little Schemer</a> can be read in one evening, this book will take one whole day.</p>
<ul><li><a href=\"http://github.com/pkrumins/the-seasoned-schemer\">The Seasoned Schemer book review on github</a></li>
</ul>
<h2>The Reasoned Schemer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Reasoned-Schemer-Daniel-P-Friedman/dp/0262562146/ref=sr_1_1?s=books&ie=UTF8&qid=1284964359&tag=catonmat-20&sr=1-1\">The Reasoned Schemer</a>. Though this is not yet a full book review. I currently only had time to go through first few chapters. It's really complicated and takes a lot of effort to understand. One of the authors is <a href=\"http://okmij.org/ftp/\">Oleg Kiselyov</a>, which instantly makes this book so conceptually difficult that it may take one full week to comprehend some of the topics.</p>
<p>Here is how I summarize this book:</p>
<blockquote><p>The goal of the book is to show the beauty of relational programming. The authors of the book believe that it is natural to extend functional programming to relational programming. They demonstrate this by extending Scheme with a few new constructs, thereby combining the benefits of both styles. This extension also captures the essence of Prolog, the most well-known logic programming language.</p>
</blockquote>
<ul><li><a href=\"http://github.com/pkrumins/the-reasoned-schemer\">The Reasoned Schemer book review on github</a></li>
</ul>
<h2>The Little MLer Book Review</h2>
<p>This is a book review of <a href=\"http://www.amazon.com/Little-MLer-Matthias-Felleisen/dp/026256114X/ref=sr_1_1?s=books&ie=UTF8&qid=1284964996&sr=1-1\">The Little MLer</a>. The Little MLer book has two goals. The first and primary goal is to teach you to think recursively about types and programs. The second goal is to expose you to two important topics concerning large programs: dealing with exceptional situations and composing program components.</p>
<p>Having learned the concept of functors in ML, I realized that various programming languages like to call all kinds of unrelated things \"functors\". So I wrote a post \"<a href=\"http://www.catonmat.net/blog/on-functors\">On Functors</a>\".</p>
<ul><li><a href=\"http://github.com/pkrumins/the-little-mler\">The Little MLer book review on github</a></li>
</ul>
<h2>More!</h2>
<p>These are not all the projects that I have pushed to GitHub since last time, but the others are not that interesting. Just for completeness, they are:</p>
<ul> <li><a href=\"http://github.com/pkrumins/php2000\">php2000</a> - written in 2000, a php routing engine via require().</li>
 <li><a href=\"http://github.com/pkrumins/webdev-template\">webdev-template</a> - a small webdev template with reset css.</li>
 <li><a href=\"http://github.com/pkrumins/node-bufferdiff\">node-bufferdiff</a> - compares two node.js buffers fast.</li>
 <li><a href=\"http://github.com/pkrumins/node-time\">node-time</a> - time functions for node.js (had forgotten about Date object).</li>
 <li><a href=\"http://github.com/pkrumins/node-jsmin\">node-jsmin</a> - javascript minification node.js module.</li>
 <li><a href=\"http://github.com/pkrumins/node-async\">node-async</a> - simplest possible asynchronous node.js C++ module (useful as an example).</li>
 <li><a href=\"http://github.com/pkrumins/rfb-protocols\">rfb-protocols</a> - implements hextile rfb decoder to RGB buffer in C++.</li>
</ul>
<p>This is actually more than 20 projects, but not all of them count. :) Anyway, hope you find some of them useful and until the next post!</p>
<p>And just another reminder, I'd love if you followed me on <a href=\"http://github.com/pkrumins\">github</a> and <a href=\"http://twitter.com/pkrumins\">twitter</a>! :)</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=tUT4eaQZM-8:Qws80_TXYxY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=tUT4eaQZM-8:Qws80_TXYxY:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/tUT4eaQZM-8\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/i-pushed-20-more-of-my-projects-to-github"))) ("Reflections on Node.js Knockout Competition" "<p><a href=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>So I participated in the 48 hour <a href=\"http://nodeknockout.com/\">Node.js Knockout</a> competition together with <a href=\"http://substack.net\">James Halliday</a> and <a href=\"http://jesusabdullah.github.com/\">Joshua Holbrook</a>. Our team was called <a href=\"http://nodeknockout.com/teams/dark-knights\">Dark Knights</a> and we created an online chess application called <a href=\"http://dark-knights.no.de\">Node Chess</a>.</p>
<p>We didn't quite manage to completely finish the game and it has several bugs, like the turns don't alternate and the king can be captured, but it's crazy awesome anyway. If both players follow the rules, it all works correctly. Castling works, pawn promotion works, capture en-passant also. <a href=\"http://dark-knights.no.de\">Try it</a> and if you find it awesome, please <a href=\"http://nodeknockout.com/teams/dark-knights#your_vote\">vote</a>! Oh, and it works only in Chrome. We were under time pressure and at one point it stopped working under Firefox and we did not get to fixing it.</p>
<p>Here is how the game looks,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/reflections-nodeko/node-chess.gif\"><br>
<small>A chess game between pkrumins and someone. King's Indian Defence.</small></p>
</div>
<p>Joshua did all the awesome vector graphics work. I did the chess engine work, and James used his amazing <a href=\"http://github.com/substack/dnode\">dnode node.js module</a> to blend client and server code together. James has actually redefined how web development happens. Instead of writing server code and client code, as we are so used to, with his dnode framework it's now possible to use the same code both server and client side! Much less hustle and purely ingenious!</p>
<p>Here is the same game in perspective view, the highlighted squares are the available moves,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/reflections-nodeko/node-chess-perspective.gif\"><br>
<small>The same game in perspective view.</small></p>
</div>
<p>And the moves are animated, too! The pawns shoot the opponent pieces and the queen stabs them. <a href=\"http://dark-knights.no.de/\">Try it</a>!</p>
<p>Right, so my reflections on the competition.</p>
<p>It was well organized, and we were sent access to a <a href=\"http://www.joyent.com/\">Joyent</a> deployment server and a <a href=\"http://heroku.com/\">Heroku</a> server early on together with instructions. It turned out that Heroku's didn't support <a href=\"http://github.com/LearnBoost/Socket.IO\">Socket.IO</a> or websockets. Win for Joyent. Pretty much everyone went with Joyent as far as I know. We had some technical difficulties at the start with deploying our code, but guys at #node.js helped us and we got our app running pretty quickly.</p>
<p>We used 3 Git repositories to push the code to, our own GitHub repositories (<a href=\"http://github.com/pkrumins/node-chess\">pkrumins</a>, <a href=\"http://github.com/substack/node-chess\">substack</a>, <a href=\"http://github.com/jesusabdullah/node-chess\">jesusabdullah</a>), then the node knockout's private repository for judges, and deployment repository on Joyent. Joyent was configured so that as you push your code to its Git repo, the hooks in it would restart the node.js service and the you'd be instantly running the latest version of your code.</p>
<p>So I'd make changes push to my GitHub repo, James would pull from me. He'd make changes, I'd pull from him, and same for Joshua. It went pretty flawless. We had like 12 merge errors total, but those were all resolved within a minute or two.</p>
<p>Now some numbers. We're actually amazed by our performance. Check out these numbers:</p>
<pre >
$ git log | grep Author | wc -l
429
</pre>
<p><strong>429 commits</strong>! Can you believe that? 429 commits in 2 days! That's 9 commits per hour on average! That is what I call hacking!</p>
<p>My commits:</p>
<pre >
$ git log | grep Author | grep Peteris | wc -l
169
</pre>
<p>I did 3.5 commits per hour on average. And funnily, James and Joshua each had 130 commits:</p>
<pre >
$ git log | grep Author | grep James | wc -l
130
$ git log | grep Author | grep Joshua | wc -l
130
</pre>
<p>That's 2.7 commits per hour on average! Amazing! But we also slept between the competition days. On the both days we did about 4 hours of clean sleep, shrinking our competition time to 40 hours. Then our average becomes <strong>10.7 commits per hour</strong>! Wowsers!</p>
<p>Here is a graph, made with <a href=\"http://raphaeljs.com/\">Raphael.js</a>, that shows our <code>git commit</code> activity by hour, starting from 3am UTC Aug 28 to 3am UTC Aug 30:</p>
<div class=\"c\"><p><img src=\"/images/reflections-nodeko/git-commit-activity.gif\"><br>
<small>Team \"Dark Knights\" git commit activity by hour.</small></p>
</div>
<p>Our peak commit intensity was at 9pm the last night, when we did 23 commits in one hour. Our team was also widely spread out. I am in Riga, Latvia, James is in Kenai, Alaska, and Joshua is in Fairbanks, Alaska. Yet we managed to keep the same schedule. I'd go to bed at noon (noon for me is 3pm UTC, see the graph above), while James and Joshua at midnight, and we'd wake up several hours later and keep hacking!</p>
<p>Total number of code lines written:</p>
<pre >
$ wc -l `find . -name '*.js' -o -name '*.html' -o -name '*.css' | \\
egrep -v '(jquery|raphael)'`
3074 total
</pre>
<p>So we wrote 3074 lines in two days, which according to git break up into added vs. deleted as following:</p>
<pre >
$ git log --numstat | grep '^[0-9]' | \\
egrep '(\\.js|\\.css|\\.html|jquery|raphael)' | \\
awk '{a+=$1;d+=$2}END{print \"Added: \" a, \"Deleted: \" d}'
Added: 5210 Deleted: 2042
</pre>
<p>Hmm, 5210-2042 doesn't quite add up to 3074 but is close enough. From these 3074 lines of code non-empty were:</p>
<pre >
$ cat `find . -name '*.js' -o -name '*.html' -o -name '*.css' | \\
egrep -v '(jquery|raphael)'` | perl -nle 'print if /\\S/' | \\
wc -l
2659
</pre>
<p>So 2659 real lines of code in 2 days! Talk about productivity! And that's just code alone. Joshua also did 50 artworks,</p>
<pre >
$ find . -name '*.svg' -o -name '*.png' | wc -l
50
</pre>
<p>Total number of file changes:</p>
<pre >
$ git log --shortstat | grep 'files changed' | \\
awk '{t+=$1}END{print t}'
724
</pre>
<p>We communicated in IRC, in our #stackvm <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup/\">startup</a> channel. Here are some statistics on how much stuff went on in our IRC channel:</p>
<pre >
$ (
grep -v '^0[012]:' '#stackvm.08-28.log';
cat '#stackvm.08-29.log';
grep '^0[012]' '#stackvm.08-30.log'
) | wc -l
5069
</pre>
<p>So 5069 events happened during the challenge. That's 105 events per hour on average. We have a special lulbot in it who tells us when we commit, for example:</p>
<pre >
05:59 &lt; lulzbot-X> Whoa Nelly! New commits to pkrumins/node-chess (master)!
05:59 &lt; lulzbot-X>     * Peteris Krumins: MoveGenerator stub
05:59 &lt; lulzbot-X>     * Peteris Krumins: abstract pieces
05:59 &lt; lulzbot-X> githubs: http://github.com/pkrumins/node-chess/tree/master
</pre>
<p>Here lulzbot informed us that I committed MoveGenerator stub and abstracted pieces in node-chess repo.</p>
<p>Out of these 5069 events, we talked this much,</p>
<pre >
$ (
grep -v '^0[012]:' '#stackvm.08-28.log';
cat '#stackvm.08-29.log';
grep '^0[012]' '#stackvm.08-30.log'
) | egrep -i '^&lt; pkrumins|substack|jesus' | wc -l
2682
</pre>
<p>So we spoke 2682 times or 83.8 times per hour. We also asked quite a lot questions:</p>
<pre >
$ (
grep -v '^0[012]:' '#stackvm.08-28.log';
cat '#stackvm.08-29.log';
grep '^0[012]' '#stackvm.08-30.log';
) | grep '?$' | wc -l
246
</pre>
<p>246 questions, for example (random selection):</p>
<pre >
&lt; pkrumins> wait, are we including a version of socket.io.js in dnode?
&lt; jesusabdullah> but: simplified pieces for thumbs--yea or nay?
&lt; pkrumins> is anyone working ont he problem where the opponent cant make moves?
&lt; SubStack> pkrumins did you see how I just dumped the node EventEmitter code into our lib/?
&lt; SubStack> does S create a row?
&lt; jesusabdullah> pkrumins: You fixing the board?
&lt; pkrumins> how does resizing in raphael happen?
</pre>
<p>My chess code wasn't the easiest to write and to make sure it works correctly, I wrote 52 <a href=\"http://github.com/visionmedia/expresso\">expresso</a> tests,</p>
<pre >
$ expresso
100% 52 tests
</pre>
<p>Without tests I would have never got that chess code right.</p>
<p>That's about it. The competition was awesome, A++ would participate again. Hope they organize node.js knockout the next year, too!</p>
<p>I hope you enjoyed my post and don't forget to <a href=\"http://nodeknockout.com/teams/dark-knights#your_vote\">vote for our project</a>! Your vote is so important to us. Thank you!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/7CGefS4mtHY\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/7CGefS4mtHY/node-js-knockout-competition" (19583 20069) old 3 nil nil ((title ((type . "text")) "Reflections on Node.js Knockout Competition") (id nil "237") (updated nil "2010-09-02T07:12:37Z") (published nil "2010-08-30T18:50:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/7CGefS4mtHY/node-js-knockout-competition"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/-Oz3O-L1qu0Lldnl8h_invMFlbk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>So I participated in the 48 hour <a href=\"http://nodeknockout.com/\">Node.js Knockout</a> competition together with <a href=\"http://substack.net\">James Halliday</a> and <a href=\"http://jesusabdullah.github.com/\">Joshua Holbrook</a>. Our team was called <a href=\"http://nodeknockout.com/teams/dark-knights\">Dark Knights</a> and we created an online chess application called <a href=\"http://dark-knights.no.de\">Node Chess</a>.</p>
<p>We didn't quite manage to completely finish the game and it has several bugs, like the turns don't alternate and the king can be captured, but it's crazy awesome anyway. If both players follow the rules, it all works correctly. Castling works, pawn promotion works, capture en-passant also. <a href=\"http://dark-knights.no.de\">Try it</a> and if you find it awesome, please <a href=\"http://nodeknockout.com/teams/dark-knights#your_vote\">vote</a>! Oh, and it works only in Chrome. We were under time pressure and at one point it stopped working under Firefox and we did not get to fixing it.</p>
<p>Here is how the game looks,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/reflections-nodeko/node-chess.gif\"><br>
<small>A chess game between pkrumins and someone. King's Indian Defence.</small></p>
</div>
<p>Joshua did all the awesome vector graphics work. I did the chess engine work, and James used his amazing <a href=\"http://github.com/substack/dnode\">dnode node.js module</a> to blend client and server code together. James has actually redefined how web development happens. Instead of writing server code and client code, as we are so used to, with his dnode framework it's now possible to use the same code both server and client side! Much less hustle and purely ingenious!</p>
<p>Here is the same game in perspective view, the highlighted squares are the available moves,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/reflections-nodeko/node-chess-perspective.gif\"><br>
<small>The same game in perspective view.</small></p>
</div>
<p>And the moves are animated, too! The pawns shoot the opponent pieces and the queen stabs them. <a href=\"http://dark-knights.no.de/\">Try it</a>!</p>
<p>Right, so my reflections on the competition.</p>
<p>It was well organized, and we were sent access to a <a href=\"http://www.joyent.com/\">Joyent</a> deployment server and a <a href=\"http://heroku.com/\">Heroku</a> server early on together with instructions. It turned out that Heroku's didn't support <a href=\"http://github.com/LearnBoost/Socket.IO\">Socket.IO</a> or websockets. Win for Joyent. Pretty much everyone went with Joyent as far as I know. We had some technical difficulties at the start with deploying our code, but guys at #node.js helped us and we got our app running pretty quickly.</p>
<p>We used 3 Git repositories to push the code to, our own GitHub repositories (<a href=\"http://github.com/pkrumins/node-chess\">pkrumins</a>, <a href=\"http://github.com/substack/node-chess\">substack</a>, <a href=\"http://github.com/jesusabdullah/node-chess\">jesusabdullah</a>), then the node knockout's private repository for judges, and deployment repository on Joyent. Joyent was configured so that as you push your code to its Git repo, the hooks in it would restart the node.js service and the you'd be instantly running the latest version of your code.</p>
<p>So I'd make changes push to my GitHub repo, James would pull from me. He'd make changes, I'd pull from him, and same for Joshua. It went pretty flawless. We had like 12 merge errors total, but those were all resolved within a minute or two.</p>
<p>Now some numbers. We're actually amazed by our performance. Check out these numbers:</p>
<pre >
$ git log | grep Author | wc -l
429
</pre>
<p><strong>429 commits</strong>! Can you believe that? 429 commits in 2 days! That's 9 commits per hour on average! That is what I call hacking!</p>
<p>My commits:</p>
<pre >
$ git log | grep Author | grep Peteris | wc -l
169
</pre>
<p>I did 3.5 commits per hour on average. And funnily, James and Joshua each had 130 commits:</p>
<pre >
$ git log | grep Author | grep James | wc -l
130
$ git log | grep Author | grep Joshua | wc -l
130
</pre>
<p>That's 2.7 commits per hour on average! Amazing! But we also slept between the competition days. On the both days we did about 4 hours of clean sleep, shrinking our competition time to 40 hours. Then our average becomes <strong>10.7 commits per hour</strong>! Wowsers!</p>
<p>Here is a graph, made with <a href=\"http://raphaeljs.com/\">Raphael.js</a>, that shows our <code>git commit</code> activity by hour, starting from 3am UTC Aug 28 to 3am UTC Aug 30:</p>
<div class=\"c\"><p><img src=\"/images/reflections-nodeko/git-commit-activity.gif\"><br>
<small>Team \"Dark Knights\" git commit activity by hour.</small></p>
</div>
<p>Our peak commit intensity was at 9pm the last night, when we did 23 commits in one hour. Our team was also widely spread out. I am in Riga, Latvia, James is in Kenai, Alaska, and Joshua is in Fairbanks, Alaska. Yet we managed to keep the same schedule. I'd go to bed at noon (noon for me is 3pm UTC, see the graph above), while James and Joshua at midnight, and we'd wake up several hours later and keep hacking!</p>
<p>Total number of code lines written:</p>
<pre >
$ wc -l `find . -name '*.js' -o -name '*.html' -o -name '*.css' | \\
  egrep -v '(jquery|raphael)'`
3074 total
</pre>
<p>So we wrote 3074 lines in two days, which according to git break up into added vs. deleted as following:</p>
<pre >
$ git log --numstat | grep '^[0-9]' | \\
  egrep '(\\.js|\\.css|\\.html|jquery|raphael)' | \\
  awk '{a+=$1;d+=$2}END{print \"Added: \" a, \"Deleted: \" d}'
Added: 5210 Deleted: 2042
</pre>
<p>Hmm, 5210-2042 doesn't quite add up to 3074 but is close enough. From these 3074 lines of code non-empty were:</p>
<pre >
$ cat `find . -name '*.js' -o -name '*.html' -o -name '*.css' | \\
  egrep -v '(jquery|raphael)'` | perl -nle 'print if /\\S/' | \\
  wc -l
2659
</pre>
<p>So 2659 real lines of code in 2 days! Talk about productivity! And that's just code alone. Joshua also did 50 artworks,</p>
<pre >
$ find . -name '*.svg' -o -name '*.png' | wc -l
50
</pre>
<p>Total number of file changes:</p>
<pre >
$ git log --shortstat | grep 'files changed' | \\
  awk '{t+=$1}END{print t}'  
724
</pre>
<p>We communicated in IRC, in our #stackvm <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup/\">startup</a> channel. Here are some statistics on how much stuff went on in our IRC channel:</p>
<pre >
$ (
  grep -v '^0[012]:' '#stackvm.08-28.log';
  cat '#stackvm.08-29.log';
  grep '^0[012]' '#stackvm.08-30.log'
  ) | wc -l
5069
</pre>
<p>So 5069 events happened during the challenge. That's 105 events per hour on average. We have a special lulbot in it who tells us when we commit, for example:</p>
<pre >
05:59 &lt; lulzbot-X> Whoa Nelly! New commits to pkrumins/node-chess (master)!
05:59 &lt; lulzbot-X>     * Peteris Krumins: MoveGenerator stub
05:59 &lt; lulzbot-X>     * Peteris Krumins: abstract pieces
05:59 &lt; lulzbot-X> githubs: http://github.com/pkrumins/node-chess/tree/master
</pre>
<p>Here lulzbot informed us that I committed MoveGenerator stub and abstracted pieces in node-chess repo.</p>
<p>Out of these 5069 events, we talked this much,</p>
<pre >
$ (
  grep -v '^0[012]:' '#stackvm.08-28.log';
  cat '#stackvm.08-29.log';
  grep '^0[012]' '#stackvm.08-30.log'
  ) | egrep -i '^&lt; pkrumins|substack|jesus' | wc -l
2682
</pre>
<p>So we spoke 2682 times or 83.8 times per hour. We also asked quite a lot questions:</p>
<pre >
$ (
  grep -v '^0[012]:' '#stackvm.08-28.log';
  cat '#stackvm.08-29.log';
  grep '^0[012]' '#stackvm.08-30.log';
  ) | grep '?$' | wc -l
246
</pre>
<p>246 questions, for example (random selection):</p>
<pre >
&lt; pkrumins> wait, are we including a version of socket.io.js in dnode?
&lt; jesusabdullah> but: simplified pieces for thumbs--yea or nay?
&lt; pkrumins> is anyone working ont he problem where the opponent cant make moves?
&lt; SubStack> pkrumins did you see how I just dumped the node EventEmitter code into our lib/?
&lt; SubStack> does S create a row?
&lt; jesusabdullah> pkrumins: You fixing the board?
&lt; pkrumins> how does resizing in raphael happen?
</pre>
<p>My chess code wasn't the easiest to write and to make sure it works correctly, I wrote 52 <a href=\"http://github.com/visionmedia/expresso\">expresso</a> tests,</p>
<pre >
$ expresso 

   100% 52 tests
</pre>
<p>Without tests I would have never got that chess code right.</p>
<p>That's about it. The competition was awesome, A++ would participate again. Hope they organize node.js knockout the next year, too!</p>
<p>I hope you enjoyed my post and don't forget to <a href=\"http://nodeknockout.com/teams/dark-knights#your_vote\">vote for our project</a>! Your vote is so important to us. Thank you!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=7CGefS4mtHY:hf1WEiE1jDA:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=7CGefS4mtHY:hf1WEiE1jDA:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/7CGefS4mtHY\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/node-js-knockout-competition"))) ("StackVM Demo Video #2" "<p><a href=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"c\"><p><a href=\"http://stackvm.com\"><img src=\"http://www.catonmat.net/images/stackvm.png\"></a></p>
</div>
<p>Hey everyone. We at <a href=\"http://stackvm.com\">StackVM</a> just finished recording the 2nd demo video. The 2nd video shows all the cool new features we have recently built - user login system, chatting and sharing of virtual machines by just dragging and dropping. Also this time <a href=\"http://substack.net\">James Halliday</a> joins me from Fairbanks, Alaska!</p>
<p>Here is the video #2,</p>
<div class=\"c\"><object width=\"576\" height=\"467\"><param name=\"movie\" value=\"http://www.youtube.com/v/ppXUbj0MA3E&amp;hl=en_US&amp;fs=1&amp;hd=1\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/ppXUbj0MA3E&amp;hl=en_US&amp;fs=1&amp;hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"576\" height=\"467\"></embed>
</object>
<p><small>StackVM brings virtual machines to the web. Join #stackvm on FreeNode to discuss!</small></p>
</div>
<p>If you haven't seen the first video, see my <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup\">StackVM startup announcement post</a>!</p>
<p>Also, if you wish to be the first to try StackVM when we launch, please leave your email below. We'll send you a free demo as soon as we can!</p>
<div class=\"c\"><div class=\"stackvm-form\"><form action=\"http://stackvm.com/sign-up.cgi\" method=\"POST\"><p>   <input type=\"hidden\" name=\"from\" value=\"catonmat\"><br>
<input type=\"hidden\" name=\"back\" value=\"http://www.catonmat.net/blog/stackvm-demo-video-two\"><br>
Your email: <input type=\"text\" name=\"email\"> <input type=\"submit\" value=\"Submit\"><br>
</p>
</form>
</div>
</div>
<p>During the past few weeks we have also written two new node.js libraries for use at StackVM:</p>
<ul> <li><a href=\"http://github.com/pkrumins/node-gif\">node-gif</a> - for producing GIF images and animated GIFs (gifcasts).</li>
<li><a href=\"http://github.com/pkrumins/node-image\">node-image</a> - unifies <a href=\"http://github.com/pkrumins/node-png\">node-png</a>, <a href=\"http://github.com/pkrumins/node-gif\">node-gif</a> and <a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg</a>.</li>
</ul>
<p>We did not demo gifcasts in this video but I am going to do a separate video in the next week or two showing just that. They're pretty awesome!</p>
<p>In a few weeks we'll also post the 3rd demo video. In that video we have planned to show virtual network editor that allows to network virtual machines by just dragging and dropping! Be sure to subscribe to <a href=\"http://www.catonmat.net/feed/\">catonmat's rss feed</a> and <a href=\"http://twitter.com/pkrumins\">follow me on twitter</a> to know when the video is out!</p>
<p>See you!</p>
<p>Ps. Join #stackvm on FreeNode to discuss StackVM with me and James! We're there 24/7!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/sc4EAbRvfxE\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/sc4EAbRvfxE/stackvm-demo-video-two" (19553 10222) old 4 nil nil ((title ((type . "text")) "StackVM Demo Video #2") (id nil "231") (updated nil "2010-08-10T10:20:30Z") (published nil "2010-08-10T07:30:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/sc4EAbRvfxE/stackvm-demo-video-two"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/dzizMT_0w-s_qjT5jZ2JBPLlPnc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"c\"><p><a href=\"http://stackvm.com\"><img src=\"http://www.catonmat.net/images/stackvm.png\"></a></p>
</div>
<p>Hey everyone. We at <a href=\"http://stackvm.com\">StackVM</a> just finished recording the 2nd demo video. The 2nd video shows all the cool new features we have recently built - user login system, chatting and sharing of virtual machines by just dragging and dropping. Also this time <a href=\"http://substack.net\">James Halliday</a> joins me from Fairbanks, Alaska!</p>
<p>Here is the video #2,</p>
<div class=\"c\"><object width=\"576\" height=\"467\"><param name=\"movie\" value=\"http://www.youtube.com/v/ppXUbj0MA3E&amp;hl=en_US&amp;fs=1&amp;hd=1\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/ppXUbj0MA3E&amp;hl=en_US&amp;fs=1&amp;hd=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"576\" height=\"467\"></embed>
</object>
<p><small>StackVM brings virtual machines to the web. Join #stackvm on FreeNode to discuss!</small></p>
</div>
<p>If you haven't seen the first video, see my <a href=\"http://www.catonmat.net/blog/i-am-doing-a-startup\">StackVM startup announcement post</a>!</p>
<p>Also, if you wish to be the first to try StackVM when we launch, please leave your email below. We'll send you a free demo as soon as we can!</p>
<div class=\"c\"><div class=\"stackvm-form\"><form action=\"http://stackvm.com/sign-up.cgi\" method=\"POST\"><p>   <input type=\"hidden\" name=\"from\" value=\"catonmat\"><br>
   <input type=\"hidden\" name=\"back\" value=\"http://www.catonmat.net/blog/stackvm-demo-video-two\"><br>
   Your email: <input type=\"text\" name=\"email\"> <input type=\"submit\" value=\"Submit\"><br>
  </p>
</form>
</div>
</div>
<p>During the past few weeks we have also written two new node.js libraries for use at StackVM:</p>
<ul> <li><a href=\"http://github.com/pkrumins/node-gif\">node-gif</a> - for producing GIF images and animated GIFs (gifcasts).</li>
 <li><a href=\"http://github.com/pkrumins/node-image\">node-image</a> - unifies <a href=\"http://github.com/pkrumins/node-png\">node-png</a>, <a href=\"http://github.com/pkrumins/node-gif\">node-gif</a> and <a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg</a>.</li>
</ul>
<p>We did not demo gifcasts in this video but I am going to do a separate video in the next week or two showing just that. They're pretty awesome!</p>
<p>In a few weeks we'll also post the 3rd demo video. In that video we have planned to show virtual network editor that allows to network virtual machines by just dragging and dropping! Be sure to subscribe to <a href=\"http://www.catonmat.net/feed/\">catonmat's rss feed</a> and <a href=\"http://twitter.com/pkrumins\">follow me on twitter</a> to know when the video is out!</p>
<p>See you!</p>
<p>Ps. Join #stackvm on FreeNode to discuss StackVM with me and James! We're there 24/7!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sc4EAbRvfxE:4o36azLA1Xo:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sc4EAbRvfxE:4o36azLA1Xo:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/sc4EAbRvfxE\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/stackvm-demo-video-two"))) ("Announcement: I am doing a startup - StackVM!" "<p><a href=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Hey everyone,</p>
<p>I have exceptional news - I am doing a startup together with <a href=\"http://substack.net\">James Halliday</a>!</p>
<p>I met James on FreeNode several years ago and it turned out that we had very similar ideas about doing great hacking. So we teamed up as equal co-founders to do a startup. We're on different continents but we use IRC, <a href=\"http://github.com/pkrumins/stackvm\">GitHub</a> and <a href=\"http://www.wedoist.com\">WeDoist</a> to get stuff done!</p>
<div class=\"c\"><p><a href=\"http://stackvm.com\"><img src=\"http://www.catonmat.net/images/stackvm.png\"></a></p>
</div>
<p>Check out an early demo of our software:</p>
<div class=\"c\"><object width=\"576\" height=\"447\"><param name=\"movie\" value=\"http://www.youtube.com/v/TWdkNO6XlFI&amp;hl=en_US&amp;fs=1\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/TWdkNO6XlFI&amp;hl=en_US&amp;fs=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"576\" height=\"447\"></embed>
</object>
<p><small>StackVM brings virtual machines to the web. Join #stackvm on FreeNode to discuss!</small></p>
</div>
<p>We can't present a live demo of our startup right now because we don't have that much computing power, however we'll soon be able to send out time-limited demos to several people a day. If you wish to try our software before anyone else does, fill in this form and we'll send you an invite code as soon as we have the hardware:</p>
<div class=\"c\"><div class=\"stackvm-form\"><form action=\"http://stackvm.com/sign-up.cgi\" method=\"POST\"><p>   <input type=\"hidden\" name=\"from\" value=\"catonmat\"><br>
<input type=\"hidden\" name=\"back\" value=\"http://www.catonmat.net/blog/i-am-doing-a-startup\"><br>
Your email: <input type=\"text\" name=\"email\"> <input type=\"submit\" value=\"Submit\"><br>
</p>
</form>
</div>
</div>
<p>The startup we're doing is called <strong><a href=\"http://www.stackvm.com\">StackVM</a></strong>. StackVM makes virtual machines much more accessible over the web, makes them easier to use, and makes them embeddable in webpages (like putting a virtual machine in a blog post). This is just the first step that we're starting with. Next we're making networking between them very easy, just drag and drop to create any virtual network topology you wish, with firewalls, switches, etc. (fun for hacking competitions and learning networking). Then we're making what we call \"vmcasts\" - much like a screencasts, except the computation is recorded, meaning that at any point you can break into the playing vmcast and change the course of computation (and return back to it later).</p>
<p>Our plan is to host the virtual machines and our awesome software for you, so that you don't have to worry about anything. We'll make sure it all works! At the moment we're actually already at our third major iteration of the software.</p>
<p>Here are a few use cases:</p>
<ul> <li>Suppose you're selling software and you want your users to try it before they buy it. Perfect use of StackVM - put your software in the virtual machine and embed it on your products page. The potential customers can try your software before they buy it right from your website!</li>
<li>Suppose you're an application developer and have written a program that should work cross-platform. You can easily rent 10 virtual machines with Linux, Windows, MacOS, and other operating systems and test your software. Just drag and drop it into the virtual machines, and you can test your software!</li>
<li>Suppose you want to teach someone how to work in Perl in a series of blog posts (like I do), you can embed the terminal with a vmcast in your blog post, and everyone can follow your tutorial, and also try out the examples interactively, in a real shell!</li>
<li>You can build a virtual honeypot network and have hackers break into it, then analyse how they did breakins. Or, you can build a huge network and learn routing and networking concepts!</li>
<li>Suppose you want to share your work with a group of people. You can easily do it in stackvm! Just send the other people link to your VM and they can connect to it with any web browser. They'll be able to see what you're doing, comment on your work, and if you allow fix your bugs (think pair programming!)</li>
</ul>
<p>Hosting virtual machines requires a lot of infrastructure, so we plan to start collecting revenue as soon as possible with affordable paid user accounts. We're not going to do the common nonsense among startups of first building up the project for years and only then trying to figure out how to make it profitable. We're going to offer virtual machines together with an awesome interface and features to them as a monthly paid service from the day we launch. We're also going to have an open API to our software, so that you can build on top of it or customize it (for example script virtual machines to do something specific).</p>
<p>We're also testing out the idea of complete openness with this startup. It's going to be 100% open-source and 100% idea-open, meaning that anyone can read what we're up to, and run our code if they want to run stackvm on their own. So far we have shared all the code on github (<a href=\"http://github.com/pkrumins/stackvm\">my stackvm repo</a>, <a href=\"http://github.com/substack/stackvm\">James's stackvm repo</a>) and documented most of the ideas and experiments on <a href=\"http://wiki.github.com/substack/stackvm/\">stackvm github wiki</a>. </p>
<p>We're applying for YC funding later this year so that we can focus on hacking and not paperwork.</p>
<p>Now a little bit about the tech we use at StackVM. I won't go into much details right now because many of the future posts will detail the tech at StackVM.</p>
<p>At the moment StackVM is in its 3rd major iteration already and is almost entirely built on <a href=\"http://nodejs.org/\">node.js</a>. Since we're doing everything open-source, we've written a bunch of reusable node.js modules:</p>
<ul> <li><a href=\"http://github.com/substack/dnode\">dnode</a> - Simple asynchronous remote method invocation for node.js.</li>
<li><a href=\"http://github.com/substack/node-bufferlist\">node-bufferlist</a> - Abstraction of node.js's buffers and monadic binary parsing.</li>
<li><a href=\"http://github.com/substack/node-rfb\">node-rfb</a> - Implements the client-side of the RFB protocol that VNC uses.</li>
<li><a href=\"http://github.com/pkrumins/node-png\">node-png</a> - Produces PNG images from RGB or RGBA values.</li>
<li><a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg</a> - Produces JPEG images from RGB or RGBA values.</li>
<li><a href=\"http://github.com/pkrumins/node-video\">node-video</a> - Records Theora/Ogg videos from RGB values.</li>
<li><a href=\"http://github.com/pkrumins/node-base64\">node-base64</a> - Encodes binary data to base64 to send across websockets and ajax.</li>
<li><a href=\"http://github.com/pkrumins/node-jsmin\">node-jsmin</a> - Minify JavaScript on the server side, before sending it to the browser.</li>
<li><a href=\"http://github.com/pkrumins/node-bufferdiff\">node-bufferdiff</a> - A module to compare two buffers quickly.</li>
</ul>
<p>I'll keep everyone updated on the progress and technical insight into our development. If you're not yet subscribed to my posts, please do it - <a href=\"http://www.catonmat.net/feed\">catonmat rss feed</a>. Going to make this happen!</p>
<p>And if you wish to talk about our software, come join #stackvm on FreeNode!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/Xx1yGj-DeVo\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/Xx1yGj-DeVo/i-am-doing-a-startup" (19553 10264) old 5 nil nil ((title ((type . "text")) "Announcement: I am doing a startup - StackVM!") (id nil "226") (updated nil "2010-08-10T10:21:12Z") (published nil "2010-07-21T12:10:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/Xx1yGj-DeVo/i-am-doing-a-startup"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/RzRUAOkPPH453s32hYvs-HDP0po/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Hey everyone,</p>
<p>I have exceptional news - I am doing a startup together with <a href=\"http://substack.net\">James Halliday</a>!</p>
<p>I met James on FreeNode several years ago and it turned out that we had very similar ideas about doing great hacking. So we teamed up as equal co-founders to do a startup. We're on different continents but we use IRC, <a href=\"http://github.com/pkrumins/stackvm\">GitHub</a> and <a href=\"http://www.wedoist.com\">WeDoist</a> to get stuff done!</p>
<div class=\"c\"><p><a href=\"http://stackvm.com\"><img src=\"http://www.catonmat.net/images/stackvm.png\"></a></p>
</div>
<p>Check out an early demo of our software:</p>
<div class=\"c\"><object width=\"576\" height=\"447\"><param name=\"movie\" value=\"http://www.youtube.com/v/TWdkNO6XlFI&amp;hl=en_US&amp;fs=1\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/TWdkNO6XlFI&amp;hl=en_US&amp;fs=1\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"576\" height=\"447\"></embed>
</object>
<p><small>StackVM brings virtual machines to the web. Join #stackvm on FreeNode to discuss!</small></p>
</div>
<p>We can't present a live demo of our startup right now because we don't have that much computing power, however we'll soon be able to send out time-limited demos to several people a day. If you wish to try our software before anyone else does, fill in this form and we'll send you an invite code as soon as we have the hardware:</p>
<div class=\"c\"><div class=\"stackvm-form\"><form action=\"http://stackvm.com/sign-up.cgi\" method=\"POST\"><p>   <input type=\"hidden\" name=\"from\" value=\"catonmat\"><br>
   <input type=\"hidden\" name=\"back\" value=\"http://www.catonmat.net/blog/i-am-doing-a-startup\"><br>
   Your email: <input type=\"text\" name=\"email\"> <input type=\"submit\" value=\"Submit\"><br>
  </p>
</form>
</div>
</div>
<p>The startup we're doing is called <strong><a href=\"http://www.stackvm.com\">StackVM</a></strong>. StackVM makes virtual machines much more accessible over the web, makes them easier to use, and makes them embeddable in webpages (like putting a virtual machine in a blog post). This is just the first step that we're starting with. Next we're making networking between them very easy, just drag and drop to create any virtual network topology you wish, with firewalls, switches, etc. (fun for hacking competitions and learning networking). Then we're making what we call \"vmcasts\" - much like a screencasts, except the computation is recorded, meaning that at any point you can break into the playing vmcast and change the course of computation (and return back to it later).</p>
<p>Our plan is to host the virtual machines and our awesome software for you, so that you don't have to worry about anything. We'll make sure it all works! At the moment we're actually already at our third major iteration of the software.</p>
<p>Here are a few use cases:</p>
<ul> <li>Suppose you're selling software and you want your users to try it before they buy it. Perfect use of StackVM - put your software in the virtual machine and embed it on your products page. The potential customers can try your software before they buy it right from your website!</li>
 <li>Suppose you're an application developer and have written a program that should work cross-platform. You can easily rent 10 virtual machines with Linux, Windows, MacOS, and other operating systems and test your software. Just drag and drop it into the virtual machines, and you can test your software!</li>
 <li>Suppose you want to teach someone how to work in Perl in a series of blog posts (like I do), you can embed the terminal with a vmcast in your blog post, and everyone can follow your tutorial, and also try out the examples interactively, in a real shell!</li>
 <li>You can build a virtual honeypot network and have hackers break into it, then analyse how they did breakins. Or, you can build a huge network and learn routing and networking concepts!</li>
 <li>Suppose you want to share your work with a group of people. You can easily do it in stackvm! Just send the other people link to your VM and they can connect to it with any web browser. They'll be able to see what you're doing, comment on your work, and if you allow fix your bugs (think pair programming!)</li>
</ul>
<p>Hosting virtual machines requires a lot of infrastructure, so we plan to start collecting revenue as soon as possible with affordable paid user accounts. We're not going to do the common nonsense among startups of first building up the project for years and only then trying to figure out how to make it profitable. We're going to offer virtual machines together with an awesome interface and features to them as a monthly paid service from the day we launch. We're also going to have an open API to our software, so that you can build on top of it or customize it (for example script virtual machines to do something specific).</p>
<p>We're also testing out the idea of complete openness with this startup. It's going to be 100% open-source and 100% idea-open, meaning that anyone can read what we're up to, and run our code if they want to run stackvm on their own. So far we have shared all the code on github (<a href=\"http://github.com/pkrumins/stackvm\">my stackvm repo</a>, <a href=\"http://github.com/substack/stackvm\">James's stackvm repo</a>) and documented most of the ideas and experiments on <a href=\"http://wiki.github.com/substack/stackvm/\">stackvm github wiki</a>. </p>
<p>We're applying for YC funding later this year so that we can focus on hacking and not paperwork.</p>
<p>Now a little bit about the tech we use at StackVM. I won't go into much details right now because many of the future posts will detail the tech at StackVM.</p>
<p>At the moment StackVM is in its 3rd major iteration already and is almost entirely built on <a href=\"http://nodejs.org/\">node.js</a>. Since we're doing everything open-source, we've written a bunch of reusable node.js modules:</p>
<ul> <li><a href=\"http://github.com/substack/dnode\">dnode</a> - Simple asynchronous remote method invocation for node.js.</li>
 <li><a href=\"http://github.com/substack/node-bufferlist\">node-bufferlist</a> - Abstraction of node.js's buffers and monadic binary parsing.</li>
 <li><a href=\"http://github.com/substack/node-rfb\">node-rfb</a> - Implements the client-side of the RFB protocol that VNC uses.</li>
 <li><a href=\"http://github.com/pkrumins/node-png\">node-png</a> - Produces PNG images from RGB or RGBA values.</li>
 <li><a href=\"http://github.com/pkrumins/node-jpeg\">node-jpeg</a> - Produces JPEG images from RGB or RGBA values.</li>
 <li><a href=\"http://github.com/pkrumins/node-video\">node-video</a> - Records Theora/Ogg videos from RGB values.</li>
 <li><a href=\"http://github.com/pkrumins/node-base64\">node-base64</a> - Encodes binary data to base64 to send across websockets and ajax.</li>
 <li><a href=\"http://github.com/pkrumins/node-jsmin\">node-jsmin</a> - Minify JavaScript on the server side, before sending it to the browser.</li>
 <li><a href=\"http://github.com/pkrumins/node-bufferdiff\">node-bufferdiff</a> - A module to compare two buffers quickly.</li>
</ul>
<p>I'll keep everyone updated on the progress and technical insight into our development. If you're not yet subscribed to my posts, please do it - <a href=\"http://www.catonmat.net/feed\">catonmat rss feed</a>. Going to make this happen!</p>
<p>And if you wish to talk about our software, come join #stackvm on FreeNode!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=Xx1yGj-DeVo:edKzBdHvZ4E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=Xx1yGj-DeVo:edKzBdHvZ4E:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/Xx1yGj-DeVo\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/i-am-doing-a-startup"))) ("Three Years of Blogging" "<p><a href=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2009/07/two-years-of-blogging.jpg' alt='A Year of Blogging' class=\"post-icon\" align=\"left\">Hey everyone! Another year has passed and it's now 3 years since I've been blogging here on catonmat! In this post I wish to summarize this year's statistics.</p>
<p>See the <a href=\"http://www.catonmat.net/blog/a-year-of-blogging/\">one year of blogging</a> and <a href=\"http://www.catonmat.net/blog/two-years-of-blogging\">two years of blogging</a> for previous year statistics.</p>
<p>First of all traffic statistics,</p>
<div class=\"c\"><p><a href=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-3rd-year-full.jpg\"><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-3rd-year.jpg\"></a><br>
<small>Traffic statistics for the period 2009-07-01 - 2010-07-01 from Google Analytics.</small></p>
</div>
<p>Alright, so catonmat has received 1.43 million visitors and 2.11 million page views during this year. That's 120k visits and 175k page views per month. Or 4,000 visitors per day and 5,800 page views per day. Good numbers.</p>
<p>Let's look at the whole traffic picture from the day one of blogging,</p>
<div class=\"c\"><p><a href=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-all-years-full.jpg\"><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-all-years.jpg\"></a><br>
<small>Traffic statistics for the period 2007-07-01 - 2010-07-01 from Google Analytics.</small></p>
</div>
<p>Looks pretty random but seems to have a hidden linear trend upwards.</p>
<p>Now the FeedBurner subscriber stats,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-feedburner-statistics-3rd-year.png\"><br>
<small>Feedburner statistics for the period 2009-07-01 - 2010-07-01.</small></p>
</div>
<p>Last year I left off with 7000 subscribers, and now I have around 12,000. That's 5000 new subscribers, or 13 new subscribers per day on average.</p>
<p>And the whole picture of subscriber dynamics since the beginning of blogging,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-feedburner-statistics-all-years.png\"><br>
<small>Feedburner statistics for the period 2007-07-01 - 2010-07-01.</small></p>
</div>
<p>Also a nice positive trend, if it keeps going the same way, I expect to have around 17,000 subscribers the next year.</p>
<p>Now to articles. During this year I have written 43 articles. Here are ten most popular ones:</p>
<ul> <li><a href=\"/blog/using-fibonacci-numbers-to-convert-from-miles-to-kilometers\">Using Fibonacci Numbers to Convert from Miles to Kilometers and Vice Versa</a> (194,417 views).</li>
<li><a href=\"/blog/top-ten-one-liners-from-commandlinefu-explained\">Top Ten One-Liners from CommandLineFu Explained</a>  (155,079 views).</li>
<li><a href=\"/blog/unix-utilities-lsof\">A Unix Utility You Should Know About: lsof</a> (59,204 views).</li>
<li><a href=\"/blog/ldd-arbitrary-code-execution\">ldd arbitrary code execution</a> (55,833 views).</li>
<li><a href=\"/blog/summary-of-mit-introduction-to-algorithms\">Summary of all the MIT Introduction to Algorithms lectures</a> (54,954 views).</li>
<li><a href=\"/blog/must-have-windows-programs\">Must-Have Windows Software (or Windows Programs that I use)</a> (53,825 views).</li>
<li><a href=\"/blog/busy-beaver\">The Busy Beaver Problem</a> (52,238 views).</li>
<li><a href=\"/blog/vim-plugins-snipmate-vim\">Vim Plugins You Should Know About, Part IV: snipmate.vim</a> (35,735 views).</li>
<li><a href=\"/blog/secret-perl-operators\">Secret Perl Operators</a> (34,346 views).</li>
<li><a href=\"/http-proxy-in-nodejs\">A HTTP Proxy Server in 20 Lines of node.js Code</a> (31,822 views).</li>
</ul>
<p>Here are my personal favorites that didn't make it into top ten:</p>
<ul> <li><a href=\"/blog/on-the-linear-time-algorithm-for-finding-fibonacci-numbers\">On the Linear Time Algorithm For Finding Fibonacci Numbers</a>.</li>
<li><a href=\"/blog/recursive-regular-expressions\">Recursive Regular Expressions</a>.</li>
<li><a href=\"/blog/on-functors\">On Functors</a>.</li>
<li><a href=\"/blog/derivation-of-ycombinator\">Deriving the Y-Combinator</a>.</li>
<li><a href=\"/blog/donald-knuths-first-computer\">Donald Knuth's First Computer</a>.</li>
</ul>
<p>It's now time for delicious cake:</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/portal-cake-three-years.jpg\"></p>
</div>
<p>Let's meet for cake the next year again! See you!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/LD7qo8re6-c\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/LD7qo8re6-c/three-years-of-blogging" (19509 63519) old 6 nil nil ((title ((type . "text")) "Three Years of Blogging") (id nil "225") (updated nil "2010-07-08T16:09:03Z") (published nil "2010-07-06T17:02:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/LD7qo8re6-c/three-years-of-blogging"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/i3W-bp_-Qx-idxkXze3Ega5xQ-Y/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2009/07/two-years-of-blogging.jpg' alt='A Year of Blogging' class=\"post-icon\" align=\"left\">Hey everyone! Another year has passed and it's now 3 years since I've been blogging here on catonmat! In this post I wish to summarize this year's statistics.</p>
<p>See the <a href=\"http://www.catonmat.net/blog/a-year-of-blogging/\">one year of blogging</a> and <a href=\"http://www.catonmat.net/blog/two-years-of-blogging\">two years of blogging</a> for previous year statistics.</p>
<p>First of all traffic statistics,</p>
<div class=\"c\"><p><a href=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-3rd-year-full.jpg\"><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-3rd-year.jpg\"></a><br>
<small>Traffic statistics for the period 2009-07-01 - 2010-07-01 from Google Analytics.</small></p>
</div>
<p>Alright, so catonmat has received 1.43 million visitors and 2.11 million page views during this year. That's 120k visits and 175k page views per month. Or 4,000 visitors per day and 5,800 page views per day. Good numbers.</p>
<p>Let's look at the whole traffic picture from the day one of blogging,</p>
<div class=\"c\"><p><a href=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-all-years-full.jpg\"><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-visitor-statistics-all-years.jpg\"></a><br>
<small>Traffic statistics for the period 2007-07-01 - 2010-07-01 from Google Analytics.</small></p>
</div>
<p>Looks pretty random but seems to have a hidden linear trend upwards.</p>
<p>Now the FeedBurner subscriber stats,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-feedburner-statistics-3rd-year.png\"><br>
<small>Feedburner statistics for the period 2009-07-01 - 2010-07-01.</small></p>
</div>
<p>Last year I left off with 7000 subscribers, and now I have around 12,000. That's 5000 new subscribers, or 13 new subscribers per day on average.</p>
<p>And the whole picture of subscriber dynamics since the beginning of blogging,</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/catonmat-feedburner-statistics-all-years.png\"><br>
<small>Feedburner statistics for the period 2007-07-01 - 2010-07-01.</small></p>
</div>
<p>Also a nice positive trend, if it keeps going the same way, I expect to have around 17,000 subscribers the next year.</p>
<p>Now to articles. During this year I have written 43 articles. Here are ten most popular ones:</p>
<ul> <li><a href=\"/blog/using-fibonacci-numbers-to-convert-from-miles-to-kilometers\">Using Fibonacci Numbers to Convert from Miles to Kilometers and Vice Versa</a> (194,417 views).</li>
 <li><a href=\"/blog/top-ten-one-liners-from-commandlinefu-explained\">Top Ten One-Liners from CommandLineFu Explained</a>  (155,079 views).</li>
 <li><a href=\"/blog/unix-utilities-lsof\">A Unix Utility You Should Know About: lsof</a> (59,204 views).</li>
 <li><a href=\"/blog/ldd-arbitrary-code-execution\">ldd arbitrary code execution</a> (55,833 views).</li>
 <li><a href=\"/blog/summary-of-mit-introduction-to-algorithms\">Summary of all the MIT Introduction to Algorithms lectures</a> (54,954 views).</li>
 <li><a href=\"/blog/must-have-windows-programs\">Must-Have Windows Software (or Windows Programs that I use)</a> (53,825 views).</li>
 <li><a href=\"/blog/busy-beaver\">The Busy Beaver Problem</a> (52,238 views).</li>
 <li><a href=\"/blog/vim-plugins-snipmate-vim\">Vim Plugins You Should Know About, Part IV: snipmate.vim</a> (35,735 views).</li>
 <li><a href=\"/blog/secret-perl-operators\">Secret Perl Operators</a> (34,346 views).</li>
 <li><a href=\"/http-proxy-in-nodejs\">A HTTP Proxy Server in 20 Lines of node.js Code</a> (31,822 views).</li>
</ul>
<p>Here are my personal favorites that didn't make it into top ten:</p>
<ul> <li><a href=\"/blog/on-the-linear-time-algorithm-for-finding-fibonacci-numbers\">On the Linear Time Algorithm For Finding Fibonacci Numbers</a>.</li>
 <li><a href=\"/blog/recursive-regular-expressions\">Recursive Regular Expressions</a>.</li>
 <li><a href=\"/blog/on-functors\">On Functors</a>.</li>
 <li><a href=\"/blog/derivation-of-ycombinator\">Deriving the Y-Combinator</a>.</li>
 <li><a href=\"/blog/donald-knuths-first-computer\">Donald Knuth's First Computer</a>.</li>
</ul>
<p>It's now time for delicious cake:</p>
<div class=\"c\"><p><img src=\"http://www.catonmat.net/images/third-year-of-blogging/portal-cake-three-years.jpg\"></p>
</div>
<p>Let's meet for cake the next year again! See you!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=LD7qo8re6-c:VRUMM9NZ5tg:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=LD7qo8re6-c:VRUMM9NZ5tg:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/LD7qo8re6-c\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/three-years-of-blogging"))) ("The Four Polymorphisms in C++" "<p><a href=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>When people talk about polymorphism in C++ they usually mean the thing of using a derived class through the base class pointer or reference, which is called <strong>subtype polymorphism</strong>. But they often forget that there are all kinds of other polymorphisms in C++, such as <strong>parametric polymorphism</strong>, <strong>ad-hoc polymorphism</strong> and <strong>coercion polymorphism</strong>.</p>
<p>These polymorphisms also go by different names in C++,</p>
<ul> <li>Subtype polymorphism is also known as <strong>runtime polymorphism</strong>.</li>
<li>Parametric polymorphism is also known as <strong>compile-time polymorphism</strong>.</li>
<li>Ad-hoc polymorphism is also known as <strong>overloading</strong>.</li>
<li>Coercion is also known as (implicit or explicit) <strong>casting</strong>.</li>
</ul>
<p>In this article I'll illustrate all the polymorphisms through examples in C++ language and also give insight on why they have various other names.</p>
<h2>Subtype Polymorphism (Runtime Polymorphism)</h2>
<p>Subtype polymorphism is what everyone understands when they say \"polymorphism\" in C++. It's the ability to use derived classes through base class pointers and references.</p>
<p>Here is an example. Suppose you have various cats like these felines,</p>
<div class=\"c\"><p><img src=\"/images/polymorphic-cats.gif\" alt=\"Polymorphic Cats\"><br>
<small>Polymorphic cats on a mat by <a href=\"http://substack.net\">James Halliday</a>.</small></p>
</div>
<p>Since they are all of Felidae biological family, and they all should be able to meow, they can be represented as classes inheriting from <code>Felid</code> base class and overriding the <code>meow</code> pure virtual function,</p>
<div class=\"highlight\"><pre ><span class=\"c1\">// file cats.h</span>
<span class=\"k\">class</span> <span class=\"nc\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>
<span class=\"p\">};</span>
<span class=\"k\">class</span> <span class=\"nc\">Cat</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like a regular cat! meow!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
<span class=\"k\">class</span> <span class=\"nc\">Tiger</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like a tiger! MREOWWW!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
<span class=\"k\">class</span> <span class=\"nc\">Ocelot</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like an ocelot! mews!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
</pre>
</div>
<p>Now the main program can use <code>Cat</code>, <code>Tiger</code> and <code>Ocelot</code> interchangeably through <code>Felid</code> (base class) pointer,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &quot;cats.h&quot;</span>
<span class=\"kt\">void</span> <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"n\">Felid</span> <span class=\"o\">*</span><span class=\"n\">cat</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"n\">cat</span><span class=\"o\">-&gt;</span><span class=\"n\">meow</span><span class=\"p\">();</span>
<span class=\"p\">}</span>
<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"n\">Cat</span> <span class=\"n\">cat</span><span class=\"p\">;</span>
<span class=\"n\">Tiger</span> <span class=\"n\">tiger</span><span class=\"p\">;</span>
<span class=\"n\">Ocelot</span> <span class=\"n\">ocelot</span><span class=\"p\">;</span>
<span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cat</span><span class=\"p\">);</span>
<span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tiger</span><span class=\"p\">);</span>
<span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ocelot</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here the main program passes pointers to <code>cat</code>, <code>tiger</code> and <code>ocelot</code> to <code>do_meowing</code> function that expects a pointer to <code>Felid</code>. Since they are all <code>Felid</code>s, the program calls the right <code>meow</code> function for each felid and the output is:</p>
<pre >
Meowing like a regular cat! meow!
Meowing like a tiger! MREOWWW!
Meowing like an ocelot! mews!
</pre>
<p>Subtype polymorphism is also called <strong>runtime polymorphism</strong> for a good reason. The resolution of polymorphic function calls happens at runtime through an indirection via the virtual table. Another way of explaining this is that compiler does not locate the address of the function to be called at compile-time, instead when the program is run, the function is called by dereferencing the right pointer in the virtual table.</p>
<p>In type theory it's also known as <strong>inclusion polymorphism</strong>.</p>
<h2>Parametric Polymorphism (Compile-Time Polymorphism)</h2>
<p>Parametric polymorphism provides a means to execute the same code for any type. In C++ parametric polymorphism is implemented via templates.</p>
<p>One of the simplest examples is a generic <code>max</code> function that finds maximum of two of its arguments,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>
<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"o\">&gt;</span>
<span class=\"n\">T</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>     <span class=\"c1\">// 9</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">),</span> <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"s\">&quot;bar&quot;</span><span class=\"p\">);</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// &quot;foo&quot;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here the <code>max</code> function is polymorphic on type <code>T</code>. Note, however, that it doesn't work on pointer types because comparing pointers compares the memory locations and not the contents. To get it working for pointers you'd have to specialize the template for pointer types and that would no longer be parametric polymorphism but would be ad-hoc polymorphism.</p>
<p>Since parametric polymorphism happens at compile time, it's also called <strong>compile-time polymorphism</strong>.</p>
<h2>Ad-hoc Polymorphism (Overloading)</h2>
<p>Ad-hoc polymorphism allows functions with the same name act differently for each type. For example, given two <code>int</code>s and the <code>+</code> operator, it adds them together. Given two <code>std::string</code>s it concatenates them together. This is called <strong>overloading</strong>.</p>
<p>Here is a concrete example that implements function <code>add</code> for <code>int</code>s and <code>string</code>s,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>
<span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>
<span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">b</span><span class=\"p\">;</span>
<span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">&quot;hello &quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;world&quot;</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Ad-hoc polymorphism also appears in C++ if you specialize templates. Returning to the previous example about <code>max</code> function, here is how you'd write a max for two <code>char *</code>,</p>
<pre >
template &lt;>
const char *max(const char *a, const char *b) {
return strcmp(a, b) > 0 ? a : b;
}
</pre>
<p>Now you can call <code>::max(\"foo\", \"bar\")</code> to find maximum of strings \"foo\" and \"bar\".</p>
<h2>Coercion Polymorphism (Casting)</h2>
<p>Coercion happens when an object or a primitive is cast into another object type or primitive type. For example,</p>
<div class=\"highlight\"><pre ><span class=\"kt\">float</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"c1\">// int gets promoted (cast) to float implicitly</span>
<span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mf\">9.99</span> <span class=\"c1\">// float gets demoted to int implicitly</span>
</pre>
</div>
<p>Explicit casting happens when you use C's type-casting expressions, such as <code>(unsigned int *)</code> or <code>(int)</code> or C++'s <code>static_cast</code>, <code>const_cast</code>, <code>reinterpret_cast</code>, or <code>dynamic_cast</code>.</p>
<p>Coercion also happens if the constructor of a class isn't <code>explicit</code>, for example,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"k\">class</span> <span class=\"nc\">A</span> <span class=\"p\">{</span>
<span class=\"kt\">int</span> <span class=\"n\">foo</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">ffoo</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">ffoo</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
<span class=\"kt\">void</span> <span class=\"n\">giggidy</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">foo</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
<span class=\"kt\">void</span> <span class=\"n\">moo</span><span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">giggidy</span><span class=\"p\">();</span>
<span class=\"p\">}</span>
<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"n\">moo</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">);</span>     <span class=\"c1\">// prints 55</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>If you made the constructor of A <code>explicit</code>, that would no longer be possible. It's always a good idea to make your constructors explicit to avoid accidental conversions.</p>
<p>Also if a class defines conversion operator for type <code>T</code>, then it can be used anywhere where type <code>T</code> is expected.</p>
<p>For example,</p>
<div class=\"highlight\"><pre ><span class=\"k\">class</span> <span class=\"nc\">CrazyInt</span> <span class=\"p\">{</span>
<span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"n\">CrazyInt</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
<span class=\"k\">operator</span> <span class=\"kt\">int</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// conversion from CrazyInt to int</span>
<span class=\"p\">};</span>
</pre>
</div>
<p>The <code>CrazyInt</code> defines a conversion operator to type <code>int</code>. Now if we had a function, let's say, <code>print_int</code> that took <code>int</code> as an argument, we could also pass it an object of type CrazyInt,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"kt\">void</span> <span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"n\">CrazyInt</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">55</span><span class=\"p\">;</span>
<span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"mi\">999</span><span class=\"p\">);</span>    <span class=\"c1\">// prints 999</span>
<span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>      <span class=\"c1\">// prints 55</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Subtype polymorphism that I discussed earlier is actually also coercion polymorphism because the derived class gets converted into base class type.</p>
<h2>Have Fun!</h2>
<p>Have fun with all the new knowledge about polymorphism!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/hw0jXfDKemQ\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/hw0jXfDKemQ/cpp-polymorphism" (19485 42292) old 7 nil nil ((title ((type . "text")) "The Four Polymorphisms in C++") (id nil "224") (updated nil "2010-06-20T05:20:52Z") (published nil "2010-06-18T10:10:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/hw0jXfDKemQ/cpp-polymorphism"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zdTcKcj8EaKYC_WVPtwawRlkAik/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>When people talk about polymorphism in C++ they usually mean the thing of using a derived class through the base class pointer or reference, which is called <strong>subtype polymorphism</strong>. But they often forget that there are all kinds of other polymorphisms in C++, such as <strong>parametric polymorphism</strong>, <strong>ad-hoc polymorphism</strong> and <strong>coercion polymorphism</strong>.</p>
<p>These polymorphisms also go by different names in C++,</p>
<ul> <li>Subtype polymorphism is also known as <strong>runtime polymorphism</strong>.</li>
 <li>Parametric polymorphism is also known as <strong>compile-time polymorphism</strong>.</li>
 <li>Ad-hoc polymorphism is also known as <strong>overloading</strong>.</li>
 <li>Coercion is also known as (implicit or explicit) <strong>casting</strong>.</li>
</ul>
<p>In this article I'll illustrate all the polymorphisms through examples in C++ language and also give insight on why they have various other names.</p>
<h2>Subtype Polymorphism (Runtime Polymorphism)</h2>
<p>Subtype polymorphism is what everyone understands when they say \"polymorphism\" in C++. It's the ability to use derived classes through base class pointers and references.</p>
<p>Here is an example. Suppose you have various cats like these felines,</p>
<div class=\"c\"><p><img src=\"/images/polymorphic-cats.gif\" alt=\"Polymorphic Cats\"><br>
<small>Polymorphic cats on a mat by <a href=\"http://substack.net\">James Halliday</a>.</small></p>
</div>
<p>Since they are all of Felidae biological family, and they all should be able to meow, they can be represented as classes inheriting from <code>Felid</code> base class and overriding the <code>meow</code> pure virtual function,</p>
<div class=\"highlight\"><pre ><span class=\"c1\">// file cats.h</span>

<span class=\"k\">class</span> <span class=\"nc\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"k\">virtual</span> <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>
<span class=\"p\">};</span>

<span class=\"k\">class</span> <span class=\"nc\">Cat</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like a regular cat! meow!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"k\">class</span> <span class=\"nc\">Tiger</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like a tiger! MREOWWW!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"k\">class</span> <span class=\"nc\">Ocelot</span> <span class=\"o\">:</span> <span class=\"k\">public</span> <span class=\"n\">Felid</span> <span class=\"p\">{</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"kt\">void</span> <span class=\"n\">meow</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Meowing like an ocelot! mews!</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
</pre>
</div>
<p>Now the main program can use <code>Cat</code>, <code>Tiger</code> and <code>Ocelot</code> interchangeably through <code>Felid</code> (base class) pointer,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &quot;cats.h&quot;</span>

<span class=\"kt\">void</span> <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"n\">Felid</span> <span class=\"o\">*</span><span class=\"n\">cat</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">cat</span><span class=\"o\">-&gt;</span><span class=\"n\">meow</span><span class=\"p\">();</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">Cat</span> <span class=\"n\">cat</span><span class=\"p\">;</span>
 <span class=\"n\">Tiger</span> <span class=\"n\">tiger</span><span class=\"p\">;</span>
 <span class=\"n\">Ocelot</span> <span class=\"n\">ocelot</span><span class=\"p\">;</span>

 <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">cat</span><span class=\"p\">);</span>
 <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">tiger</span><span class=\"p\">);</span>
 <span class=\"n\">do_meowing</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">ocelot</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here the main program passes pointers to <code>cat</code>, <code>tiger</code> and <code>ocelot</code> to <code>do_meowing</code> function that expects a pointer to <code>Felid</code>. Since they are all <code>Felid</code>s, the program calls the right <code>meow</code> function for each felid and the output is:</p>
<pre >
Meowing like a regular cat! meow!
Meowing like a tiger! MREOWWW!
Meowing like an ocelot! mews!
</pre>
<p>Subtype polymorphism is also called <strong>runtime polymorphism</strong> for a good reason. The resolution of polymorphic function calls happens at runtime through an indirection via the virtual table. Another way of explaining this is that compiler does not locate the address of the function to be called at compile-time, instead when the program is run, the function is called by dereferencing the right pointer in the virtual table.</p>
<p>In type theory it's also known as <strong>inclusion polymorphism</strong>.</p>
<h2>Parametric Polymorphism (Compile-Time Polymorphism)</h2>
<p>Parametric polymorphism provides a means to execute the same code for any type. In C++ parametric polymorphism is implemented via templates.</p>
<p>One of the simplest examples is a generic <code>max</code> function that finds maximum of two of its arguments,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>

<span class=\"k\">template</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"nc\">T</span><span class=\"o\">&gt;</span>
<span class=\"n\">T</span> <span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span> <span class=\"o\">?</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">b</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>     <span class=\"c1\">// 9</span>

 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s\">&quot;foo&quot;</span><span class=\"p\">),</span> <span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"s\">&quot;bar&quot;</span><span class=\"p\">);</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"o\">::</span><span class=\"n\">max</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"n\">bar</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"c1\">// &quot;foo&quot;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here the <code>max</code> function is polymorphic on type <code>T</code>. Note, however, that it doesn't work on pointer types because comparing pointers compares the memory locations and not the contents. To get it working for pointers you'd have to specialize the template for pointer types and that would no longer be parametric polymorphism but would be ad-hoc polymorphism.</p>
<p>Since parametric polymorphism happens at compile time, it's also called <strong>compile-time polymorphism</strong>.</p>
<h2>Ad-hoc Polymorphism (Overloading)</h2>
<p>Ad-hoc polymorphism allows functions with the same name act differently for each type. For example, given two <code>int</code>s and the <code>+</code> operator, it adds them together. Given two <code>std::string</code>s it concatenates them together. This is called <strong>overloading</strong>.</p>
<p>Here is a concrete example that implements function <code>add</code> for <code>int</code>s and <code>string</code>s,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>

<span class=\"kt\">int</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"k\">return</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">result</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">);</span>
 <span class=\"n\">result</span> <span class=\"o\">+=</span> <span class=\"n\">b</span><span class=\"p\">;</span>
 <span class=\"k\">return</span> <span class=\"n\">result</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s\">&quot;hello &quot;</span><span class=\"p\">,</span> <span class=\"s\">&quot;world&quot;</span><span class=\"p\">)</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Ad-hoc polymorphism also appears in C++ if you specialize templates. Returning to the previous example about <code>max</code> function, here is how you'd write a max for two <code>char *</code>,</p>
<pre >
template &lt;>
const char *max(const char *a, const char *b) {
 return strcmp(a, b) > 0 ? a : b;
}
</pre>
<p>Now you can call <code>::max(\"foo\", \"bar\")</code> to find maximum of strings \"foo\" and \"bar\".</p>
<h2>Coercion Polymorphism (Casting)</h2>
<p>Coercion happens when an object or a primitive is cast into another object type or primitive type. For example,</p>
<div class=\"highlight\"><pre ><span class=\"kt\">float</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">6</span><span class=\"p\">;</span> <span class=\"c1\">// int gets promoted (cast) to float implicitly</span>
<span class=\"kt\">int</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mf\">9.99</span> <span class=\"c1\">// float gets demoted to int implicitly</span>
</pre>
</div>
<p>Explicit casting happens when you use C's type-casting expressions, such as <code>(unsigned int *)</code> or <code>(int)</code> or C++'s <code>static_cast</code>, <code>const_cast</code>, <code>reinterpret_cast</code>, or <code>dynamic_cast</code>.</p>
<p>Coercion also happens if the constructor of a class isn't <code>explicit</code>, for example,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>

<span class=\"k\">class</span> <span class=\"nc\">A</span> <span class=\"p\">{</span>
 <span class=\"kt\">int</span> <span class=\"n\">foo</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"n\">A</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">ffoo</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">ffoo</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
 <span class=\"kt\">void</span> <span class=\"n\">giggidy</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">foo</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"kt\">void</span> <span class=\"n\">moo</span><span class=\"p\">(</span><span class=\"n\">A</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">a</span><span class=\"p\">.</span><span class=\"n\">giggidy</span><span class=\"p\">();</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">moo</span><span class=\"p\">(</span><span class=\"mi\">55</span><span class=\"p\">);</span>     <span class=\"c1\">// prints 55</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>If you made the constructor of A <code>explicit</code>, that would no longer be possible. It's always a good idea to make your constructors explicit to avoid accidental conversions.</p>
<p>Also if a class defines conversion operator for type <code>T</code>, then it can be used anywhere where type <code>T</code> is expected.</p>
<p>For example,</p>
<div class=\"highlight\"><pre ><span class=\"k\">class</span> <span class=\"nc\">CrazyInt</span> <span class=\"p\">{</span>
 <span class=\"kt\">int</span> <span class=\"n\">v</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
 <span class=\"n\">CrazyInt</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
 <span class=\"k\">operator</span> <span class=\"kt\">int</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">v</span><span class=\"p\">;</span> <span class=\"p\">}</span> <span class=\"c1\">// conversion from CrazyInt to int</span>
<span class=\"p\">};</span>
</pre>
</div>
<p>The <code>CrazyInt</code> defines a conversion operator to type <code>int</code>. Now if we had a function, let's say, <code>print_int</code> that took <code>int</code> as an argument, we could also pass it an object of type CrazyInt,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>

<span class=\"kt\">void</span> <span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">{</span>
 <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">a</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
 <span class=\"n\">CrazyInt</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"mi\">55</span><span class=\"p\">;</span>
 <span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"mi\">999</span><span class=\"p\">);</span>    <span class=\"c1\">// prints 999</span>
 <span class=\"n\">print_int</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">);</span>      <span class=\"c1\">// prints 55</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Subtype polymorphism that I discussed earlier is actually also coercion polymorphism because the derived class gets converted into base class type.</p>
<h2>Have Fun!</h2>
<p>Have fun with all the new knowledge about polymorphism!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=hw0jXfDKemQ:Ytq4OVbydhY:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=hw0jXfDKemQ:Ytq4OVbydhY:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/hw0jXfDKemQ\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/cpp-polymorphism"))) ("Yet Another Ten One-Liners from CommandLineFu Explained" "<p><a href=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Hey everyone, this is the fourth article in the series on the most popular <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> one-liners explained.</p>
<p>Here are the first three parts:</p>
<ul><li><a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">Part I: Top Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained/\">Part II: The Next Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained/\">Part III: Another Ten One-Liners from CommandLineFu Explained</a></li>
</ul>
<p>And here are today's one-liners:</p>
<h2>31. Quickly access ASCII table.</h2>
<pre >$ man 7 ascii</pre>
<p>Ever forgot a keycode for some ASCII character or escape code? Look no further, <code>man ascii</code> contains the 7-bit ASCII table. Take a look at it <a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/ascii.7.html\">online</a>.</p>
<p>Linux <a href=\"http://www.kernel.org/doc/man-pages/\">man pages</a> are full of gems like these. One day I actually went through all the man pages to find the most interesting ones. An article about them is upcoming but before I get it published, here are a few interesting ones:</p>
<ul> <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man1/intro.1.html\">man 1 intro</a> - a tutorial that gets you started with Linux if you have never used it.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man2/syscalls.2.html\">man 2 syscalls</a> - lists all Linux system calls by kernel version.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man2/select_tut.2.html\">man 2 select_tut</a> - <code>select()</code> system call tutorial.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/string.3.html\">man 3 string</a> - lists all &lt;string.h&gt; string manipulation functions.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/stdio.3.html\">man 3 stdio</a> - lists and describes all &lt;stdio.h&gt; standard input/output library functions.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/errno.3.html\">man 3 errno</a> - lists and describes all <code>errno</code> error numbers.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man4/console_codes.4.html\">man 4 console_codes</a> - Linux console escape and control sequences.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man4/full.4.html\">man 4 full</a> - <code>/dev/full</code> - a device that simulates a full device.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html\">man 5 proc</a> - lots of info about the <code>/proc</code> filesystem.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man5/filesystems.5.html\">man 5 filesystems</a> - lists various Linux filesystems.</li>
</ul>
<p>And finally the section 7 man pages that are most packed with wild and cool info,</p>
<ul> <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/bootparam.7.html\">man 7 bootparam</a> - a tutorial and reference of Linux kernel boot parameters.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/charsets.7.html\">man 7 charsets</a> - a Linux programmer's view of character sets and internationalization.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/glob.7.html\">man 7 glob</a> - how pathname globbing works.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/hier.7.html\">man 7 hier</a> - description of the Linux file system hierarchy.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/operator.7.html\">man 7 operator</a> - C language operator precedence and associativity table.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/regex.7.html\">man 7 regex</a> - basic and extended regular expression overview.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/suffixes.7.html\">man 7 suffixes</a> - lists common Linux file suffixes and the associated file types.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/time.7.html\">man 7 time</a> - overview of time and timers.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/units.7.html\">man 7 units</a> - kilo, kibi, mega, mebi, giga, gibi, ... - decimal (SI) and binary system of units.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/utf8.7.html\">man 7 utf8</a> - description of UTF-8 encoding.</li>
<li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/url.7.html\">man 7 url</a> - description of URIs, URLs and URNs.</li>
</ul>
<p>There are a lot more interesting man pages but these stood out from the rest.</p>
<h2>32. Simple timer.</h2>
<pre >$ time read</pre>
<p>This one-liner can be used a simple timer. For example, if you wish to time something, you can execute it when the event starts and press the return key when the event ends. It will output the time the event took to finish.</p>
<p>Here is how this one-liner works. First the <code>time</code> command times any command that is supplied to it. In this case the command supplied to it is <code>read</code> that reads a line from the standard input. As soon as you press enter, <code>read</code> finishes and time reports how long it took.</p>
<p>If you get annoyed by having to press enter, you can specify that <code>read</code> should return after having read 1 character,</p>
<pre >$ time read -N 1</pre>
<p>Now you can press any key to stop the timer.</p>
<p>If you wish to run a timer for a specific number of seconds, you can add <code>-t</code> flag for timeout,</p>
<pre >$ time read -t 60</pre>
<p>This would stop the timer after 60 seconds.</p>
<h2>33. Shutdown a Windows machine.</h2>
<pre >$ net rpc shutdown -I IP_ADDRESS -U username%password</pre>
<p>Everyone knows the <code>net</code> command, right? We all used to <code>net use \\\\ip\\ipc$ *</code>, right? :)</p>
<p>Anyway, the <code>net</code> command comes as part of <a href=\"http://samba.org/\">Samba</a>, which allows you, for example, to use Linux in a Windows workgroup.</p>
<p>This particular one-liner executes the <code>shutdown</code> command on a Windows computer located at <code>IP_ADDRESS</code> with as the user <code>username</code> with password <code>password</code>.</p>
<p>To reboot a machine use the <code>-r</code> switch to <code>net rpc</code>:</p>
<pre >$ net rpc shutdown -r -I IP_ADDRESS -U username%password</pre>
<p>If you're on an unsecured network, don't forget about the good old <code>nmblookup</code> and <code>smbclient</code> tools that come with Samba.</p>
<h2>34. Execute a command independently from the current shell.</h2>
<pre >$ (cd /tmp && ls)</pre>
<p>This one-liner illustrates subshells. Here the commands <code>cd /tmp</code> and <code>ls</code> are executed but they do not affect the current shell. If you had done just <code>cd /tmp && ls</code>, your current shell would have changed directory to <code>/tmp</code> but in this one-liner it happens in a subshell and your current shell is not affected.</p>
<p>Surely, this is only a toy example. If you wanted to know what's in <code>/tmp</code>, you'd do just <code>ls /tmp</code>.</p>
<p>Actually, talking about <code>cd</code>, be aware of <code>pushd</code> and <code>popd</code> commands. They allow you to maintain a stack of directories you want to return to later. For example,</p>
<pre >
/long/path/is/long$ pushd .
/long/path/is/long$ cd /usr
/usr$ popd
/long/path/is/long$
</pre>
<p>Or even shorter, passing the directory you're gonna <code>cd</code> to directly to <code>pushd</code>,</p>
<pre >
/long/path/is/long$ pushd /usr
/usr$ popd
/long/path/is/long$
</pre>
<p>Another cool trick is to use <code>cd -</code> to return to the previous directory. Here is an example,</p>
<pre >
/home/pkrumins$ cd /tmp
/tmp$ cd -
/home/pkrumins$
</pre>
<h2>35. Tunnel your SSH connection via intermediate host.</h2>
<pre >$ ssh -t reachable_host ssh unreachable_host</pre>
<p>This one-liner creates an ssh connection to <code>unreachable_host</code> via <code>reachable_host</code>. It does it by executing the <code>ssh unreachable_host</code> on <code>reachable_host</code>. The <code>-t</code> forces ssh to allocate a pseudo-tty, which is necessary for working interactively in the second ssh to <code>unreachable_host</code>.</p>
<p>This one-liner can be generalized. You can tunnel through arbitrary number of ssh servers:</p>
<pre >$ ssh -t host1 ssh -t host2 ssh -t host3 ssh -t host4 ...</pre>
<p>Now catch me if you can. ;)</p>
<h2>36. Clear the terminal screen.</h2>
<pre >$ CTRL+l</pre>
<p>Pressing CTRL+l (that's small <code>L</code>) clears the screen leaving the current line at the top of the screen.</p>
<p>If you wish to clear just some line, you can use argumented version of <code>CTRL+l</code> - first press <code>ESC</code>, then the line you want to clear, let's say 21 (21st line), and then press the same CTRL+l. That will clear the 21st line on the screen without erasing the whole screen.</p>
<pre >$ ESC 21 CTRL+l</pre>
<p>This command outputs a special \"clear-screen\" sequence to the terminal. The same can be achieved by <code>tput</code> command,</p>
<pre >$ tput clear</pre>
<p>Another way to clear the terminal (usually when the screen gets garbled) is to use the <code>reset</code> command,</p>
<pre >$ reset</pre>
<h2>37. Hear when the machine comes back online.</h2>
<pre >$ ping -a IP</pre>
<p>Ever had a situation when you need to know when the system comes up after a reboot? Up until now you probably launched <code>ping</code> and either followed the timeouts until the system came back, or left it running and occasionally checked its output to see if the host is up. But that is unnecessary, you can make ping <code>-a</code> audible! As soon as the host at <code>IP</code> is back, <code>ping</code> will beep!</p>
<h2>38. List 10 most often used commands.</h2>
<pre >$ history | awk '{a[$2]++}END{for(i in a){print a[i] \" \" i}}' | sort -rn | head</pre>
<p>The person who wrote it has the Unix mindset right. He's combining several shell commands to get the result he/she wants.</p>
<p>First, <code>history</code> outputs all the commands the person has executed. Next, <code>awk</code> counts how many times the second column <code>$2</code> appears in the output. Once <code>history</code> has output all the commands and <code>awk</code> has counted them, <code>awk</code> loops over all the commands and outputs the count <code>a[i]</code> separated by space, followed by the command itself. Then <code>sort</code> takes this input and sorts numerically <code>-n</code> and reverses the output <code>-r</code>, so that most frequent commands were on top. Finally <code>head</code> outputs the first 10 most frequent history commands.</p>
<p>If you want to see more than 10 commands (or less), change <code>head</code> to <code>head -20</code> for 20 commands or <code>head -5</code> for 5 commands.</p>
<h2>39. Check gmail for new mail.</h2>
<pre >
$ curl -u you@gmail.com --silent \"https://mail.google.com/mail/feed/atom\" |
perl -ne \\
'
print \"Subject: $1 \" if /&lt;title>(.+?)&lt;\\/title>/ && $title++;
print \"(from $1)\\n\" if /&lt;email>(.+?)&lt;\\/email>/;
'
</pre>
<p>Gmail is cool because they offer an Atom feed for the new mail. This one-liner instructs <code>curl</code> to retrieve the feed and authenticate as <code>you@gmail.com</code>. You'll be prompted a password after you execute the command. Next it feeds the output to <code>perl</code>. Perl extracts the title (subject) of each email and the sender's email. These two items are printed to stdout.</p>
<p>Here is a the output when I run the command,</p>
<pre >
Subject: i heard you liked windows! (from gates@microsoft.com)
Subject: got root? (from bofh@underground.org)
</pre>
<h2>40. Watch Star-Wars via telnet.</h2>
<pre >$ telnet towel.blinkenlights.nl</pre>
<p>Needs no explaining. Just telnet to the host to watch ASCII Star-Wars.</p>
<p>And here is another one,</p>
<pre >$ telnet towel.blinkenlights.nl 666</pre>
<p>Connecting on port 666 will spit out BOFH excuses.</p>
<h2>That's it for today.</h2>
<p>I hope you enjoyed the 4th part of the article. Tune in next time for the 5th part.</p>
<p>Oh, and I'd love if you <a href=\"http://twitter.com/pkrumins\">followed me on Twitter!</a></p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/dqjNsh7dF8k\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/dqjNsh7dF8k/yet-another-ten-one-liners-from-commandlinefu-explained" (19471 62745) old 8 nil nil ((title ((type . "text")) "Yet Another Ten One-Liners from CommandLineFu Explained") (id nil "222") (updated nil "2010-06-09T20:10:01Z") (published nil "2010-06-02T12:45:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/dqjNsh7dF8k/yet-another-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/63fE5Cv6sgPuz2HNtgxled60Iv8/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Hey everyone, this is the fourth article in the series on the most popular <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> one-liners explained.</p>
<p>Here are the first three parts:</p>
<ul><li><a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">Part I: Top Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained/\">Part II: The Next Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained/\">Part III: Another Ten One-Liners from CommandLineFu Explained</a></li>
</ul>
<p>And here are today's one-liners:</p>
<h2>31. Quickly access ASCII table.</h2>
<pre >$ man 7 ascii</pre>
<p>Ever forgot a keycode for some ASCII character or escape code? Look no further, <code>man ascii</code> contains the 7-bit ASCII table. Take a look at it <a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/ascii.7.html\">online</a>.</p>
<p>Linux <a href=\"http://www.kernel.org/doc/man-pages/\">man pages</a> are full of gems like these. One day I actually went through all the man pages to find the most interesting ones. An article about them is upcoming but before I get it published, here are a few interesting ones:</p>
<ul> <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man1/intro.1.html\">man 1 intro</a> - a tutorial that gets you started with Linux if you have never used it.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man2/syscalls.2.html\">man 2 syscalls</a> - lists all Linux system calls by kernel version.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man2/select_tut.2.html\">man 2 select_tut</a> - <code>select()</code> system call tutorial.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/string.3.html\">man 3 string</a> - lists all &lt;string.h&gt; string manipulation functions.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/stdio.3.html\">man 3 stdio</a> - lists and describes all &lt;stdio.h&gt; standard input/output library functions.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man3/errno.3.html\">man 3 errno</a> - lists and describes all <code>errno</code> error numbers.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man4/console_codes.4.html\">man 4 console_codes</a> - Linux console escape and control sequences.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man4/full.4.html\">man 4 full</a> - <code>/dev/full</code> - a device that simulates a full device.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man5/proc.5.html\">man 5 proc</a> - lots of info about the <code>/proc</code> filesystem.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man5/filesystems.5.html\">man 5 filesystems</a> - lists various Linux filesystems.</li>
</ul>
<p>And finally the section 7 man pages that are most packed with wild and cool info,</p>
<ul> <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/bootparam.7.html\">man 7 bootparam</a> - a tutorial and reference of Linux kernel boot parameters.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/charsets.7.html\">man 7 charsets</a> - a Linux programmer's view of character sets and internationalization.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/glob.7.html\">man 7 glob</a> - how pathname globbing works.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/hier.7.html\">man 7 hier</a> - description of the Linux file system hierarchy.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/operator.7.html\">man 7 operator</a> - C language operator precedence and associativity table.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/regex.7.html\">man 7 regex</a> - basic and extended regular expression overview.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/suffixes.7.html\">man 7 suffixes</a> - lists common Linux file suffixes and the associated file types.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/time.7.html\">man 7 time</a> - overview of time and timers.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/units.7.html\">man 7 units</a> - kilo, kibi, mega, mebi, giga, gibi, ... - decimal (SI) and binary system of units.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/utf8.7.html\">man 7 utf8</a> - description of UTF-8 encoding.</li>
 <li><a href=\"http://www.kernel.org/doc/man-pages/online/pages/man7/url.7.html\">man 7 url</a> - description of URIs, URLs and URNs.</li>
</ul>
<p>There are a lot more interesting man pages but these stood out from the rest.</p>
<h2>32. Simple timer.</h2>
<pre >$ time read</pre>
<p>This one-liner can be used a simple timer. For example, if you wish to time something, you can execute it when the event starts and press the return key when the event ends. It will output the time the event took to finish.</p>
<p>Here is how this one-liner works. First the <code>time</code> command times any command that is supplied to it. In this case the command supplied to it is <code>read</code> that reads a line from the standard input. As soon as you press enter, <code>read</code> finishes and time reports how long it took.</p>
<p>If you get annoyed by having to press enter, you can specify that <code>read</code> should return after having read 1 character,</p>
<pre >$ time read -N 1</pre>
<p>Now you can press any key to stop the timer.</p>
<p>If you wish to run a timer for a specific number of seconds, you can add <code>-t</code> flag for timeout,</p>
<pre >$ time read -t 60</pre>
<p>This would stop the timer after 60 seconds.</p>
<h2>33. Shutdown a Windows machine.</h2>
<pre >$ net rpc shutdown -I IP_ADDRESS -U username%password</pre>
<p>Everyone knows the <code>net</code> command, right? We all used to <code>net use \\\\ip\\ipc$ *</code>, right? :)</p>
<p>Anyway, the <code>net</code> command comes as part of <a href=\"http://samba.org/\">Samba</a>, which allows you, for example, to use Linux in a Windows workgroup.</p>
<p>This particular one-liner executes the <code>shutdown</code> command on a Windows computer located at <code>IP_ADDRESS</code> with as the user <code>username</code> with password <code>password</code>.</p>
<p>To reboot a machine use the <code>-r</code> switch to <code>net rpc</code>:</p>
<pre >$ net rpc shutdown -r -I IP_ADDRESS -U username%password</pre>
<p>If you're on an unsecured network, don't forget about the good old <code>nmblookup</code> and <code>smbclient</code> tools that come with Samba.</p>
<h2>34. Execute a command independently from the current shell.</h2>
<pre >$ (cd /tmp && ls)</pre>
<p>This one-liner illustrates subshells. Here the commands <code>cd /tmp</code> and <code>ls</code> are executed but they do not affect the current shell. If you had done just <code>cd /tmp && ls</code>, your current shell would have changed directory to <code>/tmp</code> but in this one-liner it happens in a subshell and your current shell is not affected.</p>
<p>Surely, this is only a toy example. If you wanted to know what's in <code>/tmp</code>, you'd do just <code>ls /tmp</code>.</p>
<p>Actually, talking about <code>cd</code>, be aware of <code>pushd</code> and <code>popd</code> commands. They allow you to maintain a stack of directories you want to return to later. For example,</p>
<pre >
/long/path/is/long$ pushd .
/long/path/is/long$ cd /usr
/usr$ popd 
/long/path/is/long$
</pre>
<p>Or even shorter, passing the directory you're gonna <code>cd</code> to directly to <code>pushd</code>,</p>
<pre >
/long/path/is/long$ pushd /usr
/usr$ popd 
/long/path/is/long$
</pre>
<p>Another cool trick is to use <code>cd -</code> to return to the previous directory. Here is an example,</p>
<pre >
/home/pkrumins$ cd /tmp
/tmp$ cd -
/home/pkrumins$
</pre>
<h2>35. Tunnel your SSH connection via intermediate host.</h2>
<pre >$ ssh -t reachable_host ssh unreachable_host</pre>
<p>This one-liner creates an ssh connection to <code>unreachable_host</code> via <code>reachable_host</code>. It does it by executing the <code>ssh unreachable_host</code> on <code>reachable_host</code>. The <code>-t</code> forces ssh to allocate a pseudo-tty, which is necessary for working interactively in the second ssh to <code>unreachable_host</code>.</p>
<p>This one-liner can be generalized. You can tunnel through arbitrary number of ssh servers:</p>
<pre >$ ssh -t host1 ssh -t host2 ssh -t host3 ssh -t host4 ...</pre>
<p>Now catch me if you can. ;)</p>
<h2>36. Clear the terminal screen.</h2>
<pre >$ CTRL+l</pre>
<p>Pressing CTRL+l (that's small <code>L</code>) clears the screen leaving the current line at the top of the screen.</p>
<p>If you wish to clear just some line, you can use argumented version of <code>CTRL+l</code> - first press <code>ESC</code>, then the line you want to clear, let's say 21 (21st line), and then press the same CTRL+l. That will clear the 21st line on the screen without erasing the whole screen.</p>
<pre >$ ESC 21 CTRL+l</pre>
<p>This command outputs a special \"clear-screen\" sequence to the terminal. The same can be achieved by <code>tput</code> command,</p>
<pre >$ tput clear</pre>
<p>Another way to clear the terminal (usually when the screen gets garbled) is to use the <code>reset</code> command,</p>
<pre >$ reset</pre>
<h2>37. Hear when the machine comes back online.</h2>
<pre >$ ping -a IP</pre>
<p>Ever had a situation when you need to know when the system comes up after a reboot? Up until now you probably launched <code>ping</code> and either followed the timeouts until the system came back, or left it running and occasionally checked its output to see if the host is up. But that is unnecessary, you can make ping <code>-a</code> audible! As soon as the host at <code>IP</code> is back, <code>ping</code> will beep!</p>
<h2>38. List 10 most often used commands.</h2>
<pre >$ history | awk '{a[$2]++}END{for(i in a){print a[i] \" \" i}}' | sort -rn | head</pre>
<p>The person who wrote it has the Unix mindset right. He's combining several shell commands to get the result he/she wants.</p>
<p>First, <code>history</code> outputs all the commands the person has executed. Next, <code>awk</code> counts how many times the second column <code>$2</code> appears in the output. Once <code>history</code> has output all the commands and <code>awk</code> has counted them, <code>awk</code> loops over all the commands and outputs the count <code>a[i]</code> separated by space, followed by the command itself. Then <code>sort</code> takes this input and sorts numerically <code>-n</code> and reverses the output <code>-r</code>, so that most frequent commands were on top. Finally <code>head</code> outputs the first 10 most frequent history commands.</p>
<p>If you want to see more than 10 commands (or less), change <code>head</code> to <code>head -20</code> for 20 commands or <code>head -5</code> for 5 commands.</p>
<h2>39. Check gmail for new mail.</h2>
<pre >
$ curl -u you@gmail.com --silent \"https://mail.google.com/mail/feed/atom\" |
  perl -ne \\
  '
    print \"Subject: $1 \" if /&lt;title>(.+?)&lt;\\/title>/ && $title++;
    print \"(from $1)\\n\" if /&lt;email>(.+?)&lt;\\/email>/;
  '
</pre>
<p>Gmail is cool because they offer an Atom feed for the new mail. This one-liner instructs <code>curl</code> to retrieve the feed and authenticate as <code>you@gmail.com</code>. You'll be prompted a password after you execute the command. Next it feeds the output to <code>perl</code>. Perl extracts the title (subject) of each email and the sender's email. These two items are printed to stdout.</p>
<p>Here is a the output when I run the command,</p>
<pre >
Subject: i heard you liked windows! (from gates@microsoft.com)
Subject: got root? (from bofh@underground.org)
</pre>
<h2>40. Watch Star-Wars via telnet.</h2>
<pre >$ telnet towel.blinkenlights.nl</pre>
<p>Needs no explaining. Just telnet to the host to watch ASCII Star-Wars.</p>
<p>And here is another one,</p>
<pre >$ telnet towel.blinkenlights.nl 666</pre>
<p>Connecting on port 666 will spit out BOFH excuses.</p>
<h2>That's it for today.</h2>
<p>I hope you enjoyed the 4th part of the article. Tune in next time for the 5th part.</p>
<p>Oh, and I'd love if you <a href=\"http://twitter.com/pkrumins\">followed me on Twitter!</a></p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=dqjNsh7dF8k:TlyY7pgf0Q0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=dqjNsh7dF8k:TlyY7pgf0Q0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/dqjNsh7dF8k\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/yet-another-ten-one-liners-from-commandlinefu-explained"))) ("On Functors" "<p><a href=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>It's interesting how the term \"<strong>functor</strong>\" means completely different things in various programming languages. Take <strong>C++</strong> for example. Everyone who has mastered C++ knows that you call a class that implements <code>operator()</code> a functor. Now take <strong>Standard ML</strong>. In ML functors are mappings from structures to structures. Now <strong>Haskell</strong>. In Haskell functors are just homomorphisms over containers. And in <strong>Prolog</strong> functor means the atom at the start of a structure. They all are different. Let's take a closer look at each one.</p>
<h2>Functors in C++</h2>
<p>Functors in C++ are short for \"<strong>function objects</strong>.\" Function objects are instances of C++ classes that have the <code>operator()</code> defined. If you define <code>operator()</code> on C++ classes you get objects that act like functions but can also store state. Here is an example,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>
<span class=\"k\">class</span> <span class=\"nc\">SimpleFunctor</span> <span class=\"p\">{</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name_</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"n\">SimpleFunctor</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">name_</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
<span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"p\">()()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Oh, hello, &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name_</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"n\">SimpleFunctor</span> <span class=\"n\">sf</span><span class=\"p\">(</span><span class=\"s\">&quot;catonmat&quot;</span><span class=\"p\">);</span>
<span class=\"n\">sf</span><span class=\"p\">();</span>  <span class=\"c1\">// prints &quot;Oh, hello, catonmat&quot;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Notice how I was able to call <code>sf()</code> in the <code>main</code> function, even though <code>sf</code> was an object? That's because I defined <code>operator()</code> in <code>SimpleFunctor</code>'s class.</p>
<p>Most often functors in C++ are used as predicates, fake closures or comparison functions in STL algorithms. Here is another example. Suppose you have a list of integers and you wish to find the sum of all even ones, and the sum of all odd ones. Perfect job for a functor and <code>for_each</code> algorithm.</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;algorithm&gt;</span>
<span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;list&gt;</span>
<span class=\"k\">class</span> <span class=\"nc\">EvenOddFunctor</span> <span class=\"p\">{</span>
<span class=\"kt\">int</span> <span class=\"n\">even_</span><span class=\"p\">;</span>
<span class=\"kt\">int</span> <span class=\"n\">odd_</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
<span class=\"n\">EvenOddFunctor</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">even_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">odd_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
<span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"p\">()(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">even_</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">;</span>
<span class=\"k\">else</span> <span class=\"n\">odd_</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"kt\">int</span> <span class=\"n\">even_sum</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">even_</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"kt\">int</span> <span class=\"n\">odd_sum</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">odd_</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>
<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"n\">EvenOddFunctor</span> <span class=\"n\">evenodd</span><span class=\"p\">;</span>
<span class=\"kt\">int</span> <span class=\"n\">my_list</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"p\">};</span>
<span class=\"n\">evenodd</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">,</span>
<span class=\"n\">my_list</span><span class=\"o\">+</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>
<span class=\"n\">evenodd</span><span class=\"p\">);</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Sum of evens: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">evenodd</span><span class=\"p\">.</span><span class=\"n\">even_sum</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>
<span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Sum of odds: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">evenodd</span><span class=\"p\">.</span><span class=\"n\">odd_sum</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>
<span class=\"c1\">// output:</span>
<span class=\"c1\">// Sum of evens: 30</span>
<span class=\"c1\">// Sum of odds: 25</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here an instance of an <code>EvenOddFunctor</code> gets passed to <code>for_each</code> algorithm. The <code>for_each</code> algorithm iterates over each element in <code>my_list</code> and calls the functor. After it's done, it returns a copy of <code>evenodd</code> functor that contains the sum of evens and odds.</p>
<h2>Functors in Standard ML</h2>
<p>Vaguely talking in object-oriented terms, functors in ML are generic implementations of interfaces. In ML terms, functors are part of ML module system and they allow to compose structures.</p>
<p>Here is an example, suppose you want to write a plugin system and you wish all the plugins to implement the required interface, which, for simplicity, includes only the <code>perform</code> function. In ML you can first define a signature for plugins,</p>
<div class=\"highlight\"><pre ><span class=\"n\">signature</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">sig</span>
<span class=\"k\">val</span> <span class=\"n\">perform</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">unit</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>Now that we have defined an interface (signature) for plugins, we can implement two Plugins, let's say <code>LoudPlugin</code> and <code>SilentPlugin</code>. The implementation is done via structures,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">LoudPlugin</span> <span class=\"o\">:&gt;</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
<span class=\"k\">fun</span> <span class=\"n\">perform</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">print</span> <span class=\"s2\">&quot;DOING JOB LOUDLY!</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>And the SilentPlugin,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">SilentPlugin</span> <span class=\"o\">:&gt;</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
<span class=\"k\">fun</span> <span class=\"n\">perform</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">print</span> <span class=\"s2\">&quot;doing job silently</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>Now we get to functors. Remember functors in ML take structures as their arguments, so we can write one that takes <code>Plugin</code> as its argument,</p>
<div class=\"highlight\"><pre ><span class=\"k\">functor</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">P</span> <span class=\"o\">:</span> <span class=\"nc\">Plugin</span><span class=\"o\">)</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
<span class=\"k\">fun</span> <span class=\"n\">job</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"nn\">P</span><span class=\"p\">.</span><span class=\"n\">perform</span> <span class=\"bp\">()</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>This functor takes <code>Plugin</code> as <code>P</code> argument, and uses it in the <code>job</code> function, that calls <code>P</code> plugin's <code>perform</code> function.</p>
<p>Now let's use the <code>Performer</code> functor. Remember that a functor returns a structure,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">LoudPerformer</span> <span class=\"o\">=</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">LoudPlugin</span><span class=\"o\">);</span>
<span class=\"n\">structure</span> <span class=\"nc\">SilentPerformer</span> <span class=\"o\">=</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">SilentPlugin</span><span class=\"o\">);</span>
<span class=\"nn\">LoudPerformer</span><span class=\"p\">.</span><span class=\"n\">job</span> <span class=\"bp\">()</span><span class=\"o\">;</span>
<span class=\"nn\">SilentPerformer</span><span class=\"p\">.</span><span class=\"n\">job</span> <span class=\"bp\">()</span><span class=\"o\">;</span>
</pre>
</div>
<p>This outputs,</p>
<pre >
DOING JOB LOUDLY!
doing job silently
</pre>
<p>This is probably the simplest possible example of Standard ML functors.</p>
<h2>Functors in Haskell</h2>
<p>Functors in Haskell is what real functors are supposed to be. Haskell functors resemble mathematical functors from category theory. In category theory a functor F is a mapping between two categories such that the structure of the category being mapped over is preserved, in other words, it's a homomorphism between two categories.</p>
<p>In Haskell this definition is implemented as a simple type class,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">class</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span> <span class=\"kr\">where</span>
<span class=\"n\">fmap</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span>
</pre>
</div>
<p>Looking back at ML example, a type class in Haskell is like a signature, except it's defined on types. It defines what operations a type has to implement to be an instance of this class. In this case, however, the <code>Functor</code> is not defined over types but over type constructors <code>f</code>. It says, a <code>Functor</code> is something that implements the <code>fmap</code> function that takes a function from type <code>a</code> to type <code>b</code>, and a value of type <code>f a</code> (a type constructed from type constructor <code>f</code> applied to type <code>a</code>) and returns a value of type <code>f b</code>.</p>
<p>To understand what it does, think of <code>fmap</code> as a function that applies an operation to each element in some kind of a container.</p>
<p>The simplest example of functors is regular lists and the <code>map</code> function that maps a function to each element in the list.</p>
<pre >
Prelude> map (+1) [1,2,3,4,5]
[2,3,4,5,6]
</pre>
<p>In this simple example, the <code>Functor</code>'s <code>fmap</code> function is just <code>map</code> and type constructor <code>f</code> is <code>[]</code> - the list type constructor. Therefore the <code>Functor</code> instance for lists is defined as</p>
<div class=\"highlight\"><pre ><span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">[]</span> <span class=\"kr\">where</span>
<span class=\"n\">fmap</span> <span class=\"ow\">=</span> <span class=\"n\">map</span>
</pre>
</div>
<p>Let's see if it really is true by using <code>fmap</code> instead of <code>map</code> in the previous example,</p>
<pre >
Prelude> fmap (+1) [1,2,3,4,5]
[2,3,4,5,6]
</pre>
<p>But notice that Functor definition does not say anything about preserving the structure! Therefore any sensible functor must satisfy the functor laws, which are part of the definition of the mathematical functor, implicitly. There are two rules on <code>fmap</code>:</p>
<pre >
fmap id = id
fmap (g . h) = fmap g . fmap h
</pre>
<p>The first rule says that mapping the identity function over every element in a container has no effect. The second rule says that a composition of two functions over every item in a container is the same as first mapping one function, and then mapping the other.</p>
<p>Another example of Functors that illustrate them the most vividly is operations over trees. Think of a tree as a container, then <code>fmap</code> maps a function over tree values, while preserving the tree's structure.</p>
<p>Let's define a Tree first,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">data</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span>
<span class=\"o\">|</span> <span class=\"kt\">Leaf</span> <span class=\"n\">a</span>
<span class=\"kr\">deriving</span> <span class=\"kt\">Show</span>
</pre>
</div>
<p>This definition says that a <code>Tree</code> of type <code>a</code> is either a <code>Node</code> of two <code>Tree</code>s (left and right branches) or a <code>Leaf</code>. The <code>deriving Show</code> expression allows us to inspect the Tree via <code>show</code> function.</p>
<p>Now we can define a <code>Functor</code> over <code>Tree</code>s,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">Tree</span> <span class=\"kr\">where</span>
<span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"kt\">Leaf</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Leaf</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"n\">v</span><span class=\"p\">)</span>
<span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"kt\">Node</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"n\">r</span><span class=\"p\">)</span>
</pre>
</div>
<p>This definition says, that <code>fmap</code> of function <code>g</code> over a <code>Leaf</code> with value <code>v</code> is just a <code>Leaf</code> of <code>g</code> applied to <code>v</code>. And <code>fmap</code> of <code>g</code> over a <code>Node</code> with left <code>l</code> and right <code>r</code> branches is just a <code>Node</code> of <code>fmap</code> applied to the values of left and right branches.</p>
<p>Now let's illustrate how fmap works on trees. Let's construct a tree with String leaves and map the length function over them to find out the length of each leaf.</p>
<pre >
Prelude> let tree = (Node (Node (Leaf \"hello\") (Leaf \"foo\")) (Leaf \"baar\"))
Prelude> fmap length tree
Node (Node (Leaf 5) (Leaf 3)) (Leaf 4)
</pre>
<p>Here I constructed the following tree,</p>
<pre >
*
/ \\
/   \\
*  \"baar\"
/ \\
/   \\
/     \\
/       \\
\"hello\"  \"foo\"
</pre>
<p>And mapped <code>length</code> function over it, producing,</p>
<pre >
*
/ \\
/   \\
*     4
/ \\
/   \\
/     \\
/       \\
5         3
</pre>
<p>Another way of saying what <code>fmap</code> does is that is <strong>lifts</strong> a function from the \"normal world\" into the \"<code>f</code> world.\"</p>
<p>In fact Functor is the most fundamental type class in Haskell because Monads, Applicatives and Arrows are all Functors. As I like to say it, Haskell starts where the functors start.</p>
<p>If you wish to learn more about Haskell type classes, start with the excellent article <a href=\"http://www.catonmat.net/docs/typeclassopedia.pdf\">Typeclassopedia</a> (starts at page 17).</p>
<h2>Functors in Prolog</h2>
<p>Finally, functors in Prolog. Functors in Prolog are the simplest of all. They refer to two things. The first is the atom at the start of the structure. Here is an example, given an expression,</p>
<div class=\"highlight\"><pre ><span class=\"s-Atom\">?-</span> <span class=\"nf\">likes</span><span class=\"p\">(</span><span class=\"s-Atom\">mary</span><span class=\"p\">,</span> <span class=\"s-Atom\">pizza</span><span class=\"p\">)</span>
</pre>
</div>
<p>the functor is the first atom - <code>likes</code>.</p>
<p>The second is built-in predicate called <code>functor</code>. It returns the arity and the functor of a structure. For example,</p>
<div class=\"highlight\"><pre ><span class=\"s-Atom\">?-</span> <span class=\"nf\">functor</span><span class=\"p\">(</span><span class=\"nf\">likes</span><span class=\"p\">(</span><span class=\"s-Atom\">mary</span><span class=\"p\">,</span> <span class=\"s-Atom\">pizza</span><span class=\"p\">),</span> <span class=\"nv\">Functor</span><span class=\"p\">,</span> <span class=\"nv\">Arity</span><span class=\"p\">).</span>
<span class=\"nv\">Functor</span> <span class=\"o\">=</span> <span class=\"s-Atom\">likes</span>
<span class=\"nv\">Arity</span> <span class=\"o\">=</span> <span class=\"m\">2</span>
</pre>
</div>
<p>That's it for functors in Prolog.</p>
<h2>Conclusion</h2>
<p>This article demonstrated how a simple term like \"functor\" can refer to completely different things in various programming languages. Therefore when you hear a the term \"functor\", it's important to know the context it's being mentioned in.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/sm6nLqjn1Cs\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/sm6nLqjn1Cs/on-functors" (19441 21337) old 9 nil nil ((title ((type . "text")) "On Functors") (id nil "219") (updated nil "2010-05-17T14:31:53Z") (published nil "2010-05-17T13:30:45Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/sm6nLqjn1Cs/on-functors"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/yxphiH3knVvZNW1-qSTSowfvBYU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>It's interesting how the term \"<strong>functor</strong>\" means completely different things in various programming languages. Take <strong>C++</strong> for example. Everyone who has mastered C++ knows that you call a class that implements <code>operator()</code> a functor. Now take <strong>Standard ML</strong>. In ML functors are mappings from structures to structures. Now <strong>Haskell</strong>. In Haskell functors are just homomorphisms over containers. And in <strong>Prolog</strong> functor means the atom at the start of a structure. They all are different. Let's take a closer look at each one.</p>
<h2>Functors in C++</h2>
<p>Functors in C++ are short for \"<strong>function objects</strong>.\" Function objects are instances of C++ classes that have the <code>operator()</code> defined. If you define <code>operator()</code> on C++ classes you get objects that act like functions but can also store state. Here is an example,</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;string&gt;</span>

<span class=\"k\">class</span> <span class=\"nc\">SimpleFunctor</span> <span class=\"p\">{</span>
    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">string</span> <span class=\"n\">name_</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
    <span class=\"n\">SimpleFunctor</span><span class=\"p\">(</span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"o\">*</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">:</span> <span class=\"n\">name_</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
    <span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"p\">()()</span> <span class=\"p\">{</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Oh, hello, &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">name_</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"n\">SimpleFunctor</span> <span class=\"n\">sf</span><span class=\"p\">(</span><span class=\"s\">&quot;catonmat&quot;</span><span class=\"p\">);</span>
    <span class=\"n\">sf</span><span class=\"p\">();</span>  <span class=\"c1\">// prints &quot;Oh, hello, catonmat&quot;</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Notice how I was able to call <code>sf()</code> in the <code>main</code> function, even though <code>sf</code> was an object? That's because I defined <code>operator()</code> in <code>SimpleFunctor</code>'s class.</p>
<p>Most often functors in C++ are used as predicates, fake closures or comparison functions in STL algorithms. Here is another example. Suppose you have a list of integers and you wish to find the sum of all even ones, and the sum of all odd ones. Perfect job for a functor and <code>for_each</code> algorithm.</p>
<div class=\"highlight\"><pre ><span class=\"cp\">#include &lt;algorithm&gt;</span>
<span class=\"cp\">#include &lt;iostream&gt;</span>
<span class=\"cp\">#include &lt;list&gt;</span>

<span class=\"k\">class</span> <span class=\"nc\">EvenOddFunctor</span> <span class=\"p\">{</span>
    <span class=\"kt\">int</span> <span class=\"n\">even_</span><span class=\"p\">;</span>
    <span class=\"kt\">int</span> <span class=\"n\">odd_</span><span class=\"p\">;</span>
<span class=\"k\">public</span><span class=\"o\">:</span>
    <span class=\"n\">EvenOddFunctor</span><span class=\"p\">()</span> <span class=\"o\">:</span> <span class=\"n\">even_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">),</span> <span class=\"n\">odd_</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{}</span>
    <span class=\"kt\">void</span> <span class=\"k\">operator</span><span class=\"p\">()(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>
        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">%</span><span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">even_</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">;</span>
        <span class=\"k\">else</span> <span class=\"n\">odd_</span> <span class=\"o\">+=</span> <span class=\"n\">x</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
    <span class=\"kt\">int</span> <span class=\"n\">even_sum</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">even_</span><span class=\"p\">;</span> <span class=\"p\">}</span>
    <span class=\"kt\">int</span> <span class=\"n\">odd_sum</span><span class=\"p\">()</span> <span class=\"k\">const</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"n\">odd_</span><span class=\"p\">;</span> <span class=\"p\">}</span>
<span class=\"p\">};</span>

<span class=\"kt\">int</span> <span class=\"n\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"n\">EvenOddFunctor</span> <span class=\"n\">evenodd</span><span class=\"p\">;</span>
    
    <span class=\"kt\">int</span> <span class=\"n\">my_list</span><span class=\"p\">[]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span> <span class=\"p\">};</span>
    <span class=\"n\">evenodd</span> <span class=\"o\">=</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">for_each</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">,</span>
                  <span class=\"n\">my_list</span><span class=\"o\">+</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">)</span><span class=\"o\">/</span><span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">my_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span>
                  <span class=\"n\">evenodd</span><span class=\"p\">);</span>

    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Sum of evens: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">evenodd</span><span class=\"p\">.</span><span class=\"n\">even_sum</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;</span><span class=\"se\">\\n</span><span class=\"s\">&quot;</span><span class=\"p\">;</span>
    <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s\">&quot;Sum of odds: &quot;</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">evenodd</span><span class=\"p\">.</span><span class=\"n\">odd_sum</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>

    <span class=\"c1\">// output:</span>
    <span class=\"c1\">// Sum of evens: 30</span>
    <span class=\"c1\">// Sum of odds: 25</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>Here an instance of an <code>EvenOddFunctor</code> gets passed to <code>for_each</code> algorithm. The <code>for_each</code> algorithm iterates over each element in <code>my_list</code> and calls the functor. After it's done, it returns a copy of <code>evenodd</code> functor that contains the sum of evens and odds.</p>
<h2>Functors in Standard ML</h2>
<p>Vaguely talking in object-oriented terms, functors in ML are generic implementations of interfaces. In ML terms, functors are part of ML module system and they allow to compose structures.</p>
<p>Here is an example, suppose you want to write a plugin system and you wish all the plugins to implement the required interface, which, for simplicity, includes only the <code>perform</code> function. In ML you can first define a signature for plugins,</p>
<div class=\"highlight\"><pre ><span class=\"n\">signature</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">sig</span>
    <span class=\"k\">val</span> <span class=\"n\">perform</span> <span class=\"o\">:</span> <span class=\"kt\">unit</span> <span class=\"o\">-&gt;</span> <span class=\"kt\">unit</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>Now that we have defined an interface (signature) for plugins, we can implement two Plugins, let's say <code>LoudPlugin</code> and <code>SilentPlugin</code>. The implementation is done via structures,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">LoudPlugin</span> <span class=\"o\">:&gt;</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
    <span class=\"k\">fun</span> <span class=\"n\">perform</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">print</span> <span class=\"s2\">&quot;DOING JOB LOUDLY!</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>And the SilentPlugin,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">SilentPlugin</span> <span class=\"o\">:&gt;</span> <span class=\"nc\">Plugin</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
    <span class=\"k\">fun</span> <span class=\"n\">perform</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"n\">print</span> <span class=\"s2\">&quot;doing job silently</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>Now we get to functors. Remember functors in ML take structures as their arguments, so we can write one that takes <code>Plugin</code> as its argument,</p>
<div class=\"highlight\"><pre ><span class=\"k\">functor</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">P</span> <span class=\"o\">:</span> <span class=\"nc\">Plugin</span><span class=\"o\">)</span> <span class=\"o\">=</span>
<span class=\"k\">struct</span>
    <span class=\"k\">fun</span> <span class=\"n\">job</span> <span class=\"bp\">()</span> <span class=\"o\">=</span> <span class=\"nn\">P</span><span class=\"p\">.</span><span class=\"n\">perform</span> <span class=\"bp\">()</span>
<span class=\"k\">end</span><span class=\"o\">;</span>
</pre>
</div>
<p>This functor takes <code>Plugin</code> as <code>P</code> argument, and uses it in the <code>job</code> function, that calls <code>P</code> plugin's <code>perform</code> function.</p>
<p>Now let's use the <code>Performer</code> functor. Remember that a functor returns a structure,</p>
<div class=\"highlight\"><pre ><span class=\"n\">structure</span> <span class=\"nc\">LoudPerformer</span> <span class=\"o\">=</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">LoudPlugin</span><span class=\"o\">);</span>
<span class=\"n\">structure</span> <span class=\"nc\">SilentPerformer</span> <span class=\"o\">=</span> <span class=\"nc\">Performer</span><span class=\"o\">(</span><span class=\"nc\">SilentPlugin</span><span class=\"o\">);</span>

<span class=\"nn\">LoudPerformer</span><span class=\"p\">.</span><span class=\"n\">job</span> <span class=\"bp\">()</span><span class=\"o\">;</span>
<span class=\"nn\">SilentPerformer</span><span class=\"p\">.</span><span class=\"n\">job</span> <span class=\"bp\">()</span><span class=\"o\">;</span>
</pre>
</div>
<p>This outputs,</p>
<pre >
DOING JOB LOUDLY!
doing job silently
</pre>
<p>This is probably the simplest possible example of Standard ML functors.</p>
<h2>Functors in Haskell</h2>
<p>Functors in Haskell is what real functors are supposed to be. Haskell functors resemble mathematical functors from category theory. In category theory a functor F is a mapping between two categories such that the structure of the category being mapped over is preserved, in other words, it's a homomorphism between two categories.</p>
<p>In Haskell this definition is implemented as a simple type class,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">class</span> <span class=\"kt\">Functor</span> <span class=\"n\">f</span> <span class=\"kr\">where</span>
  <span class=\"n\">fmap</span> <span class=\"ow\">::</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"ow\">-&gt;</span> <span class=\"n\">f</span> <span class=\"n\">b</span>
</pre>
</div>
<p>Looking back at ML example, a type class in Haskell is like a signature, except it's defined on types. It defines what operations a type has to implement to be an instance of this class. In this case, however, the <code>Functor</code> is not defined over types but over type constructors <code>f</code>. It says, a <code>Functor</code> is something that implements the <code>fmap</code> function that takes a function from type <code>a</code> to type <code>b</code>, and a value of type <code>f a</code> (a type constructed from type constructor <code>f</code> applied to type <code>a</code>) and returns a value of type <code>f b</code>.</p>
<p>To understand what it does, think of <code>fmap</code> as a function that applies an operation to each element in some kind of a container.</p>
<p>The simplest example of functors is regular lists and the <code>map</code> function that maps a function to each element in the list.</p>
<pre >
Prelude> map (+1) [1,2,3,4,5]
[2,3,4,5,6]
</pre>
<p>In this simple example, the <code>Functor</code>'s <code>fmap</code> function is just <code>map</code> and type constructor <code>f</code> is <code>[]</code> - the list type constructor. Therefore the <code>Functor</code> instance for lists is defined as</p>
<div class=\"highlight\"><pre ><span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">[]</span> <span class=\"kr\">where</span>
  <span class=\"n\">fmap</span> <span class=\"ow\">=</span> <span class=\"n\">map</span>
</pre>
</div>
<p>Let's see if it really is true by using <code>fmap</code> instead of <code>map</code> in the previous example,</p>
<pre >
Prelude> fmap (+1) [1,2,3,4,5]
[2,3,4,5,6]
</pre>
<p>But notice that Functor definition does not say anything about preserving the structure! Therefore any sensible functor must satisfy the functor laws, which are part of the definition of the mathematical functor, implicitly. There are two rules on <code>fmap</code>:</p>
<pre >
fmap id = id
fmap (g . h) = fmap g . fmap h
</pre>
<p>The first rule says that mapping the identity function over every element in a container has no effect. The second rule says that a composition of two functions over every item in a container is the same as first mapping one function, and then mapping the other.</p>
<p>Another example of Functors that illustrate them the most vividly is operations over trees. Think of a tree as a container, then <code>fmap</code> maps a function over tree values, while preserving the tree's structure.</p>
<p>Let's define a Tree first,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">data</span> <span class=\"kt\">Tree</span> <span class=\"n\">a</span> <span class=\"ow\">=</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"kt\">Tree</span> <span class=\"n\">a</span><span class=\"p\">)</span>
            <span class=\"o\">|</span> <span class=\"kt\">Leaf</span> <span class=\"n\">a</span>
              <span class=\"kr\">deriving</span> <span class=\"kt\">Show</span>
</pre>
</div>
<p>This definition says that a <code>Tree</code> of type <code>a</code> is either a <code>Node</code> of two <code>Tree</code>s (left and right branches) or a <code>Leaf</code>. The <code>deriving Show</code> expression allows us to inspect the Tree via <code>show</code> function.</p>
<p>Now we can define a <code>Functor</code> over <code>Tree</code>s,</p>
<div class=\"highlight\"><pre ><span class=\"kr\">instance</span> <span class=\"kt\">Functor</span> <span class=\"kt\">Tree</span> <span class=\"kr\">where</span>
    <span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"kt\">Leaf</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Leaf</span> <span class=\"p\">(</span><span class=\"n\">g</span> <span class=\"n\">v</span><span class=\"p\">)</span>
    <span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"p\">(</span><span class=\"kt\">Node</span> <span class=\"n\">l</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"ow\">=</span> <span class=\"kt\">Node</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">fmap</span> <span class=\"n\">g</span> <span class=\"n\">r</span><span class=\"p\">)</span>
</pre>
</div>
<p>This definition says, that <code>fmap</code> of function <code>g</code> over a <code>Leaf</code> with value <code>v</code> is just a <code>Leaf</code> of <code>g</code> applied to <code>v</code>. And <code>fmap</code> of <code>g</code> over a <code>Node</code> with left <code>l</code> and right <code>r</code> branches is just a <code>Node</code> of <code>fmap</code> applied to the values of left and right branches.</p>
<p>Now let's illustrate how fmap works on trees. Let's construct a tree with String leaves and map the length function over them to find out the length of each leaf.</p>
<pre >
Prelude> let tree = (Node (Node (Leaf \"hello\") (Leaf \"foo\")) (Leaf \"baar\"))
Prelude> fmap length tree
Node (Node (Leaf 5) (Leaf 3)) (Leaf 4)
</pre>
<p>Here I constructed the following tree,</p>
<pre >
           *
          / \\
         /   \\
        *  \"baar\"
       / \\
      /   \\
     /     \\
    /       \\
 \"hello\"  \"foo\"
</pre>
<p>And mapped <code>length</code> function over it, producing,</p>
<pre >
           *
          / \\
         /   \\
        *     4
       / \\     
      /   \\
     /     \\
    /       \\
   5         3
</pre>
<p>Another way of saying what <code>fmap</code> does is that is <strong>lifts</strong> a function from the \"normal world\" into the \"<code>f</code> world.\"</p>
<p>In fact Functor is the most fundamental type class in Haskell because Monads, Applicatives and Arrows are all Functors. As I like to say it, Haskell starts where the functors start.</p>
<p>If you wish to learn more about Haskell type classes, start with the excellent article <a href=\"http://www.catonmat.net/docs/typeclassopedia.pdf\">Typeclassopedia</a> (starts at page 17).</p>
<h2>Functors in Prolog</h2>
<p>Finally, functors in Prolog. Functors in Prolog are the simplest of all. They refer to two things. The first is the atom at the start of the structure. Here is an example, given an expression,</p>
<div class=\"highlight\"><pre ><span class=\"s-Atom\">?-</span> <span class=\"nf\">likes</span><span class=\"p\">(</span><span class=\"s-Atom\">mary</span><span class=\"p\">,</span> <span class=\"s-Atom\">pizza</span><span class=\"p\">)</span>
</pre>
</div>
<p>the functor is the first atom - <code>likes</code>.</p>
<p>The second is built-in predicate called <code>functor</code>. It returns the arity and the functor of a structure. For example,</p>
<div class=\"highlight\"><pre ><span class=\"s-Atom\">?-</span> <span class=\"nf\">functor</span><span class=\"p\">(</span><span class=\"nf\">likes</span><span class=\"p\">(</span><span class=\"s-Atom\">mary</span><span class=\"p\">,</span> <span class=\"s-Atom\">pizza</span><span class=\"p\">),</span> <span class=\"nv\">Functor</span><span class=\"p\">,</span> <span class=\"nv\">Arity</span><span class=\"p\">).</span>
<span class=\"nv\">Functor</span> <span class=\"o\">=</span> <span class=\"s-Atom\">likes</span>
<span class=\"nv\">Arity</span> <span class=\"o\">=</span> <span class=\"m\">2</span>
</pre>
</div>
<p>That's it for functors in Prolog.</p>
<h2>Conclusion</h2>
<p>This article demonstrated how a simple term like \"functor\" can refer to completely different things in various programming languages. Therefore when you hear a the term \"functor\", it's important to know the context it's being mentioned in.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=sm6nLqjn1Cs:yycUuX5ASQ0:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=sm6nLqjn1Cs:yycUuX5ASQ0:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/sm6nLqjn1Cs\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/on-functors"))) ("Turn any Linux computer into SOCKS5 proxy in one command" "<p><a href=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>I thought I'd do a shorter article on catonmat this time. It goes hand in hand with my upcoming article series on \"<strong>100% technical guide to anonymity</strong>\" and it's much easier to write larger articles in smaller pieces. Then I can edit them together and produce the final article.</p>
<p>This article will be interesting for those who didn't know it already -- you can turn any Linux computer into a SOCKS5 (and SOCKS4) proxy in just one command:</p>
<pre >ssh -N -D 0.0.0.0:1080 localhost</pre>
<p>And it doesn't require root privileges. The <code>ssh</code> command starts up dynamic <code>-D</code> port forwarding on port <code>1080</code> and talks to the clients via SOCSK5 or SOCKS4 protocols, just like a regular SOCKS5 proxy would! The <code>-N</code> option makes sure ssh stays idle and doesn't execute any commands on localhost.</p>
<p>If you also wish the command to go into background as a daemon, then add <code>-f</code> option:</p>
<pre >ssh -f -N -D 0.0.0.0:1080 localhost</pre>
<p>To use it, just make your software use SOCKS5 proxy on your Linux computer's IP, port 1080, and you're done, all your requests now get proxied.</p>
<p>Access control can be implemented via <code>iptables</code>. For example, to allow only people from the ip <code>1.2.3.4</code> to use the SOCKS5 proxy, add the following <code>iptables</code> rules:</p>
<pre >
iptables -A INPUT --src 1.2.3.4 -p tcp --dport 1080 -j ACCEPT
iptables -A INPUT -p tcp --dport 1080 -j REJECT
</pre>
<p>The first rule says, allow anyone from <code>1.2.3.4</code> to connect to port <code>1080</code>, and the other rule says, deny everyone else from connecting to port <code>1080</code>.</p>
<p>Surely, executing <code>iptables</code> requires root privileges. If you don't have root privileges, and you don't want to leave your proxy open (and you really don't want to do that), you'll have to use some kind of a simple TCP proxy wrapper to do access control.</p>
<p>Here, I wrote one in Perl. It's called <code>tcp-proxy.pl</code> and it uses <code>IO::Socket::INET</code> to abstract sockets, and <code>IO::Select</code> to do connection multiplexing.</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"c1\">#!/usr/bin/perl</span>
<span class=\"c1\">#</span>
<span class=\"k\">use</span> <span class=\"n\">warnings</span><span class=\"p\">;</span>
<span class=\"k\">use</span> <span class=\"n\">strict</span><span class=\"p\">;</span>
<span class=\"k\">use</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"p\">;</span>
<span class=\"k\">use</span> <span class=\"nn\">IO::</span><span class=\"n\">Select</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">@allowed_ips</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">'1.2.3.4'</span><span class=\"p\">,</span> <span class=\"s\">'5.6.7.8'</span><span class=\"p\">,</span> <span class=\"s\">'127.0.0.1'</span><span class=\"p\">,</span> <span class=\"s\">'192.168.1.2'</span><span class=\"p\">);</span>
<span class=\"k\">my</span> <span class=\"nv\">$ioset</span> <span class=\"o\">=</span> <span class=\"nn\">IO::</span><span class=\"n\">Select</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">%socket_map</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$debug</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>
<span class=\"k\">sub </span><span class=\"nf\">new_conn</span> <span class=\"p\">{</span>
<span class=\"k\">my</span> <span class=\"p\">(</span><span class=\"nv\">$host</span><span class=\"p\">,</span> <span class=\"nv\">$port</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nv\">@_</span><span class=\"p\">;</span>
<span class=\"k\">return</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">(</span>
<span class=\"n\">PeerAddr</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$host</span><span class=\"p\">,</span>
<span class=\"n\">PeerPort</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$port</span>
<span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nb\">die</span> <span class=\"s\">&quot;Unable to connect to $host:$port: $!&quot;</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">sub </span><span class=\"nf\">new_server</span> <span class=\"p\">{</span>
<span class=\"k\">my</span> <span class=\"p\">(</span><span class=\"nv\">$host</span><span class=\"p\">,</span> <span class=\"nv\">$port</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nv\">@_</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">(</span>
<span class=\"n\">LocalAddr</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$host</span><span class=\"p\">,</span>
<span class=\"n\">LocalPort</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$port</span><span class=\"p\">,</span>
<span class=\"n\">ReuseAddr</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>
<span class=\"n\">Listen</span>    <span class=\"o\">=&gt;</span> <span class=\"mi\">100</span>
<span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nb\">die</span> <span class=\"s\">&quot;Unable to listen on $host:$port: $!&quot;</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">sub </span><span class=\"nf\">new_connection</span> <span class=\"p\">{</span>
<span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nv\">$server</span><span class=\"o\">-&gt;</span><span class=\"nb\">accept</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
<span class=\"k\">unless</span> <span class=\"p\">(</span><span class=\"n\">client_allowed</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">))</span> <span class=\"p\">{</span>
<span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip denied.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>
<span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>
<span class=\"k\">return</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip accepted.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"n\">new_conn</span><span class=\"p\">(</span><span class=\"s\">'localhost'</span><span class=\"p\">,</span> <span class=\"mi\">55555</span><span class=\"p\">);</span>
<span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
<span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$remote</span><span class=\"p\">);</span>
<span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nv\">$remote</span><span class=\"p\">;</span>
<span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$remote</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nv\">$client</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">sub </span><span class=\"nf\">close_connection</span> <span class=\"p\">{</span>
<span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
<span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">};</span>
<span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
<span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nv\">$remote</span><span class=\"p\">);</span>
<span class=\"nb\">delete</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">};</span>
<span class=\"nb\">delete</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$remote</span><span class=\"p\">};</span>
<span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>
<span class=\"nv\">$remote</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>
<span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip closed.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">sub </span><span class=\"nf\">client_ip</span> <span class=\"p\">{</span>
<span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
<span class=\"k\">return</span> <span class=\"n\">inet_ntoa</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"n\">sockaddr</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
<span class=\"k\">sub </span><span class=\"nf\">client_allowed</span> <span class=\"p\">{</span>
<span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
<span class=\"k\">return</span> <span class=\"nb\">grep</span> <span class=\"p\">{</span> <span class=\"nv\">$_</span> <span class=\"ow\">eq</span> <span class=\"nv\">$client_ip</span> <span class=\"p\">}</span> <span class=\"nv\">@allowed_ips</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">print</span> <span class=\"s\">&quot;Starting a server on 0.0.0.0:1080\\n&quot;</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"n\">new_server</span><span class=\"p\">(</span><span class=\"s\">'0.0.0.0'</span><span class=\"p\">,</span> <span class=\"mi\">1080</span><span class=\"p\">);</span>
<span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$server</span><span class=\"p\">);</span>
<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">for</span> <span class=\"k\">my</span> <span class=\"nv\">$socket</span> <span class=\"p\">(</span><span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">can_read</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$socket</span> <span class=\"o\">==</span> <span class=\"nv\">$server</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"n\">new_connection</span><span class=\"p\">(</span><span class=\"nv\">$server</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
<span class=\"k\">else</span> <span class=\"p\">{</span>
<span class=\"k\">next</span> <span class=\"k\">unless</span> <span class=\"nb\">exists</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$socket</span><span class=\"p\">};</span>
<span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$socket</span><span class=\"p\">};</span>
<span class=\"k\">my</span> <span class=\"nv\">$buffer</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$read</span> <span class=\"o\">=</span> <span class=\"nv\">$socket</span><span class=\"o\">-&gt;</span><span class=\"nb\">sysread</span><span class=\"p\">(</span><span class=\"nv\">$buffer</span><span class=\"p\">,</span> <span class=\"mi\">4096</span><span class=\"p\">);</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$read</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nv\">$remote</span><span class=\"o\">-&gt;</span><span class=\"nb\">syswrite</span><span class=\"p\">(</span><span class=\"nv\">$buffer</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
<span class=\"k\">else</span> <span class=\"p\">{</span>
<span class=\"n\">close_connection</span><span class=\"p\">(</span><span class=\"nv\">$socket</span><span class=\"p\">);</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>To use it, you'll have to make a change to the previous configuration. Instead of running ssh SOCKS5 proxy on <code>0.0.0.0:1080</code>, you'll need to run it on <code>localhost:55555</code>,</p>
<pre >ssh -f -N -D 55555 localhost</pre>
<p>After that, run the <code>tcp-proxy.pl</code>,</p>
<pre >perl tcp-proxy.pl &</pre>
<p>The TCP proxy will start listening on <code>0.0.0.0:1080</code> and will redirect only the allowed IPs in <code>@allowed_ips</code> list to <code>localhost:55555</code>.</p>
<p>Another possibility is to use another computer instead of your own as exit node. What I mean is you can do the following:</p>
<pre >ssh -f -N -D 1080 other_computer.com</pre>
<p>This will set up a SOCKS5 proxy on <code>localhost:1080</code> but when you use it, ssh will automatically tunnel your requests (encrypted) via <code>other_computer.com</code>. This way you can hide what you're doing on the Internet from anyone who might be sniffing your link. They will see that you're doing something but the traffic will be encrypted so they won't be able to tell what you're doing.</p>
<p>That's it. You're now the proxy king!</p>
<h2>Thanks To Vitalik</h2>
<p>Special thanks to Vitalik from \"<a href=\"http://www.itransition.com/\">Itransition company</a>\" for helpful tips!</p>
<div class=\"download\"><div class=\"download-title\"><p>Download tcp-proxy.pl</p>
</div>
<p>Download link: <a href=\"/download/tcp-proxy.pl\" title=\"Download &quot;tcp proxy (tcp-proxy.pl)&quot;\">tcp proxy (tcp-proxy.pl)</a><br>
Download URL: <code>http://www.catonmat.net/download/tcp-proxy.pl</code><br>
Downloaded: 753 times</p>
<p>I also pushed the tcp-proxy.pl to GitHub: <a href=\"http://github.com/pkrumins/perl-tcp-proxy\">tcp-proxy.pl on GitHub</a>. This project is also pretty nifty to generalize and make a program that redirects between any number of hosts:ports, not just two.</p>
</div>
<p>PS. I will probably also write \"<strong>A definitive guide to ssh port forwarding</strong>\" some time in the future because it's an interesting but little understood topic.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/4zYK7bywA9E\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/4zYK7bywA9E/linux-socks5-proxy" (19428 1279) old 10 nil nil ((title ((type . "text")) "Turn any Linux computer into SOCKS5 proxy in one command") (id nil "216") (updated nil "2010-05-07T12:18:07Z") (published nil "2010-05-06T19:20:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/4zYK7bywA9E/linux-socks5-proxy"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/YNxaV9UAol8eCKkj5e2LcjtklSc/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>I thought I'd do a shorter article on catonmat this time. It goes hand in hand with my upcoming article series on \"<strong>100% technical guide to anonymity</strong>\" and it's much easier to write larger articles in smaller pieces. Then I can edit them together and produce the final article.</p>
<p>This article will be interesting for those who didn't know it already -- you can turn any Linux computer into a SOCKS5 (and SOCKS4) proxy in just one command:</p>
<pre >ssh -N -D 0.0.0.0:1080 localhost</pre>
<p>And it doesn't require root privileges. The <code>ssh</code> command starts up dynamic <code>-D</code> port forwarding on port <code>1080</code> and talks to the clients via SOCSK5 or SOCKS4 protocols, just like a regular SOCKS5 proxy would! The <code>-N</code> option makes sure ssh stays idle and doesn't execute any commands on localhost.</p>
<p>If you also wish the command to go into background as a daemon, then add <code>-f</code> option:</p>
<pre >ssh -f -N -D 0.0.0.0:1080 localhost</pre>
<p>To use it, just make your software use SOCKS5 proxy on your Linux computer's IP, port 1080, and you're done, all your requests now get proxied.</p>
<p>Access control can be implemented via <code>iptables</code>. For example, to allow only people from the ip <code>1.2.3.4</code> to use the SOCKS5 proxy, add the following <code>iptables</code> rules:</p>
<pre >
iptables -A INPUT --src 1.2.3.4 -p tcp --dport 1080 -j ACCEPT
iptables -A INPUT -p tcp --dport 1080 -j REJECT
</pre>
<p>The first rule says, allow anyone from <code>1.2.3.4</code> to connect to port <code>1080</code>, and the other rule says, deny everyone else from connecting to port <code>1080</code>.</p>
<p>Surely, executing <code>iptables</code> requires root privileges. If you don't have root privileges, and you don't want to leave your proxy open (and you really don't want to do that), you'll have to use some kind of a simple TCP proxy wrapper to do access control.</p>
<p>Here, I wrote one in Perl. It's called <code>tcp-proxy.pl</code> and it uses <code>IO::Socket::INET</code> to abstract sockets, and <code>IO::Select</code> to do connection multiplexing.</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"c1\">#!/usr/bin/perl</span>
<span class=\"c1\">#</span>

<span class=\"k\">use</span> <span class=\"n\">warnings</span><span class=\"p\">;</span>
<span class=\"k\">use</span> <span class=\"n\">strict</span><span class=\"p\">;</span>

<span class=\"k\">use</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"p\">;</span>
<span class=\"k\">use</span> <span class=\"nn\">IO::</span><span class=\"n\">Select</span><span class=\"p\">;</span>

<span class=\"k\">my</span> <span class=\"nv\">@allowed_ips</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s\">&#39;1.2.3.4&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;5.6.7.8&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;127.0.0.1&#39;</span><span class=\"p\">,</span> <span class=\"s\">&#39;192.168.1.2&#39;</span><span class=\"p\">);</span>
<span class=\"k\">my</span> <span class=\"nv\">$ioset</span> <span class=\"o\">=</span> <span class=\"nn\">IO::</span><span class=\"n\">Select</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">%socket_map</span><span class=\"p\">;</span>

<span class=\"k\">my</span> <span class=\"nv\">$debug</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>

<span class=\"k\">sub </span><span class=\"nf\">new_conn</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"p\">(</span><span class=\"nv\">$host</span><span class=\"p\">,</span> <span class=\"nv\">$port</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nv\">@_</span><span class=\"p\">;</span>
    <span class=\"k\">return</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">(</span>
        <span class=\"n\">PeerAddr</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$host</span><span class=\"p\">,</span>
        <span class=\"n\">PeerPort</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$port</span>
    <span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nb\">die</span> <span class=\"s\">&quot;Unable to connect to $host:$port: $!&quot;</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">new_server</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"p\">(</span><span class=\"nv\">$host</span><span class=\"p\">,</span> <span class=\"nv\">$port</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"nv\">@_</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"nn\">IO::Socket::</span><span class=\"n\">INET</span><span class=\"o\">-&gt;</span><span class=\"k\">new</span><span class=\"p\">(</span>
        <span class=\"n\">LocalAddr</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$host</span><span class=\"p\">,</span>
        <span class=\"n\">LocalPort</span> <span class=\"o\">=&gt;</span> <span class=\"nv\">$port</span><span class=\"p\">,</span>
        <span class=\"n\">ReuseAddr</span> <span class=\"o\">=&gt;</span> <span class=\"mi\">1</span><span class=\"p\">,</span>
        <span class=\"n\">Listen</span>    <span class=\"o\">=&gt;</span> <span class=\"mi\">100</span>
    <span class=\"p\">)</span> <span class=\"o\">||</span> <span class=\"nb\">die</span> <span class=\"s\">&quot;Unable to listen on $host:$port: $!&quot;</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">new_connection</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nv\">$server</span><span class=\"o\">-&gt;</span><span class=\"nb\">accept</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>

    <span class=\"k\">unless</span> <span class=\"p\">(</span><span class=\"n\">client_allowed</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">))</span> <span class=\"p\">{</span>
        <span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip denied.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>
        <span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>
        <span class=\"k\">return</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
    <span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip accepted.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>

    <span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"n\">new_conn</span><span class=\"p\">(</span><span class=\"s\">&#39;localhost&#39;</span><span class=\"p\">,</span> <span class=\"mi\">55555</span><span class=\"p\">);</span>
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$remote</span><span class=\"p\">);</span>

    <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nv\">$remote</span><span class=\"p\">;</span>
    <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$remote</span><span class=\"p\">}</span> <span class=\"o\">=</span> <span class=\"nv\">$client</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">close_connection</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">};</span>
    
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"nv\">$remote</span><span class=\"p\">);</span>

    <span class=\"nb\">delete</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$client</span><span class=\"p\">};</span>
    <span class=\"nb\">delete</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$remote</span><span class=\"p\">};</span>

    <span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>
    <span class=\"nv\">$remote</span><span class=\"o\">-&gt;</span><span class=\"nb\">close</span><span class=\"p\">;</span>

    <span class=\"k\">print</span> <span class=\"s\">&quot;Connection from $client_ip closed.\\n&quot;</span> <span class=\"k\">if</span> <span class=\"nv\">$debug</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">client_ip</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">return</span> <span class=\"n\">inet_ntoa</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"o\">-&gt;</span><span class=\"n\">sockaddr</span><span class=\"p\">);</span>
<span class=\"p\">}</span>

<span class=\"k\">sub </span><span class=\"nf\">client_allowed</span> <span class=\"p\">{</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client</span> <span class=\"o\">=</span> <span class=\"nb\">shift</span><span class=\"p\">;</span>
    <span class=\"k\">my</span> <span class=\"nv\">$client_ip</span> <span class=\"o\">=</span> <span class=\"n\">client_ip</span><span class=\"p\">(</span><span class=\"nv\">$client</span><span class=\"p\">);</span>
    <span class=\"k\">return</span> <span class=\"nb\">grep</span> <span class=\"p\">{</span> <span class=\"nv\">$_</span> <span class=\"ow\">eq</span> <span class=\"nv\">$client_ip</span> <span class=\"p\">}</span> <span class=\"nv\">@allowed_ips</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"k\">print</span> <span class=\"s\">&quot;Starting a server on 0.0.0.0:1080\\n&quot;</span><span class=\"p\">;</span>
<span class=\"k\">my</span> <span class=\"nv\">$server</span> <span class=\"o\">=</span> <span class=\"n\">new_server</span><span class=\"p\">(</span><span class=\"s\">&#39;0.0.0.0&#39;</span><span class=\"p\">,</span> <span class=\"mi\">1080</span><span class=\"p\">);</span>
<span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"nv\">$server</span><span class=\"p\">);</span>

<span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">for</span> <span class=\"k\">my</span> <span class=\"nv\">$socket</span> <span class=\"p\">(</span><span class=\"nv\">$ioset</span><span class=\"o\">-&gt;</span><span class=\"n\">can_read</span><span class=\"p\">)</span> <span class=\"p\">{</span>
        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$socket</span> <span class=\"o\">==</span> <span class=\"nv\">$server</span><span class=\"p\">)</span> <span class=\"p\">{</span>
            <span class=\"n\">new_connection</span><span class=\"p\">(</span><span class=\"nv\">$server</span><span class=\"p\">);</span>
        <span class=\"p\">}</span>
        <span class=\"k\">else</span> <span class=\"p\">{</span>
            <span class=\"k\">next</span> <span class=\"k\">unless</span> <span class=\"nb\">exists</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$socket</span><span class=\"p\">};</span>
            <span class=\"k\">my</span> <span class=\"nv\">$remote</span> <span class=\"o\">=</span> <span class=\"nv\">$socket_map</span><span class=\"p\">{</span><span class=\"nv\">$socket</span><span class=\"p\">};</span>
            <span class=\"k\">my</span> <span class=\"nv\">$buffer</span><span class=\"p\">;</span>
            <span class=\"k\">my</span> <span class=\"nv\">$read</span> <span class=\"o\">=</span> <span class=\"nv\">$socket</span><span class=\"o\">-&gt;</span><span class=\"nb\">sysread</span><span class=\"p\">(</span><span class=\"nv\">$buffer</span><span class=\"p\">,</span> <span class=\"mi\">4096</span><span class=\"p\">);</span>
            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nv\">$read</span><span class=\"p\">)</span> <span class=\"p\">{</span>
                <span class=\"nv\">$remote</span><span class=\"o\">-&gt;</span><span class=\"nb\">syswrite</span><span class=\"p\">(</span><span class=\"nv\">$buffer</span><span class=\"p\">);</span>
            <span class=\"p\">}</span>
            <span class=\"k\">else</span> <span class=\"p\">{</span>
                <span class=\"n\">close_connection</span><span class=\"p\">(</span><span class=\"nv\">$socket</span><span class=\"p\">);</span>
            <span class=\"p\">}</span>
        <span class=\"p\">}</span>
    <span class=\"p\">}</span>
<span class=\"p\">}</span>
</pre>
</div>
<p>To use it, you'll have to make a change to the previous configuration. Instead of running ssh SOCKS5 proxy on <code>0.0.0.0:1080</code>, you'll need to run it on <code>localhost:55555</code>,</p>
<pre >ssh -f -N -D 55555 localhost</pre>
<p>After that, run the <code>tcp-proxy.pl</code>,</p>
<pre >perl tcp-proxy.pl &</pre>
<p>The TCP proxy will start listening on <code>0.0.0.0:1080</code> and will redirect only the allowed IPs in <code>@allowed_ips</code> list to <code>localhost:55555</code>.</p>
<p>Another possibility is to use another computer instead of your own as exit node. What I mean is you can do the following:</p>
<pre >ssh -f -N -D 1080 other_computer.com</pre>
<p>This will set up a SOCKS5 proxy on <code>localhost:1080</code> but when you use it, ssh will automatically tunnel your requests (encrypted) via <code>other_computer.com</code>. This way you can hide what you're doing on the Internet from anyone who might be sniffing your link. They will see that you're doing something but the traffic will be encrypted so they won't be able to tell what you're doing.</p>
<p>That's it. You're now the proxy king!</p>
<h2>Thanks To Vitalik</h2>
<p>Special thanks to Vitalik from \"<a href=\"http://www.itransition.com/\">Itransition company</a>\" for helpful tips!</p>
<div class=\"download\"><div class=\"download-title\"><p>Download tcp-proxy.pl</p>
</div>
<p>Download link: <a href=\"/download/tcp-proxy.pl\" title=\"Download &quot;tcp proxy (tcp-proxy.pl)&quot;\">tcp proxy (tcp-proxy.pl)</a><br>
Download URL: <code>http://www.catonmat.net/download/tcp-proxy.pl</code><br>
Downloaded: 753 times</p>
<p>I also pushed the tcp-proxy.pl to GitHub: <a href=\"http://github.com/pkrumins/perl-tcp-proxy\">tcp-proxy.pl on GitHub</a>. This project is also pretty nifty to generalize and make a program that redirects between any number of hosts:ports, not just two.</p>
</div>
<p>PS. I will probably also write \"<strong>A definitive guide to ssh port forwarding</strong>\" some time in the future because it's an interesting but little understood topic.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=4zYK7bywA9E:UGQY8vxqfK8:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=4zYK7bywA9E:UGQY8vxqfK8:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/4zYK7bywA9E\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/linux-socks5-proxy"))) ("A HTTP Proxy Server in 20 Lines of node.js Code" "<p><a href=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">);</span>
<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">])</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'response'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
</pre>
</div>
<p>This is just amazing. In 20 lines of <a href=\"http://nodejs.org/\">node.js</a> code and 10 minutes of time I was able to write a HTTP proxy. And it scales well, too. It's not a blocking HTTP proxy, it's event driven and asynchronous, meaning hundreds of people can use simultaneously and it will work well.</p>
<p>To get the proxy running all you have to do is download node.js, compile it, and run the proxy program via the <code>node</code> program:</p>
<pre >
$ ./configure --prefix=/home/pkrumins/installs/nodejs-0.1.92
$ make
$ make install
$ PATH=$PATH:/home/pkrumins/installs/nodejs-0.1.92/bin
$ node proxy.js
</pre>
<p>And from here you can take this proxy wherever your imagination takes. For example, you can start by adding logging:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'sys'</span><span class=\"p\">);</span>
<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">])</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'response'</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
</pre>
</div>
<p>Next, you can add a regex-based host blacklist in 15 additional lines:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'sys'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">'./blacklist'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
<span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">'./blacklist'</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'\\n'</span><span class=\"p\">)</span>
<span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
<span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>
<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Denied: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"k\">return</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">])</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'response'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary);</span>
<span class=\"s1\">  });</span>
<span class=\"s1\">  request.addListener('</span><span class=\"nx\">end</span><span class=\"err\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
</pre>
</div>
<p>Now to block proxy users from using Facebook, just echo <code>facebook.com</code> to <code>blacklist</code> file:</p>
<pre >
$ echo 'facebook.com' >> blacklist
</pre>
<p>The proxy server will automatically notice the changes to the file and update the blacklist.</p>
<p>Surely, a proxy server without IP control is no proxy server, so let's add that as well:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'sys'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"kd\">var</span> <span class=\"nx\">iplist</span>    <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">'./blacklist'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">'./iplist'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_iplist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
<span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">'./blacklist'</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'\\n'</span><span class=\"p\">)</span>
<span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
<span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>
<span class=\"kd\">function</span> <span class=\"nx\">update_iplist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating iplist.&quot;</span><span class=\"p\">);</span>
<span class=\"nx\">iplist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">'./iplist'</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'\\n'</span><span class=\"p\">)</span>
<span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">ip</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>
<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"kd\">var</span> <span class=\"nx\">allowed_ip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">iplist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iplist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">allowed_ip</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
<span class=\"k\">break</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">allowed_ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;IP &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; is not allowed&quot;</span><span class=\"p\">);</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"k\">return</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Denied: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"k\">return</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">])</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'response'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
<span class=\"nx\">update_iplist</span><span class=\"p\">();</span>
</pre>
</div>
<p>By default the proxy server will not allow any connections, so add all the IPs you want the proxy to be accessible from to <code>iplist</code> file:</p>
<pre >
$ echo '1.2.3.4' >> iplist
</pre>
<p>Finally, let's refactor the code a little:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'http'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'sys'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">'fs'</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"kd\">var</span> <span class=\"nx\">iplist</span>    <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">'./blacklist'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">'./iplist'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_iplist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
<span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">'./blacklist'</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'\\n'</span><span class=\"p\">)</span>
<span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
<span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>
<span class=\"kd\">function</span> <span class=\"nx\">update_iplist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating iplist.&quot;</span><span class=\"p\">);</span>
<span class=\"nx\">iplist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">'./iplist'</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">'\\n'</span><span class=\"p\">)</span>
<span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>
<span class=\"kd\">function</span> <span class=\"nx\">ip_allowed</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">iplist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iplist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
<span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"kd\">function</span> <span class=\"nx\">host_allowed</span><span class=\"p\">(</span><span class=\"nx\">host</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">host</span><span class=\"p\">))</span> <span class=\"p\">{</span>
<span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"p\">}</span>
<span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"kd\">function</span> <span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">401</span><span class=\"p\">);</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">}</span>
<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"kd\">var</span> <span class=\"nx\">ip</span> <span class=\"o\">=</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">;</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">ip_allowed</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">))</span> <span class=\"p\">{</span>
<span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;IP &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; is not allowed to use this proxy&quot;</span><span class=\"p\">;</span>
<span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
<span class=\"k\">return</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">host_allowed</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
<span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Host &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; has been denied by proxy configuration&quot;</span><span class=\"p\">;</span>
<span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
<span class=\"k\">return</span><span class=\"p\">;</span>
<span class=\"p\">}</span>
<span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">'host'</span><span class=\"p\">])</span>
<span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'response'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary'</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'end'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
<span class=\"p\">});</span>
<span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">'binary);</span>
<span class=\"s1\">  });</span>
<span class=\"s1\">  request.addListener('</span><span class=\"nx\">end</span><span class=\"err\">'</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
<span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
<span class=\"nx\">update_iplist</span><span class=\"p\">();</span>
</pre>
</div>
<p>Again, it's amazing how fast you can write server software in node.js and JavaScript. It would have probably taken me a day to write the same in C. I love how fast you can prototype the software nowadays.</p>
<div class=\"download\"><div class=\"download-title\"><p>Download proxy.js</p>
</div>
<p>Download link: <a href=\"/download/proxy.js\" title=\"Download &quot;proxy server written in node.js&quot;\">proxy server written in node.js</a><br>
Download URL: <code>http://www.catonmat.net/download/proxy.js</code><br>
Downloaded: 1310 times</p>
<p>I am gonna build this proxy up, so I also put it on GitHub: <a href=\"http://github.com/pkrumins/nodejs-proxy\">proxy.js on GitHub</a></p>
</div>
<p>Happy proxying!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/kn7okZClh-E\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/kn7okZClh-E/http-proxy-in-nodejs" (19495 33411) old 11 nil nil ((title ((type . "text")) "A HTTP Proxy Server in 20 Lines of node.js Code") (id nil "215") (updated nil "2010-06-27T16:55:31Z") (published nil "2010-04-28T11:10:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/kn7okZClh-E/http-proxy-in-nodejs"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/GYJqNwAzhL5AkuAEV8HVo3jCNAU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
</pre>
</div>
<p>This is just amazing. In 20 lines of <a href=\"http://nodejs.org/\">node.js</a> code and 10 minutes of time I was able to write a HTTP proxy. And it scales well, too. It's not a blocking HTTP proxy, it's event driven and asynchronous, meaning hundreds of people can use simultaneously and it will work well.</p>
<p>To get the proxy running all you have to do is download node.js, compile it, and run the proxy program via the <code>node</code> program:</p>
<pre >
$ ./configure --prefix=/home/pkrumins/installs/nodejs-0.1.92
$ make
$ make install

$ PATH=$PATH:/home/pkrumins/installs/nodejs-0.1.92/bin

$ node proxy.js
</pre>
<p>And from here you can take this proxy wherever your imagination takes. For example, you can start by adding logging:</p>
<div class=\"highlight\"><pre ><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>
</pre>
</div>
<p>Next, you can add a regex-based host blacklist in 15 additional lines:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>

<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
              <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
              <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
      <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Denied: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
      <span class=\"k\">return</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>

  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary);</span>
<span class=\"s1\">  });</span>
<span class=\"s1\">  request.addListener(&#39;</span><span class=\"nx\">end</span><span class=\"err\">&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>

<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
</pre>
</div>
<p>Now to block proxy users from using Facebook, just echo <code>facebook.com</code> to <code>blacklist</code> file:</p>
<pre >
$ echo 'facebook.com' >> blacklist
</pre>
<p>The proxy server will automatically notice the changes to the file and update the blacklist.</p>
<p>Surely, a proxy server without IP control is no proxy server, so let's add that as well:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"kd\">var</span> <span class=\"nx\">iplist</span>    <span class=\"o\">=</span> <span class=\"p\">[];</span>

<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_iplist</span><span class=\"p\">();</span> <span class=\"p\">});</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
              <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
              <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_iplist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating iplist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">iplist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
           <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">ip</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"kd\">var</span> <span class=\"nx\">allowed_ip</span> <span class=\"o\">=</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">iplist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iplist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">allowed_ip</span> <span class=\"o\">=</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
      <span class=\"k\">break</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>

  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">allowed_ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;IP &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; is not allowed&quot;</span><span class=\"p\">);</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"k\">return</span><span class=\"p\">;</span>
  <span class=\"p\">}</span>

  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
      <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Denied: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
      <span class=\"k\">return</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>

  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>

<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
<span class=\"nx\">update_iplist</span><span class=\"p\">();</span>
</pre>
</div>
<p>By default the proxy server will not allow any connections, so add all the IPs you want the proxy to be accessible from to <code>iplist</code> file:</p>
<pre >
$ echo '1.2.3.4' >> iplist
</pre>
<p>Finally, let's refactor the code a little:</p>
<div class=\"highlight\"><pre class=\"lotsofcode\"><span class=\"kd\">var</span> <span class=\"nx\">http</span> <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;http&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">sys</span>  <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;sys&#39;</span><span class=\"p\">);</span>
<span class=\"kd\">var</span> <span class=\"nx\">fs</span>   <span class=\"o\">=</span> <span class=\"nx\">require</span><span class=\"p\">(</span><span class=\"s1\">&#39;fs&#39;</span><span class=\"p\">);</span>

<span class=\"kd\">var</span> <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"p\">[];</span>
<span class=\"kd\">var</span> <span class=\"nx\">iplist</span>    <span class=\"o\">=</span> <span class=\"p\">[];</span>

<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">();</span> <span class=\"p\">});</span>
<span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">watchFile</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">c</span><span class=\"p\">,</span><span class=\"nx\">p</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"nx\">update_iplist</span><span class=\"p\">();</span> <span class=\"p\">});</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_blacklist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating blacklist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">blacklist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./blacklist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
              <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">})</span>
              <span class=\"p\">.</span><span class=\"nx\">map</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nb\">RegExp</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">update_iplist</span><span class=\"p\">()</span> <span class=\"p\">{</span>
  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating iplist.&quot;</span><span class=\"p\">);</span>
  <span class=\"nx\">iplist</span> <span class=\"o\">=</span> <span class=\"nx\">fs</span><span class=\"p\">.</span><span class=\"nx\">readFileSync</span><span class=\"p\">(</span><span class=\"s1\">&#39;./iplist&#39;</span><span class=\"p\">).</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;\\n&#39;</span><span class=\"p\">)</span>
           <span class=\"p\">.</span><span class=\"nx\">filter</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">rx</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"k\">return</span> <span class=\"nx\">rx</span><span class=\"p\">.</span><span class=\"nx\">length</span> <span class=\"p\">});</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">ip_allowed</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">iplist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">iplist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nx\">ip</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>
  <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">host_allowed</span><span class=\"p\">(</span><span class=\"nx\">host</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"nx\">i</span> <span class=\"k\">in</span> <span class=\"nx\">blacklist</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nx\">blacklist</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">test</span><span class=\"p\">(</span><span class=\"nx\">host</span><span class=\"p\">))</span> <span class=\"p\">{</span>
      <span class=\"k\">return</span> <span class=\"kc\">false</span><span class=\"p\">;</span>
    <span class=\"p\">}</span>
  <span class=\"p\">}</span>
  <span class=\"k\">return</span> <span class=\"kc\">true</span><span class=\"p\">;</span>
<span class=\"p\">}</span>

<span class=\"kd\">function</span> <span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"mi\">401</span><span class=\"p\">);</span>
  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
  <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
<span class=\"p\">}</span>

<span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createServer</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">,</span> <span class=\"nx\">response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
  <span class=\"kd\">var</span> <span class=\"nx\">ip</span> <span class=\"o\">=</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">connection</span><span class=\"p\">.</span><span class=\"nx\">remoteAddress</span><span class=\"p\">;</span>
  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">ip_allowed</span><span class=\"p\">(</span><span class=\"nx\">ip</span><span class=\"p\">))</span> <span class=\"p\">{</span>
    <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;IP &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; is not allowed to use this proxy&quot;</span><span class=\"p\">;</span>
    <span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"k\">return</span><span class=\"p\">;</span>
  <span class=\"p\">}</span>

  <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"nx\">host_allowed</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">))</span> <span class=\"p\">{</span>
    <span class=\"nx\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Host &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; has been denied by proxy configuration&quot;</span><span class=\"p\">;</span>
    <span class=\"nx\">deny</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">,</span> <span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">msg</span><span class=\"p\">);</span>
    <span class=\"k\">return</span><span class=\"p\">;</span>
  <span class=\"p\">}</span>

  <span class=\"nx\">sys</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">ip</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span> <span class=\"o\">+</span> <span class=\"s2\">&quot; &quot;</span> <span class=\"o\">+</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">);</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy</span> <span class=\"o\">=</span> <span class=\"nx\">http</span><span class=\"p\">.</span><span class=\"nx\">createClient</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">[</span><span class=\"s1\">&#39;host&#39;</span><span class=\"p\">])</span>
  <span class=\"kd\">var</span> <span class=\"nx\">proxy_request</span> <span class=\"o\">=</span> <span class=\"nx\">proxy</span><span class=\"p\">.</span><span class=\"nx\">request</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">method</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">url</span><span class=\"p\">,</span> <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;response&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary&#39;</span><span class=\"p\">);</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;end&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
      <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
    <span class=\"p\">});</span>
    <span class=\"nx\">response</span><span class=\"p\">.</span><span class=\"nx\">writeHead</span><span class=\"p\">(</span><span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">statusCode</span><span class=\"p\">,</span> <span class=\"nx\">proxy_response</span><span class=\"p\">.</span><span class=\"nx\">headers</span><span class=\"p\">);</span>
  <span class=\"p\">});</span>
  <span class=\"nx\">request</span><span class=\"p\">.</span><span class=\"nx\">addListener</span><span class=\"p\">(</span><span class=\"s1\">&#39;data&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">)</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">write</span><span class=\"p\">(</span><span class=\"nx\">chunk</span><span class=\"p\">,</span> <span class=\"s1\">&#39;binary);</span>
<span class=\"s1\">  });</span>
<span class=\"s1\">  request.addListener(&#39;</span><span class=\"nx\">end</span><span class=\"err\">&#39;</span><span class=\"p\">,</span> <span class=\"kd\">function</span><span class=\"p\">()</span> <span class=\"p\">{</span>
    <span class=\"nx\">proxy_request</span><span class=\"p\">.</span><span class=\"nx\">end</span><span class=\"p\">();</span>
  <span class=\"p\">});</span>
<span class=\"p\">}).</span><span class=\"nx\">listen</span><span class=\"p\">(</span><span class=\"mi\">8080</span><span class=\"p\">);</span>

<span class=\"nx\">update_blacklist</span><span class=\"p\">();</span>
<span class=\"nx\">update_iplist</span><span class=\"p\">();</span>
</pre>
</div>
<p>Again, it's amazing how fast you can write server software in node.js and JavaScript. It would have probably taken me a day to write the same in C. I love how fast you can prototype the software nowadays.</p>
<div class=\"download\"><div class=\"download-title\"><p>Download proxy.js</p>
</div>
<p>Download link: <a href=\"/download/proxy.js\" title=\"Download &quot;proxy server written in node.js&quot;\">proxy server written in node.js</a><br>
Download URL: <code>http://www.catonmat.net/download/proxy.js</code><br>
Downloaded: 1310 times</p>
<p>I am gonna build this proxy up, so I also put it on GitHub: <a href=\"http://github.com/pkrumins/nodejs-proxy\">proxy.js on GitHub</a></p>
</div>
<p>Happy proxying!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=kn7okZClh-E:wpfRZzFuuKk:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=kn7okZClh-E:wpfRZzFuuKk:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/kn7okZClh-E\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/http-proxy-in-nodejs"))) ("Another Ten One-Liners from CommandLineFu Explained" "<p><a href=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Another week and another top ten one-liners from <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> explained.</p>
<p>This is the third post in the series already, covering one-liners 21-30. See the previous two posts for the introduction of the series and one-liners 1-20:</p>
<ul><li><a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained\">Part I: Top Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained\">Part II: The Next Ten One-Liners from CommandLineFu Explained</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/oneliners21_30.html\">Russian translation now available.</a></p>
<h2>#21. Display currently mounted file systems nicely</h2>
<pre >
$ mount | column -t
</pre>
<p>The file systems are not that important here. The <code>column -t</code> command is what is important. It takes the input and formats it into multiple columns so that all columns were aligned vertically.</p>
<p>Here is how the mounted filesystem list looks without <code>column -t</code> command:</p>
<pre >
$ mount
/dev/root on / type ext3 (rw)
/proc on /proc type proc (rw)
/dev/mapper/lvmraid-home on /home type ext3 (rw,noatime)
</pre>
<p>And now with <code>column -t</code> command:</p>
<pre >
$ mount | column -t
/dev/root                 on  /      type  ext3   (rw)
/proc                     on  /proc  type  proc   (rw)
/dev/mapper/lvmraid-home  on  /home  type  ext3   (rw,noatime)
</pre>
<p>You can improve this one-liner now by also adding column titles:</p>
<pre >
$ (echo \"DEVICE - PATH - TYPE FLAGS\" && mount) | column -t
DEVICE                    -   PATH   -     TYPE   FLAGS
/dev/root                 on  /      type  ext3   (rw)
/proc                     on  /proc  type  proc   (rw)
/dev/mapper/lvmraid-home  on  /home  type  ext3   (rw,noatime)
</pre>
<p>Columns 2 and 4 are not really necessary. We can use <code>awk</code> text processing utility to get rid of them:</p>
<pre >
$ (echo \"DEVICE PATH TYPE FLAGS\" && mount | awk '$2=$4=\"\";1') | column -t
DEVICE                    PATH   TYPE   FLAGS
/dev/root                 /      ext3   (rw)
/proc                     /proc  proc   (rw)
/dev/mapper/lvmraid-home  /home  ext3   (rw,noatime)
</pre>
<p>Finally, we can make it an alias so that we always enjoyed the nice output from mount. Let's call this alias <code>nicemount</code>:</p>
<pre >
$ nicemount() { (echo \"DEVICE PATH TYPE FLAGS\" && mount | awk '$2=$4=\"\";1') | column -t; }
</pre>
<p>Let's try it out:</p>
<pre >
$ nicemount
DEVICE                    PATH   TYPE   FLAGS
/dev/root                 /      ext3   (rw)
/proc                     /proc  proc   (rw)
/dev/mapper/lvmraid-home  /home  ext3   (rw,noatime)
</pre>
<p>It works!</p>
<h2>#22. Run the previous shell command but replace every \"foo\" with \"bar\"</h2>
<pre >$ !!:gs/foo/bar</pre>
<p>I explained this type of one-liners in <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained\">one-liner #5 already</a>. Please take a look for a longer discussion.</p>
<p>To summarize, what happens here is that the <code>!!</code> recalls the previous executed shell command and <code>:gs/foo/bar</code> substitutes (the <code>:s</code> flag) all (the <code>g</code> flag) occurrences of <code>foo</code> with <code>bar</code>. The <code>!!</code> construct is called an event designator.</p>
<h2>#23. Top for files</h2>
<pre >$ watch -d -n 1 'df; ls -FlAt /path'</pre>
<p>This one-liner watches for file changes in directory <code>/path</code>. It uses the <code>watch</code> command that executes the given command periodically. The <code>-d</code> flag tells <code>watch</code> to display differences between the command calls (so you saw what files get added or removed in <code>/path</code>). The <code>-n 1</code> flag tells it to execute the command every second.</p>
<p>The command to execute is <code>df; ls -FlAt /path</code> that is actually two commands, executed one after other. First, <code>df</code> outputs the filesystem disk space usage, and then <code>ls -FlAt</code> lists the files in <code>/path</code>. The <code>-F</code> argument to <code>ls</code> tells it to classify files, appending <code>*/=>@|</code> to the filenames to indicate whether they are executables <code>*</code>, directories <code>/</code>, sockets <code>=</code>, doors <code>></code>, symlinks <code>@</code>, or named pipes <code>|</code>. The <code>-l</code> argument lists all files, <code>-A</code> hides <code>.</code> and <code>..</code>, and <code>-t</code> sorts the files by time.</p>
<p>Special note about doors - they are Solaris thing that act like pipes, except they launch the program that is supposed to be the receiving party. A plain pipe would block until the other party opens it, but a door launches the other party itself.</p>
<p>Actually the output is nicer if you specify <code>-h</code> argument to <code>df</code> so it was human readable. You can also join the arguments to <code>watch</code> together, making them <code>-dn1</code>. Here is the final version:</p>
<pre >
$ watch -dn1 'df -h; ls -FlAt /path'
</pre>
<p>Another note - <code>-d</code> in BSD is <code>--differences</code></p>
<h2>#24. Mount a remote folder through SSH</h2>
<pre >$ sshfs name@server:/path/to/folder /path/to/mount/point</pre>
<p>That's right, you can mount a remote directory locally via SSH! You'll first need to install two programs however:</p>
<ul>  <li><a href=\"http://fuse.sourceforge.net/\">FUSE</a> that allows to implement filesystems in userspace programs, and</li>
<li><a href=\"http://fuse.sourceforge.net/sshfs.html\">sshfs</a> client that uses FUSE and <code>sftp</code> (secure ftp - comes with OpenSSH, and is on your system already) to access the remote host.</li>
</ul>
<p>And that's it, now you can use <code>sshfs</code> to mount remote directories via SSH.</p>
<p>To unmount, use <code>fusermount</code>:</p>
<pre >fusermount -u /path/to/mount/point</pre>
<h2>#25. Read Wikipedia via DNS</h2>
<pre >$ dig +short txt &lt;keyword>.wp.dg.cx</pre>
<p>This is probably the most interesting one-liner today. <a href=\"https://dgl.cx/\">David Leadbeater</a> created a <a href=\"https://dgl.cx/wikipedia-dns\">DNS server</a>, which when queried the TXT record type, returns a short plain-text version of a Wikipedia article. Here is his <a href=\"http://dgl.cx/2008/11/wpdns-pres/\">presentation</a> on he did it.</p>
<p>Here is an example, let's find out what \"hacker\" means:</p>
<pre >
$ dig +short txt hacker.wp.dg.cx
\"Hacker may refer to: Hacker (computer security), someone involved
in computer security/insecurity, Hacker (programmer subculture), a
programmer subculture originating in the US academia in the 1960s,
which is nowadays mainly notable for the free software/\" \"open
source movement, Hacker (hobbyist), an enthusiastic home computer
hobbyist http://a.vu/w:Hacker\"
</pre>
<p>The one-liner uses <code>dig</code>, the standard sysadmin's utility for DNS troubleshooting to do the DNS query. The <code>+short</code> option makes it output only the returned text response, and <code>txt</code> makes it query the TXT record type.</p>
<p>This one-liner is actually alias worthy, so let's make an alias:</p>
<pre >wiki() { dig +short txt $1.wp.dg.cx; }</pre>
<p>Try it out:</p>
<pre >
$ wiki hacker
\"Hacker may refer to: Hacker (computer security), ...\"
</pre>
<p>It works!</p>
<p>If you don't have <code>dig</code>, you may also use <code>host</code> that also performs DNS lookups:</p>
<pre >host -t txt hacker.wp.dg.cx</pre>
<h2>#26. Download a website recursively with wget</h2>
<pre >$ wget --random-wait -r -p -e robots=off -U Mozilla www.example.com</pre>
<p>This one-liner does what it says. Here is the explanation of the arguments:</p>
<ul> <li><code>--random-wait</code> - wait between 0.5 to 1.5 seconds between requests.</li>
<li><code>-r</code> - turn on recursive retrieving.</li>
<li><code>-e robots=off</code> - ignore robots.txt.</li>
<li><code>-U Mozilla</code> - set the \"User-Agent\" header to \"Mozilla\". Though a better choice is a real User-Agent like \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729)\".</li>
</ul>
<p>Some other useful options are:</p>
<ul> <li><code>--limit-rate=20k</code> - limits download speed to 20kbps.</li>
<li><code>-o logfile.txt</code> - log the downloads.</li>
<li><code>-l 0</code> - remove recursion depth (which is 5 by default).</li>
<li><code>--wait=1h</code> - be sneaky, download one file every hour.</li>
</ul>
<h2>#27. Copy the arguments of the most recent command</h2>
<pre >ALT + . (or ESC + .)</pre>
<p>This keyboard shortcut works in shell's <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">emacs editing mode</a> only, it copies the last argument form the last command to the current command. Here is an example:</p>
<pre >
$ echo a b c
a b c
$ echo &lt;Press ALT + .>
$ echo c
</pre>
<p>If you repeat the command, it copies the last argument from the command before the last, then if you repeat again, it copies the last argument from command before the command before the last, etc.</p>
<p>Here is an example:</p>
<pre >
$ echo 1 2 3
1 2 3
$ echo a b c
a b c
$ echo &lt;Press ALT + .>
$ echo c
$ echo &lt;Press ALT + .> again
$ echo 3
</pre>
<p>However, if you wish to get 1st or 2nd or n-th argument, use the digit-argument command <code>ALT + 1 (or ESC + 1)</code> or <code>ALT + 2 (or ESC +2)</code>, etc. Here is an example:</p>
<pre >
$ echo a b c
a b c
$ echo &lt;Press ALT + 1> &lt;Press ALT + .>
$ echo a
a
$ echo &lt;Press ALT + 2> &lt;Press ALT + .>
$ echo b
b
</pre>
<p>See my article on <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">Emacs Editing Mode Keyboard Shortcuts</a> for a tutorial and a cheat sheet of all the shortcuts.</p>
<h2>#28. Execute a command without saving it in the history</h2>
<pre >$ &lt;space>command</pre>
<p>This one-liner works at least on bash, I haven't tested other shells.</p>
<p>If you start your command by a space, it won't be saved to bash history (~/.bash_history file). This behavior is controlled by <code>$HISTIGNORE</code> shell variable. Mine is set to <code>HISTIGNORE=\"&:[ ]*\"</code>, which means don't save repeated commands to history, and don't save commands that start with a space to history. The values in <code>$HISTIGNORE</code> are colon-separated.</p>
<p>If you're interested, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>\" for a short tutorial on how to work with shell history and a summary cheat sheet.</p>
<h2>#29. Show the size of all sub folders in the current directory</h2>
<pre >$ du -h --max-depth=1</pre>
<p>The <code>--max-depth=1</code> causes <code>du</code> to summarize disk usage statistics for directories that are depth 1 from the current directory, that is, all directories in the current directory. The <code>-h</code> argument makes the summary human-readable, that is, displays 5MB instead of 5242880 (bytes).</p>
<p>If you are interested in both sub folder size and file size in the current directory, you can use the shorter:</p>
<pre >$ du -sh *</pre>
<h2>#30. Display the top ten running processes sorted by memory usage</h2>
<pre >$ ps aux | sort -nk +4 | tail</pre>
<p>This is certainly not the best way to display the top ten processes that consume the most memory, but, hey, it works.</p>
<p>It takes the output of <code>ps aux</code>, <code>sort</code>s it by 4th column numerically and then uses <code>tail</code> to output the last then lines which happen to be the processes with the biggest memory consumption.</p>
<p>If I was to find out who consumes the most memory, I'd simply use <code>htop</code> or <code>top</code> and not <code>ps</code>.</p>
<h2>Bonus one-liner: Start an SMTP server</h2>
<pre >python -m smtpd -n -c DebuggingServer localhost:1025</pre>
<p>This one-liner starts an SMTP server on port 1025. It uses Python's standard library <code>smtpd</code> (specified by <code>-m smtpd</code>) and passes it three arguments - <code>-n</code>, <code>-c DebuggingServer</code> and <code>localhost:1025</code>.</p>
<p>The <code>-n</code> argument tells Python not to setuid (change user) to \"nobody\" - it makes the code run under your user.</p>
<p>The <code>-c DebuggingServer</code> argument tells Python to use <code>DebuggingServer</code> class as the SMTP implementation that prints each message it receives to stdout.</p>
<p>The <code>localhost:1025</code> argument tells Python to start the SMTP server on locahost, port 1025.</p>
<p>However, if you wish to start it on the standard port 25, you'll have to use <code>sudo</code> command, because only root is allowed to start services on ports 1-1024. These are also known as privileged ports.</p>
<pre >sudo python -m smtpd -n -c DebuggingServer localhost:25</pre>
<p>This one-liner was coined by <a href=\"http://evanculver.com/2010/03/18/handy-one-liners/\">Evan Culver</a>. Thanks to him!</p>
<h2>That's it for today,</h2>
<p>but be sure to come back the next time for \"Yet Another Ten One-Liners from CommandLineFu Explained!\"</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/u10fej7POxc\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/u10fej7POxc/another-ten-one-liners-from-commandlinefu-explained" (19418 50426) old 12 nil nil ((title ((type . "text")) "Another Ten One-Liners from CommandLineFu Explained") (id nil "212") (updated nil "2010-04-30T11:54:34Z") (published nil "2010-04-20T21:05:00Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/u10fej7POxc/another-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/L430a-kPQU0Wd6taq1UMysJiMVk/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Another week and another top ten one-liners from <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> explained.</p>
<p>This is the third post in the series already, covering one-liners 21-30. See the previous two posts for the introduction of the series and one-liners 1-20:</p>
<ul><li><a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained\">Part I: Top Ten One-Liners from CommandLineFu Explained</a></li>
<li><a href=\"http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained\">Part II: The Next Ten One-Liners from CommandLineFu Explained</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/oneliners21_30.html\">Russian translation now available.</a></p>
<h2>#21. Display currently mounted file systems nicely</h2>
<pre >
$ mount | column -t
</pre>
<p>The file systems are not that important here. The <code>column -t</code> command is what is important. It takes the input and formats it into multiple columns so that all columns were aligned vertically.</p>
<p>Here is how the mounted filesystem list looks without <code>column -t</code> command:</p>
<pre >
$ mount

/dev/root on / type ext3 (rw)
/proc on /proc type proc (rw)
/dev/mapper/lvmraid-home on /home type ext3 (rw,noatime)
</pre>
<p>And now with <code>column -t</code> command:</p>
<pre >
$ mount | column -t

/dev/root                 on  /      type  ext3   (rw)
/proc                     on  /proc  type  proc   (rw)
/dev/mapper/lvmraid-home  on  /home  type  ext3   (rw,noatime)
</pre>
<p>You can improve this one-liner now by also adding column titles:</p>
<pre >
$ (echo \"DEVICE - PATH - TYPE FLAGS\" && mount) | column -t

DEVICE                    -   PATH   -     TYPE   FLAGS
/dev/root                 on  /      type  ext3   (rw)
/proc                     on  /proc  type  proc   (rw)
/dev/mapper/lvmraid-home  on  /home  type  ext3   (rw,noatime)
</pre>
<p>Columns 2 and 4 are not really necessary. We can use <code>awk</code> text processing utility to get rid of them:</p>
<pre >
$ (echo \"DEVICE PATH TYPE FLAGS\" && mount | awk '$2=$4=\"\";1') | column -t

DEVICE                    PATH   TYPE   FLAGS
/dev/root                 /      ext3   (rw)
/proc                     /proc  proc   (rw)
/dev/mapper/lvmraid-home  /home  ext3   (rw,noatime)
</pre>
<p>Finally, we can make it an alias so that we always enjoyed the nice output from mount. Let's call this alias <code>nicemount</code>:</p>
<pre >
$ nicemount() { (echo \"DEVICE PATH TYPE FLAGS\" && mount | awk '$2=$4=\"\";1') | column -t; }
</pre>
<p>Let's try it out:</p>
<pre >
$ nicemount

DEVICE                    PATH   TYPE   FLAGS
/dev/root                 /      ext3   (rw)
/proc                     /proc  proc   (rw)
/dev/mapper/lvmraid-home  /home  ext3   (rw,noatime)
</pre>
<p>It works!</p>
<h2>#22. Run the previous shell command but replace every \"foo\" with \"bar\"</h2>
<pre >$ !!:gs/foo/bar</pre>
<p>I explained this type of one-liners in <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained\">one-liner #5 already</a>. Please take a look for a longer discussion.</p>
<p>To summarize, what happens here is that the <code>!!</code> recalls the previous executed shell command and <code>:gs/foo/bar</code> substitutes (the <code>:s</code> flag) all (the <code>g</code> flag) occurrences of <code>foo</code> with <code>bar</code>. The <code>!!</code> construct is called an event designator.</p>
<h2>#23. Top for files</h2>
<pre >$ watch -d -n 1 'df; ls -FlAt /path'</pre>
<p>This one-liner watches for file changes in directory <code>/path</code>. It uses the <code>watch</code> command that executes the given command periodically. The <code>-d</code> flag tells <code>watch</code> to display differences between the command calls (so you saw what files get added or removed in <code>/path</code>). The <code>-n 1</code> flag tells it to execute the command every second.</p>
<p>The command to execute is <code>df; ls -FlAt /path</code> that is actually two commands, executed one after other. First, <code>df</code> outputs the filesystem disk space usage, and then <code>ls -FlAt</code> lists the files in <code>/path</code>. The <code>-F</code> argument to <code>ls</code> tells it to classify files, appending <code>*/=>@|</code> to the filenames to indicate whether they are executables <code>*</code>, directories <code>/</code>, sockets <code>=</code>, doors <code>></code>, symlinks <code>@</code>, or named pipes <code>|</code>. The <code>-l</code> argument lists all files, <code>-A</code> hides <code>.</code> and <code>..</code>, and <code>-t</code> sorts the files by time.</p>
<p>Special note about doors - they are Solaris thing that act like pipes, except they launch the program that is supposed to be the receiving party. A plain pipe would block until the other party opens it, but a door launches the other party itself.</p>
<p>Actually the output is nicer if you specify <code>-h</code> argument to <code>df</code> so it was human readable. You can also join the arguments to <code>watch</code> together, making them <code>-dn1</code>. Here is the final version:</p>
<pre >
$ watch -dn1 'df -h; ls -FlAt /path'
</pre>
<p>Another note - <code>-d</code> in BSD is <code>--differences</code></p>
<h2>#24. Mount a remote folder through SSH</h2>
<pre >$ sshfs name@server:/path/to/folder /path/to/mount/point</pre>
<p>That's right, you can mount a remote directory locally via SSH! You'll first need to install two programs however:</p>
<ul>  <li><a href=\"http://fuse.sourceforge.net/\">FUSE</a> that allows to implement filesystems in userspace programs, and</li>
  <li><a href=\"http://fuse.sourceforge.net/sshfs.html\">sshfs</a> client that uses FUSE and <code>sftp</code> (secure ftp - comes with OpenSSH, and is on your system already) to access the remote host.</li>
</ul>
<p>And that's it, now you can use <code>sshfs</code> to mount remote directories via SSH.</p>
<p>To unmount, use <code>fusermount</code>:</p>
<pre >fusermount -u /path/to/mount/point</pre>
<h2>#25. Read Wikipedia via DNS</h2>
<pre >$ dig +short txt &lt;keyword>.wp.dg.cx</pre>
<p>This is probably the most interesting one-liner today. <a href=\"https://dgl.cx/\">David Leadbeater</a> created a <a href=\"https://dgl.cx/wikipedia-dns\">DNS server</a>, which when queried the TXT record type, returns a short plain-text version of a Wikipedia article. Here is his <a href=\"http://dgl.cx/2008/11/wpdns-pres/\">presentation</a> on he did it.</p>
<p>Here is an example, let's find out what \"hacker\" means:</p>
<pre >
$ dig +short txt hacker.wp.dg.cx

\"Hacker may refer to: Hacker (computer security), someone involved
in computer security/insecurity, Hacker (programmer subculture), a
programmer subculture originating in the US academia in the 1960s,
which is nowadays mainly notable for the free software/\" \"open
source movement, Hacker (hobbyist), an enthusiastic home computer
hobbyist http://a.vu/w:Hacker\"
</pre>
<p>The one-liner uses <code>dig</code>, the standard sysadmin's utility for DNS troubleshooting to do the DNS query. The <code>+short</code> option makes it output only the returned text response, and <code>txt</code> makes it query the TXT record type.</p>
<p>This one-liner is actually alias worthy, so let's make an alias:</p>
<pre >wiki() { dig +short txt $1.wp.dg.cx; }</pre>
<p>Try it out:</p>
<pre >
$ wiki hacker

\"Hacker may refer to: Hacker (computer security), ...\"
</pre>
<p>It works!</p>
<p>If you don't have <code>dig</code>, you may also use <code>host</code> that also performs DNS lookups:</p>
<pre >host -t txt hacker.wp.dg.cx</pre>
<h2>#26. Download a website recursively with wget</h2>
<pre >$ wget --random-wait -r -p -e robots=off -U Mozilla www.example.com</pre>
<p>This one-liner does what it says. Here is the explanation of the arguments:</p>
<ul> <li><code>--random-wait</code> - wait between 0.5 to 1.5 seconds between requests.</li>
 <li><code>-r</code> - turn on recursive retrieving.</li>
 <li><code>-e robots=off</code> - ignore robots.txt.</li>
 <li><code>-U Mozilla</code> - set the \"User-Agent\" header to \"Mozilla\". Though a better choice is a real User-Agent like \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729)\".</li>
</ul>
<p>Some other useful options are:</p>
<ul> <li><code>--limit-rate=20k</code> - limits download speed to 20kbps.</li>
 <li><code>-o logfile.txt</code> - log the downloads.</li>
 <li><code>-l 0</code> - remove recursion depth (which is 5 by default).</li>
 <li><code>--wait=1h</code> - be sneaky, download one file every hour.</li>
</ul>
<h2>#27. Copy the arguments of the most recent command</h2>
<pre >ALT + . (or ESC + .)</pre>
<p>This keyboard shortcut works in shell's <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">emacs editing mode</a> only, it copies the last argument form the last command to the current command. Here is an example:</p>
<pre >
$ echo a b c
a b c

$ echo &lt;Press ALT + .>
$ echo c
</pre>
<p>If you repeat the command, it copies the last argument from the command before the last, then if you repeat again, it copies the last argument from command before the command before the last, etc.</p>
<p>Here is an example:</p>
<pre >
$ echo 1 2 3
1 2 3
$ echo a b c
a b c

$ echo &lt;Press ALT + .>
$ echo c

$ echo &lt;Press ALT + .> again
$ echo 3
</pre>
<p>However, if you wish to get 1st or 2nd or n-th argument, use the digit-argument command <code>ALT + 1 (or ESC + 1)</code> or <code>ALT + 2 (or ESC +2)</code>, etc. Here is an example:</p>
<pre >
$ echo a b c
a b c

$ echo &lt;Press ALT + 1> &lt;Press ALT + .>
$ echo a
a

$ echo &lt;Press ALT + 2> &lt;Press ALT + .>
$ echo b
b
</pre>
<p>See my article on <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">Emacs Editing Mode Keyboard Shortcuts</a> for a tutorial and a cheat sheet of all the shortcuts.</p>
<h2>#28. Execute a command without saving it in the history</h2>
<pre >$ &lt;space>command</pre>
<p>This one-liner works at least on bash, I haven't tested other shells.</p>
<p>If you start your command by a space, it won't be saved to bash history (~/.bash_history file). This behavior is controlled by <code>$HISTIGNORE</code> shell variable. Mine is set to <code>HISTIGNORE=\"&:[ ]*\"</code>, which means don't save repeated commands to history, and don't save commands that start with a space to history. The values in <code>$HISTIGNORE</code> are colon-separated.</p>
<p>If you're interested, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>\" for a short tutorial on how to work with shell history and a summary cheat sheet.</p>
<h2>#29. Show the size of all sub folders in the current directory</h2>
<pre >$ du -h --max-depth=1</pre>
<p>The <code>--max-depth=1</code> causes <code>du</code> to summarize disk usage statistics for directories that are depth 1 from the current directory, that is, all directories in the current directory. The <code>-h</code> argument makes the summary human-readable, that is, displays 5MB instead of 5242880 (bytes).</p>
<p>If you are interested in both sub folder size and file size in the current directory, you can use the shorter:</p>
<pre >$ du -sh *</pre>
<h2>#30. Display the top ten running processes sorted by memory usage</h2>
<pre >$ ps aux | sort -nk +4 | tail</pre>
<p>This is certainly not the best way to display the top ten processes that consume the most memory, but, hey, it works.</p>
<p>It takes the output of <code>ps aux</code>, <code>sort</code>s it by 4th column numerically and then uses <code>tail</code> to output the last then lines which happen to be the processes with the biggest memory consumption.</p>
<p>If I was to find out who consumes the most memory, I'd simply use <code>htop</code> or <code>top</code> and not <code>ps</code>.</p>
<h2>Bonus one-liner: Start an SMTP server</h2>
<pre >python -m smtpd -n -c DebuggingServer localhost:1025</pre>
<p>This one-liner starts an SMTP server on port 1025. It uses Python's standard library <code>smtpd</code> (specified by <code>-m smtpd</code>) and passes it three arguments - <code>-n</code>, <code>-c DebuggingServer</code> and <code>localhost:1025</code>.</p>
<p>The <code>-n</code> argument tells Python not to setuid (change user) to \"nobody\" - it makes the code run under your user.</p>
<p>The <code>-c DebuggingServer</code> argument tells Python to use <code>DebuggingServer</code> class as the SMTP implementation that prints each message it receives to stdout.</p>
<p>The <code>localhost:1025</code> argument tells Python to start the SMTP server on locahost, port 1025.</p>
<p>However, if you wish to start it on the standard port 25, you'll have to use <code>sudo</code> command, because only root is allowed to start services on ports 1-1024. These are also known as privileged ports.</p>
<pre >sudo python -m smtpd -n -c DebuggingServer localhost:25</pre>
<p>This one-liner was coined by <a href=\"http://evanculver.com/2010/03/18/handy-one-liners/\">Evan Culver</a>. Thanks to him!</p>
<h2>That's it for today,</h2>
<p>but be sure to come back the next time for \"Yet Another Ten One-Liners from CommandLineFu Explained!\"</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=u10fej7POxc:9KqBYA8sFpM:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=u10fej7POxc:9KqBYA8sFpM:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/u10fej7POxc\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/another-ten-one-liners-from-commandlinefu-explained"))) ("A Real Turing Machine Running The Busy Beaver" "<p><a href=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Remember my article on <a href=\"http://www.catonmat.net/blog/busy-beaver/\">The Busy Beaver Problem</a>? Well, someone built a real Turing Machine and decided to run the busy beaver with 4 states on it. Here is the video.</p>
<div class=\"center-aligner\"><object width=\"480\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/2PjU6DJyBpw&hl=en_US&fs=1&\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/2PjU6DJyBpw&hl=en_US&fs=1&\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"385\"></embed>
</object>
<p>Video URL: <a href=\"http://www.youtube.com/watch?v=2PjU6DJyBpw\">http://www.youtube.com/watch?v=2PjU6DJyBpw</a></p>
</div>
<p>The Turing Machine in this video runs for 107 steps and halts with the total of 13 ones, as expected.</p>
<p>In <a href=\"http://www.catonmat.net/blog/busy-beaver/\">my article on The Busy Beaver Problem</a>, I also wrote a program that visualizes the tape changes. If you follow the video closely, you'll see that they match the visualization (black square stands for 1, white for 0).</p>
<div class=\"center-aligner\"><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2009/10/busy-beaver-four-states.png\"><br>
<small>Tape changes for 4 state busy beaver.</small></p>
</div>
<p>See <a href=\"http://aturingmachine.com\">A Turing Machine</a> website for more videos and information about how this machine was actually built. Also see <a href=\"http://www.catonmat.net/blog/busy-beaver/\">my article on Busy Beaver</a> for a Turing Machine implementation in Python and C++.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/b1VVNTQ28Ao\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/b1VVNTQ28Ao/a-real-turing-machine-running-the-busy-beaver" (19376 30401) old 13 nil nil ((title ((type . "text")) "A Real Turing Machine Running The Busy Beaver") (id nil "210") (updated nil "2010-03-29T09:45:37Z") (published nil "2010-03-29T05:15:45Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/b1VVNTQ28Ao/a-real-turing-machine-running-the-busy-beaver"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/zOHVdWG8r_xU-LjLlDCp4-fBh_M/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p>Remember my article on <a href=\"http://www.catonmat.net/blog/busy-beaver/\">The Busy Beaver Problem</a>? Well, someone built a real Turing Machine and decided to run the busy beaver with 4 states on it. Here is the video.</p>
<div class=\"center-aligner\"><object width=\"480\" height=\"385\"><param name=\"movie\" value=\"http://www.youtube.com/v/2PjU6DJyBpw&hl=en_US&fs=1&\"></param>
<param name=\"allowFullScreen\" value=\"true\"></param>
<param name=\"allowscriptaccess\" value=\"always\"></param>
<embed src=\"http://www.youtube.com/v/2PjU6DJyBpw&hl=en_US&fs=1&\" type=\"application/x-shockwave-flash\" allowscriptaccess=\"always\" allowfullscreen=\"true\" width=\"480\" height=\"385\"></embed>
</object>
<p>Video URL: <a href=\"http://www.youtube.com/watch?v=2PjU6DJyBpw\">http://www.youtube.com/watch?v=2PjU6DJyBpw</a></p>
</div>
<p>The Turing Machine in this video runs for 107 steps and halts with the total of 13 ones, as expected.</p>
<p>In <a href=\"http://www.catonmat.net/blog/busy-beaver/\">my article on The Busy Beaver Problem</a>, I also wrote a program that visualizes the tape changes. If you follow the video closely, you'll see that they match the visualization (black square stands for 1, white for 0).</p>
<div class=\"center-aligner\"><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2009/10/busy-beaver-four-states.png\"><br>
<small>Tape changes for 4 state busy beaver.</small></p>
</div>
<p>See <a href=\"http://aturingmachine.com\">A Turing Machine</a> website for more videos and information about how this machine was actually built. Also see <a href=\"http://www.catonmat.net/blog/busy-beaver/\">my article on Busy Beaver</a> for a Turing Machine implementation in Python and C++.</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=b1VVNTQ28Ao:n3qFmXUPhKE:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=b1VVNTQ28Ao:n3qFmXUPhKE:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/b1VVNTQ28Ao\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/a-real-turing-machine-running-the-busy-beaver"))) ("The Next Ten One-Liners from CommandLineFu Explained" "<p><a href=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Here are the next ten top one-liners from the <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> website. The <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">first post</a> about the topic became massively popular and received over 100,000 views in the first two days.</p>
<p>Before I dive into the next ten one-liners, I want to take the chance and promote the other three article series on one-liners that I have written:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/awk-one-liners-explained-part-one/\">Awk One-Liners Explained (4 part article).</a></li>
<li><a href=\"http://www.catonmat.net/blog/sed-one-liners-explained-part-one/\">Sed One-Liners Explained (3 part article).</a></li>
<li><a href=\"http://www.catonmat.net/blog/perl-one-liners-explained-part-one/\">Perl One-Liners Explained (9 part article, work in progress).</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/next_ten_oneliners.html\">Russian translation now available.</a></p>
<p>Alright, so here are today's one-liners:</p>
<h2 style=\"margin-bottom: 10px\">#11. Edit the command you typed in your favorite editor</h2>
<pre >$ command &lt;CTRL-x CTRL-e></pre>
<p>This one-liner opens the so-far typed <code>command</code> in your favorite text editor for further editing. This is handy if you are typing a lengthier shell command. After you have done editing the command, quit from your editor successfully to execute it. To cancel execution, just erase it. If you quit unsuccessfully, the command you had typed before diving into the editor will be executed.</p>
<p>Actually, I have to educate you, it's not a feature of the shell per se but a feature of the <a href=\"http://tiswww.case.edu/php/chet/readline/rltop.html\">readline library</a> that most shells use for command line processing. This particular binding <code>CTRL-x CTRL-e</code> only works in <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">readline emacs editing mode</a>. The other mode is <a href=\"http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/\">readline vi editing mode</a>, in which the same can be accomplished by pressing <code>ESC</code> and then <code>v</code>.</p>
<p>The emacs editing mode is the default in all the shells that use the readline library. The usual command to change between the modes is <code>set -o vi</code> to change to vi editing mode and <code>set -o emacs</code> to change back to emacs editing mode.</p>
<p>To change the editor, export the <code>$EDITOR</code> shell variable to your preference. For example, to set the default editor to pico, type <code>export EDITOR=pico</code>.</p>
<p>Another way to edit commands in a text editor is to use <code>fc</code> shell builtin (at least bash has this builtin). The <code>fc</code> command opens the previous edited command in your favorite text editor. It's easy to remember the <code>fc</code> command because it stands for \"<strong>f</strong>ix <strong>c</strong>ommand.\"</p>
<p>Remember the <code>^foo^bar^</code> command from the <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">first top ten one-liners</a>? You can emulate this behavior by typing <code>fc -s foo=bar</code>. It will replace <code>foo</code> with <code>bar</code> in the previous command and execute it.</p>
<h2 style=\"margin-bottom: 10px\">#12. Empty a file or create a new file</h2>
<pre >$ > file.txt</pre>
<p>This one-liner either wipes the file called <code>file.txt</code> empty or creates a new file called <code>file.txt</code>.</p>
<p>The shell first checks if the file <code>file.txt</code> exists. If it does, the shell opens it and wipes it clean. If it doesn't exist, the shell creates the file and opens it. Next the shell proceeds to redirecting standard output to the opened file descriptor. Since there is nothing on the standard output, the command succeeds, closes the file descriptor, leaving the file empty.</p>
<p>Creating a new empty file is also called <em>touching</em> and can be done by <code>$ touch file.txt</code> command. The <code>touch</code> command can also be used for changing timestamps of the commands. Touch, however, won't wipe the file clean, it will only change the access and modification timestamps to the current time.</p>
<h2 style=\"margin-bottom: 10px\">#13. Create a tunnel from localhost:2001 to somemachine:80</h2>
<pre >$ ssh -N -L2001:localhost:80 somemachine</pre>
<p>This one-liner creates a tunnel from your computer's port 2001 to somemachine's port 80. Each time you connect to port 2001 on your machine, your connection gets tunneled to somemachine:80.</p>
<p>The <code>-L</code> option can be summarized as <code>-L port:host:hostport</code>. Whenever a connection is made to <code>localhost:port</code>, the connection is forwarded over the secure channel, and a connection is made to <code>host:hostport</code> from the remote machine.</p>
<p>The <code>-N</code> option makes sure you don't run shell as you connect to somemachine.</p>
<p>To make things more concrete, here is another example:</p>
<pre >$ ssh -f -N -L2001:www.google.com:80 somemachine</pre>
<p>This one-liner creates a tunnel from your computer's port 2001 to www.google.com:80 via somemachine. Each time you connect to localhost:2001, ssh tunnels your request via somemachine, where it tries to open a connection to www.google.com.</p>
<p>Notice the additional <code>-f</code> flag - it makes ssh daemonize (go into background) so it didn't consume a terminal.</p>
<h2 style=\"margin-bottom: 10px\">#14. Reset terminal</h2>
<pre >$ reset</pre>
<p>This command resets the terminal. You know, when you have accidentally output binary data to the console, it becomes messed up. The <code>reset</code> command usually cleans it up. It does that by sending a bunch of special byte sequences to the terminal. The terminal interprets them as special commands and executes them.</p>
<p>Here is what BusyBox's <code>reset</code> command does:</p>
<pre >printf(\"\\033c\\033(K\\033[J\\033[0m\\033[?25h\");</pre>
<p>It sends a bunch of escape codes and a bunch of CSI commands. Here is what they mean:</p>
<ul>	<li><code>\\033c</code>: \"ESC c\" - sends reset to the terminal.</li>
<li><code>\\033(K</code>: \"ESC ( K\" - reloads the screen output mapping table.</li>
<li><code>\\033[J</code>: \"ESC [ J\" - erases display.</li>
<li><code>\\033[0m</code>: \"ESC [ 0 m\" - resets all display attributes to their defaults.</li>
<li><code>\\033[?25h</code>: \"ESC [ ? 25 h\" - makes cursor visible.</li>
</ul>
<h2 style=\"margin-bottom: 10px\">#15. Tweet from the shell</h2>
<pre >$ curl -u user:pass -d status='Tweeting from the shell' http://twitter.com/statuses/update.xml</pre>
<p>This one-liner tweets your message from the terminal. It uses the <a href=\"http://curl.haxx.se/\">curl</a> program to HTTP POST your tweet via <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update\">Twitter's API</a>.</p>
<p>The <code>-u user:pass</code> argument sets the login and password to use for authentication. If you don't wish your password to be saved in the shell history, omit the <code>:pass</code> part and curl will prompt you for the password as it tries to authenticate. Oh, and while we are at shell history, another way to omit password from being saved in the history is to start the command with a space! For example, <code>&lt;space>curl ...</code> won't save the curl command to the shell history.</p>
<p>The <code>-d status='...'</code> instructs curl to use the HTTP POST method for the request and send <code>status=...</code> as POST data.</p>
<p>Finally, <code>http://twitter.com/statuses/update.xml</code> is the API URL to POST the data to.</p>
<p>Talking about Twitter, I'd love if you <a href=\"http://twitter.com/pkrumins\">followed me on Twitter!</a> :)</p>
<h2 style=\"margin-bottom: 10px\">#16. Execute a command at midnight</h2>
<pre >$ echo cmd | at midnight</pre>
<p>This one-liner sends the shell command <code>cmd</code> to the at-daemon (atd) for execution at midnight.</p>
<p>The <code>at</code> command is light on the execution-time argument, you may write things like <code>4pm tomorrow</code> to execute it at 4pm tomorrow, <code>9pm next year</code> to run it on the same date at 9pm the next year, <code>6pm + 10 days</code> to run it at 6pm after 10 days, or <code>now +1minute</code> to run it after a minute.</p>
<p>Use <code>atq</code> command to list all the jobs that are scheduled for execution and <code>atrm</code> to remove a job from the queue.</p>
<p>Compared to the universally known <code>cron</code>, <code>at</code> is suitable for one-time jobs. For example, you'd use <code>cron</code> to execute a job every day at midnight but you would use <code>at</code> to execute a job only today at midnight.</p>
<p>Also be aware that if the load is greater than some number (for one processor systems the default is 0.8), then <code>atd</code> <strong>will not</strong> execute the command! That can be fixed by specifying a greater max load to <code>atd</code> via <code>-l</code> argument.</p>
<h2 style=\"margin-bottom: 10px\">#17. Output your microphone to other computer's speaker</h2>
<pre >$ dd if=/dev/dsp | ssh username@host dd of=/dev/dsp</pre>
<p>The default sound device on Linux is <code>/dev/dsp</code>. It can be both written to and read from. If it's read from then the audio subsystem will read the data from the microphone. If it's written to, it will send audio to your speaker.</p>
<p>This one-liner reads audio from your microphone via the <code>dd if=/dev/dsp</code> command (<code>if</code> stands for input file) and pipes it as standard input to <code>ssh</code>. <code>Ssh</code>, in turn, opens a connection to a computer at <code>host</code> and runs the <code>dd of=/dev/dsp</code> (<code>of</code> stands for output file) on it. <code>Dd of=/dev/dsp</code> receives the standard input that <code>ssh</code> received from <code>dd if=/dev/dsp</code>. The result is that your microphone gets output on <code>host</code> computer's speaker.</p>
<p>Want to scare your colleague? Dump <code>/dev/urandom</code> to his speaker by <code>dd if=/dev/urandom</code>.</p>
<h2 style=\"margin-bottom: 10px\">#18. Create and mount a temporary RAM partition</h2>
<pre ># mount -t tmpfs -o size=1024m tmpfs /mnt </pre>
<p>This command creates a temporary RAM filesystem of 1GB (1024m) and mounts it at <code>/mnt</code>. The <code>-t</code> flag to mount specifies the filesystem type and the <code>-o size=1024m</code> passes the <code>size</code> sets the filesystem size.</p>
<p>If it doesn't work, make sure your kernel was compiled to support the tmpfs. If tmpfs was compiled as a module, make sure to load it via <code>modprobe tmpfs</code>. If it still doesn't work, you'll have to recompile your kernel.</p>
<p>To unmount the ram disk, use the <code>umount /mnt</code> command (as root). But remember that mounting at <code>/mnt</code> is not the best practice. Better mount your drive to <code>/mnt/tmpfs</code> or a similar path.</p>
<p>If you wish your filesystem to grow dynamically, use <code>ramfs</code> filesystem type instead of <code>tmpfs</code>. Another note: tmpfs may use swap, while ramfs won't.</p>
<h2 style=\"margin-bottom: 10px\">#19. Compare a remote file with a local file</h2>
<pre >$ ssh user@host cat /path/to/remotefile | diff /path/to/localfile -</pre>
<p>This one-liner diffs the file <code>/path/to/localfile</code> on local machine with a file <code>/path/to/remotefile</code> on <code>host</code> machine.</p>
<p>It first opens a connection via <code>ssh</code> to <code>host</code> and executes the <code>cat /path/to/remotefile</code> command there. The shell then takes the output and pipes it to <code>diff /path/to/localfile -</code> command. The second argument <code>-</code> to <code>diff</code> tells it to diff the file <code>/path/to/localfile</code> against standard input. That's it.</p>
<h2 style=\"margin-bottom: 10px\">#20. Find out which programs listen on which TCP ports</h2>
<pre ># netstat -tlnp</pre>
<p>This is an easy one. Netstat is the standard utility for listing information about Linux networking subsystem. In this particular one-liner it's called with <code>-tlnp</code> arguments:</p>
<ul>	<li><code>-t</code> causes netstat to only list information about TCP sockets.</li>
<li><code>-l</code> causes netstat to only list information about listening sockets.</li>
<li><code>-n</code> causes netstat not to do reverse lookups on the IPs.</li>
<li><code>-p</code> causes netstat to print the PID and name of the program to which the socket belongs (requires root).</li>
</ul>
<p>To find more detailed info about open sockets on your computer, use the <code>lsof</code> utility. See my article \"<a href=\"http://www.catonmat.net/blog/unix-utilities-lsof/\">A Unix Utility You Should Know About: lsof</a>\" for more information.</p>
<h2 style=\"margin-bottom: 10px\">That's it for today.</h2>
<p>Tune in the next time for \"Another Ten One-Liners from CommandLineFu Explained\". There are many more nifty commands to write about. But for now, have fun and see ya!</p>
<p>PS. <a href=\"http://twitter.com/pkrumins\">Follow me on twitter for updates!</a></p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/IbHTZFjHPU0\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/IbHTZFjHPU0/the-next-ten-one-liners-from-commandlinefu-explained" (19418 50388) old 14 nil nil ((title ((type . "text")) "The Next Ten One-Liners from CommandLineFu Explained") (id nil "208") (updated nil "2010-04-30T11:53:56Z") (published nil "2010-03-24T06:00:57Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/IbHTZFjHPU0/the-next-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/hUS1DHkSuZZJAZn1E1Es_P9eG10/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src=\"http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg\" alt=\"CommandLineFu Explained\" class=\"post-icon\" align=\"left\">Here are the next ten top one-liners from the <a href=\"http://www.commandlinefu.com/\">commandlinefu</a> website. The <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">first post</a> about the topic became massively popular and received over 100,000 views in the first two days.</p>
<p>Before I dive into the next ten one-liners, I want to take the chance and promote the other three article series on one-liners that I have written:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/awk-one-liners-explained-part-one/\">Awk One-Liners Explained (4 part article).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/sed-one-liners-explained-part-one/\">Sed One-Liners Explained (3 part article).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/perl-one-liners-explained-part-one/\">Perl One-Liners Explained (9 part article, work in progress).</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/next_ten_oneliners.html\">Russian translation now available.</a></p>
<p>Alright, so here are today's one-liners:</p>
<h2 style=\"margin-bottom: 10px\">#11. Edit the command you typed in your favorite editor</h2>
<pre >$ command &lt;CTRL-x CTRL-e></pre>
<p>This one-liner opens the so-far typed <code>command</code> in your favorite text editor for further editing. This is handy if you are typing a lengthier shell command. After you have done editing the command, quit from your editor successfully to execute it. To cancel execution, just erase it. If you quit unsuccessfully, the command you had typed before diving into the editor will be executed.</p>
<p>Actually, I have to educate you, it's not a feature of the shell per se but a feature of the <a href=\"http://tiswww.case.edu/php/chet/readline/rltop.html\">readline library</a> that most shells use for command line processing. This particular binding <code>CTRL-x CTRL-e</code> only works in <a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">readline emacs editing mode</a>. The other mode is <a href=\"http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/\">readline vi editing mode</a>, in which the same can be accomplished by pressing <code>ESC</code> and then <code>v</code>.</p>
<p>The emacs editing mode is the default in all the shells that use the readline library. The usual command to change between the modes is <code>set -o vi</code> to change to vi editing mode and <code>set -o emacs</code> to change back to emacs editing mode.</p>
<p>To change the editor, export the <code>$EDITOR</code> shell variable to your preference. For example, to set the default editor to pico, type <code>export EDITOR=pico</code>.</p>
<p>Another way to edit commands in a text editor is to use <code>fc</code> shell builtin (at least bash has this builtin). The <code>fc</code> command opens the previous edited command in your favorite text editor. It's easy to remember the <code>fc</code> command because it stands for \"<strong>f</strong>ix <strong>c</strong>ommand.\"</p>
<p>Remember the <code>^foo^bar^</code> command from the <a href=\"http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained/\">first top ten one-liners</a>? You can emulate this behavior by typing <code>fc -s foo=bar</code>. It will replace <code>foo</code> with <code>bar</code> in the previous command and execute it.</p>
<h2 style=\"margin-bottom: 10px\">#12. Empty a file or create a new file</h2>
<pre >$ > file.txt</pre>
<p>This one-liner either wipes the file called <code>file.txt</code> empty or creates a new file called <code>file.txt</code>.</p>
<p>The shell first checks if the file <code>file.txt</code> exists. If it does, the shell opens it and wipes it clean. If it doesn't exist, the shell creates the file and opens it. Next the shell proceeds to redirecting standard output to the opened file descriptor. Since there is nothing on the standard output, the command succeeds, closes the file descriptor, leaving the file empty.</p>
<p>Creating a new empty file is also called <em>touching</em> and can be done by <code>$ touch file.txt</code> command. The <code>touch</code> command can also be used for changing timestamps of the commands. Touch, however, won't wipe the file clean, it will only change the access and modification timestamps to the current time.</p>
<h2 style=\"margin-bottom: 10px\">#13. Create a tunnel from localhost:2001 to somemachine:80</h2>
<pre >$ ssh -N -L2001:localhost:80 somemachine</pre>
<p>This one-liner creates a tunnel from your computer's port 2001 to somemachine's port 80. Each time you connect to port 2001 on your machine, your connection gets tunneled to somemachine:80.</p>
<p>The <code>-L</code> option can be summarized as <code>-L port:host:hostport</code>. Whenever a connection is made to <code>localhost:port</code>, the connection is forwarded over the secure channel, and a connection is made to <code>host:hostport</code> from the remote machine.</p>
<p>The <code>-N</code> option makes sure you don't run shell as you connect to somemachine.</p>
<p>To make things more concrete, here is another example:</p>
<pre >$ ssh -f -N -L2001:www.google.com:80 somemachine</pre>
<p>This one-liner creates a tunnel from your computer's port 2001 to www.google.com:80 via somemachine. Each time you connect to localhost:2001, ssh tunnels your request via somemachine, where it tries to open a connection to www.google.com.</p>
<p>Notice the additional <code>-f</code> flag - it makes ssh daemonize (go into background) so it didn't consume a terminal.</p>
<h2 style=\"margin-bottom: 10px\">#14. Reset terminal</h2>
<pre >$ reset</pre>
<p>This command resets the terminal. You know, when you have accidentally output binary data to the console, it becomes messed up. The <code>reset</code> command usually cleans it up. It does that by sending a bunch of special byte sequences to the terminal. The terminal interprets them as special commands and executes them.</p>
<p>Here is what BusyBox's <code>reset</code> command does:</p>
<pre >printf(\"\\033c\\033(K\\033[J\\033[0m\\033[?25h\");</pre>
<p>It sends a bunch of escape codes and a bunch of CSI commands. Here is what they mean:</p>
<ul>	<li><code>\\033c</code>: \"ESC c\" - sends reset to the terminal.</li>
	<li><code>\\033(K</code>: \"ESC ( K\" - reloads the screen output mapping table.</li>
	<li><code>\\033[J</code>: \"ESC [ J\" - erases display.</li>
	<li><code>\\033[0m</code>: \"ESC [ 0 m\" - resets all display attributes to their defaults.</li>
	<li><code>\\033[?25h</code>: \"ESC [ ? 25 h\" - makes cursor visible.</li>
</ul>
<h2 style=\"margin-bottom: 10px\">#15. Tweet from the shell</h2>
<pre >$ curl -u user:pass -d status='Tweeting from the shell' http://twitter.com/statuses/update.xml</pre>
<p>This one-liner tweets your message from the terminal. It uses the <a href=\"http://curl.haxx.se/\">curl</a> program to HTTP POST your tweet via <a href=\"http://apiwiki.twitter.com/Twitter-REST-API-Method%3A-statuses%C2%A0update\">Twitter's API</a>.</p>
<p>The <code>-u user:pass</code> argument sets the login and password to use for authentication. If you don't wish your password to be saved in the shell history, omit the <code>:pass</code> part and curl will prompt you for the password as it tries to authenticate. Oh, and while we are at shell history, another way to omit password from being saved in the history is to start the command with a space! For example, <code>&lt;space>curl ...</code> won't save the curl command to the shell history.</p>
<p>The <code>-d status='...'</code> instructs curl to use the HTTP POST method for the request and send <code>status=...</code> as POST data.</p>
<p>Finally, <code>http://twitter.com/statuses/update.xml</code> is the API URL to POST the data to.</p>
<p>Talking about Twitter, I'd love if you <a href=\"http://twitter.com/pkrumins\">followed me on Twitter!</a> :)</p>
<h2 style=\"margin-bottom: 10px\">#16. Execute a command at midnight</h2>
<pre >$ echo cmd | at midnight</pre>
<p>This one-liner sends the shell command <code>cmd</code> to the at-daemon (atd) for execution at midnight.</p>
<p>The <code>at</code> command is light on the execution-time argument, you may write things like <code>4pm tomorrow</code> to execute it at 4pm tomorrow, <code>9pm next year</code> to run it on the same date at 9pm the next year, <code>6pm + 10 days</code> to run it at 6pm after 10 days, or <code>now +1minute</code> to run it after a minute.</p>
<p>Use <code>atq</code> command to list all the jobs that are scheduled for execution and <code>atrm</code> to remove a job from the queue.</p>
<p>Compared to the universally known <code>cron</code>, <code>at</code> is suitable for one-time jobs. For example, you'd use <code>cron</code> to execute a job every day at midnight but you would use <code>at</code> to execute a job only today at midnight.</p>
<p>Also be aware that if the load is greater than some number (for one processor systems the default is 0.8), then <code>atd</code> <strong>will not</strong> execute the command! That can be fixed by specifying a greater max load to <code>atd</code> via <code>-l</code> argument.</p>
<h2 style=\"margin-bottom: 10px\">#17. Output your microphone to other computer's speaker</h2>
<pre >$ dd if=/dev/dsp | ssh username@host dd of=/dev/dsp</pre>
<p>The default sound device on Linux is <code>/dev/dsp</code>. It can be both written to and read from. If it's read from then the audio subsystem will read the data from the microphone. If it's written to, it will send audio to your speaker.</p>
<p>This one-liner reads audio from your microphone via the <code>dd if=/dev/dsp</code> command (<code>if</code> stands for input file) and pipes it as standard input to <code>ssh</code>. <code>Ssh</code>, in turn, opens a connection to a computer at <code>host</code> and runs the <code>dd of=/dev/dsp</code> (<code>of</code> stands for output file) on it. <code>Dd of=/dev/dsp</code> receives the standard input that <code>ssh</code> received from <code>dd if=/dev/dsp</code>. The result is that your microphone gets output on <code>host</code> computer's speaker.</p>
<p>Want to scare your colleague? Dump <code>/dev/urandom</code> to his speaker by <code>dd if=/dev/urandom</code>.</p>
<h2 style=\"margin-bottom: 10px\">#18. Create and mount a temporary RAM partition</h2>
<pre ># mount -t tmpfs -o size=1024m tmpfs /mnt </pre>
<p>This command creates a temporary RAM filesystem of 1GB (1024m) and mounts it at <code>/mnt</code>. The <code>-t</code> flag to mount specifies the filesystem type and the <code>-o size=1024m</code> passes the <code>size</code> sets the filesystem size.</p>
<p>If it doesn't work, make sure your kernel was compiled to support the tmpfs. If tmpfs was compiled as a module, make sure to load it via <code>modprobe tmpfs</code>. If it still doesn't work, you'll have to recompile your kernel.</p>
<p>To unmount the ram disk, use the <code>umount /mnt</code> command (as root). But remember that mounting at <code>/mnt</code> is not the best practice. Better mount your drive to <code>/mnt/tmpfs</code> or a similar path.</p>
<p>If you wish your filesystem to grow dynamically, use <code>ramfs</code> filesystem type instead of <code>tmpfs</code>. Another note: tmpfs may use swap, while ramfs won't.</p>
<h2 style=\"margin-bottom: 10px\">#19. Compare a remote file with a local file</h2>
<pre >$ ssh user@host cat /path/to/remotefile | diff /path/to/localfile -</pre>
<p>This one-liner diffs the file <code>/path/to/localfile</code> on local machine with a file <code>/path/to/remotefile</code> on <code>host</code> machine.</p>
<p>It first opens a connection via <code>ssh</code> to <code>host</code> and executes the <code>cat /path/to/remotefile</code> command there. The shell then takes the output and pipes it to <code>diff /path/to/localfile -</code> command. The second argument <code>-</code> to <code>diff</code> tells it to diff the file <code>/path/to/localfile</code> against standard input. That's it.</p>
<h2 style=\"margin-bottom: 10px\">#20. Find out which programs listen on which TCP ports</h2>
<pre ># netstat -tlnp</pre>
<p>This is an easy one. Netstat is the standard utility for listing information about Linux networking subsystem. In this particular one-liner it's called with <code>-tlnp</code> arguments:</p>
<ul>	<li><code>-t</code> causes netstat to only list information about TCP sockets.</li>
	<li><code>-l</code> causes netstat to only list information about listening sockets.</li>
	<li><code>-n</code> causes netstat not to do reverse lookups on the IPs.</li>
	<li><code>-p</code> causes netstat to print the PID and name of the program to which the socket belongs (requires root).</li>
</ul>
<p>To find more detailed info about open sockets on your computer, use the <code>lsof</code> utility. See my article \"<a href=\"http://www.catonmat.net/blog/unix-utilities-lsof/\">A Unix Utility You Should Know About: lsof</a>\" for more information.</p>
<h2 style=\"margin-bottom: 10px\">That's it for today.</h2>
<p>Tune in the next time for \"Another Ten One-Liners from CommandLineFu Explained\". There are many more nifty commands to write about. But for now, have fun and see ya!</p>
<p>PS. <a href=\"http://twitter.com/pkrumins\">Follow me on twitter for updates!</a></p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=IbHTZFjHPU0:9MTdrOISR2E:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=IbHTZFjHPU0:9MTdrOISR2E:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/IbHTZFjHPU0\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/the-next-ten-one-liners-from-commandlinefu-explained"))) ("Top Ten One-Liners from CommandLineFu Explained" "<p><a href=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg' alt='CommandLineFu Explained' class=\"post-icon\" align=\"left\">I love working in the shell. Mastery of shell lets you get things done in seconds, rather than minutes or hours, if you chose to write a program instead. </p>
<p>In this article I'd like to explain the <a href=\"http://www.commandlinefu.com/commands/browse/sort-by-votes\">top one-liners</a> from the <a href=\"http://www.commandlinefu.com\">commandlinefu.com</a>. It's a user-driven website where people get to choose the best and most useful shell one-liners.</p>
<p>But before I do that, I want to take the opportunity and link to a few of my articles that I wrote some time ago on working efficiently in the command line:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/\">Working Efficiently in Bash (Part I).</a></li>
<li><a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">Working Efficiently in Bash (Part II).</a></li>
<li><a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History.</a></li>
<li><a href=\"http://www.catonmat.net/blog/set-operations-in-unix-shell/\">A fun article on Set Operations in the Shell.</a></li>
<li><a href=\"http://www.catonmat.net/blog/solving-google-treasure-hunt-prime-number-problem-four/\">Another fun article on Solving Google Treasure Hunt in the Shell.</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/oneliners.html\">Russian translation now available.</a></p>
<p>And now the explanation of top one-liners from commandlinefu.</p>
<h2 style=\"margin-bottom: 10px\">#1. Run the last command as root</h2>
<pre >$ sudo !!</pre>
<p>We all know what the <code>sudo</code> command does - it runs the command as another user, in this case, it runs the command as superuser because no other user was specified. But what's really interesting is the bang-bang <code>!!</code> part of the command. It's called the <strong>event designator</strong>. An event designator references a command in shell's history. In this case the event designator references the previous command. Writing <code>!!</code> is the same as writing <code>!-1</code>. The <code>-1</code> refers to the last command. You can generalize it, and write <code>!-n</code> to refer to the n-th previous command. To view all your previous commands, type <code>history</code>.</p>
<p>This one-liner is actually really bash-specific, as event designators are a feature of bash.</p>
<p>I wrote about event designators in much more detail in my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" The article also comes with a printable cheat sheet for working with the history.</p>
<h2 style=\"margin-bottom: 10px\">#2. Serve the current directory at http://localhost:8000/</h2>
<pre >$ python -m SimpleHTTPServer</pre>
<p>This one-liner starts a <a href=\"http://www.webhostingsearch.com/dedicated-server.php\">dedicated server hosting</a> (web server) on port 8000 with the contents of current directory on all the interfaces (address 0.0.0.0), not just localhost. If you have \"<code>index.html</code>\" or \"<code>index.htm</code>\" files, it will serve those, otherwise it will list the contents of the currently working directory.</p>
<p>It works because python comes with a standard module called <code>SimpleHTTPServer</code>. The <code>-m</code> argument makes python to search for a module named <code>SimpleHTTPServer.py</code> in all the possible system locations (listed in <code>sys.path</code> and <code>$PYTHONPATH</code> shell variable). Once found, it executes it as a script. If you look at the source code of this module, you'll find that this module tests if it's run as a script <code>if __name__ == '__main__'</code>, and if it is, it runs the <code>test()</code> method that makes it run a web server in the current directory.</p>
<p>To use a different port, specify it as the next argument:</p>
<pre >$ python -m SimpleHTTPServer 8080</pre>
<p>This command runs a HTTP server on all local interfaces on port 8080.</p>
<p>If you're looking for hosting your website, check out <a href=\"http://www.webhostingsearch.com\">webhosting</a>.</p>
<h2 style=\"margin-bottom: 10px\">#3. Save a file you edited in vim without the needed permissions</h2>
<pre >:w !sudo tee %</pre>
<p>This happens to me way too often. I open a system config file in vim and edit it just to find out that I don't have permissions to save it. This one-liner saves the day. Instead of writing the while to a temporary file <code>:w /tmp/foobar</code> and then moving the temporary file to the right destination <code>mv /tmp/foobar /etc/service.conf</code>, you now just type the one-liner above in vim and it will save the file.</p>
<p>Here is how it works, if you look at the vim documentation (by typing <code>:he :w</code> in vim), you'll find the reference to the command <code>:w !{cmd}</code> that says that vim runs <code>{cmd}</code> and passes it the contents of the file as standard input. In this one-liner the <code>{cmd}</code> part is the <code>sudo tee %</code> command. It runs <code>tee %</code> as superuser. But wait, what is <code>%</code>? Well, it's a read-only register in vim that contains the filename of the current file! Therefore the command that vim executes becomes <code>tee current_filename</code>, with the current directory being whatever the <code>current_file</code> is in. Now what does <code>tee</code> do? The <code>tee</code> command takes standard input and write it to a file! Rephrasing, it takes the contents of the file edited in vim, and writes it to the file (while being root)! All done!</p>
<h2 style=\"margin-bottom: 10px\">#4. Change to the previous working directory</h2>
<pre >$ cd -</pre>
<p>Everyone knows this, right? The dash \"<code>-</code>\" is short for \"previous working directory.\" The previous working directory is defined by <code>$OLDPWD</code> shell variable. After you use the <code>cd</code> command, it sets the <code>$OLDPWD</code> environment variable, and then, if you type the short version <code>cd -</code>, it effectively becomes <code>cd $OLDPWD</code> and changes to the previous directory.</p>
<p>To change to a directory named \"<code>-</code>\", you have to either cd to the parent directory and then do <code>cd ./-</code> or do <code>cd /full/path/to/-</code>.</p>
<h2 style=\"margin-bottom: 10px\">#5. Run the previous shell command but replace string \"foo\" with \"bar\"</h2>
<pre >$ ^foo^bar^</pre>
<p>This is another event designator. This one is for quick substitution. It replaces <code>foo</code> with <code>bar</code> and repeats the last command. It's actually a shortcut for <code>!!:s/foo/bar/</code>. This one-liner applies the <code>s</code> modifier to the <code>!!</code> event designator. As we learned from one-liner #1, the <code>!!</code> event designator stands for the previous command. Now the <code>s</code> modifier stands for substitute (greetings to <a href=\"http://www.catonmat.net/blog/sed-one-liners-explained-part-one/\">sed</a>) and it substitutes the first word with the second word.</p>
<p>Note that this one-liner replaces just the first word in the previous command. To replace all words, add the <code>g</code> modifer (<code>g</code> for global):</p>
<pre >$ !!:gs/foo/bar</pre>
<p>This one-liner is also bash-specific, as event designators are a feature of bash.</p>
<p>Again, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" I explain all this stuff in great detail.</p>
<h2 style=\"margin-bottom: 10px\">#6. Quickly backup or copy a file</h2>
<pre >$ cp filename{,.bak}</pre>
<p>This one-liner copies the file named <code>filename</code> to a file named <code>filename.bak</code>. Here is how it works. It uses <strong>brace expansion</strong> to construct a list of arguments for the <code>cp</code> command. Brace expansion is a mechanism by which arbitrary strings may be generated. In this one-liner <code>filename{,.bak}</code> gets brace expanded to <code>filename filename.bak</code> and puts in place of the brace expression. The command becomes <code>cp filename filename.bak</code> and file gets copied.</p>
<p>Talking more about brace expansion, you can do all kinds of combinatorics with it. Here is a fun application:</p>
<pre >$ echo {a,b,c}{a,b,c}{a,b,c}</pre>
<p>It generates all the possible strings 3-letter from the set <code>{a, b, c}</code>:</p>
<pre >
aaa aab aac aba abb abc aca acb acc
baa bab bac bba bbb bbc bca bcb bcc
caa cab cac cba cbb cbc cca ccb ccc
</pre>
<p>And here is how to generate all the possible 2-letter strings from the set of <code>{a, b, c}</code>:</p>
<pre >
$ echo {a,b,c}{a,b,c}
</pre>
<p>It produces:</p>
<pre >
aa ab ac ba bb bc ca cb cc
</pre>
<p>If you liked this, you may also like my article where I defined a bunch of set operations (such as intersection, union, symmetry, powerset, etc) by using just shell commands. The article is called \"<a href=\"http://www.catonmat.net/blog/set-operations-in-unix-shell/\">Set Operations in the Unix Shell</a>.\" (And since I have sets in the shell, I will soon write articles on on \"<strong>Combinatorics in the Shell</strong>\" and \"<strong>Algebra in the Shell</strong>\". Fun topics to explore. Perhaps even \"Topology in the Shell\" :))</p>
<h2 style=\"margin-bottom: 10px\">#7. mtr - traceroute and ping combined</h2>
<pre >$ mtr google.com</pre>
<p>MTR, bettern known as \"Matt's Traceroute\" combines both <code>traceroute</code> and <code>ping</code> command. After each successful hop, it sends a ping request to the found machine, this way it produces output of both <code>traceroute</code> and <code>ping</code> to better understand the quality of link. If it finds out a packet took an alternative route, it displays it, and by default it keeps updating the statistics so you knew what was going on in real time.</p>
<h2 style=\"margin-bottom: 10px\">#8. Find the last command that begins with \"whatever,\" but avoid running it</h2>
<pre >$ !whatever:p</pre>
<p>Another use of event designators. The <code>!whatever</code> designator searches the shell history for the most recently executed command that starts with <code>whatever</code>. But instead of executing it, it prints it. The <code>:p</code> modifier makes it print instead of executing.</p>
<p>This one-liner is bash-specific, as event designators are a feature of bash.</p>
<p>Once again, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" I explain all this stuff in great detail.</p>
<h2 style=\"margin-bottom: 10px\">#9. Copy your public-key to remote-machine for public-key authentication</h2>
<pre >$ ssh-copy-id remote-machine</pre>
<p>This one-liner copies your public-key, that you generated with <code>ssh-keygen</code> (either SSHv1 file identity.pub or SSHv2 file id_rsa.pub) to the <code>remote-machine</code> and places it in <code>~/.ssh/authorized_keys</code> file. This ensures that the next time you try to log into that machine, public-key authentication (commonly referred to as \"passwordless authentication.\") will be used instead of the regular password authentication.</p>
<p>If you wished to do it yourself, you'd have to take the following steps:</p>
<pre >
your-machine$ scp ~/.ssh/identity.pub remote-machine:
your-machine$ ssh remote-machine
remote-machine$ cat identity.pub >> ~/.ssh/authorized_keys
</pre>
<p>This one-liner saves a great deal of typing. Actually I just found out that there was a shorter way to do it:</p>
<pre >
your-machine$ ssh remote-machine 'cat >> .ssh/authorized_keys' &lt; .ssh/identity.pub
</pre>
<h2 style=\"margin-bottom: 10px\">#10. Capture video of a linux desktop</h2>
<pre >$ ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq /tmp/out.mpg</pre>
<p>A pure coincidence, I have done so much video processing with ffmpeg that I know what most of this command does without looking much in the manual.</p>
<p>The ffmpeg generally can be descibed as a command that takes a bunch of options and the last option is the output file. In this case the options are <code>-f x11grab -s wxga -r 25 -i :0.0 -sameq</code> and the output file is <code>/tmp/out.mpg</code>.</p>
<p>Here is what the options mean:</p>
<ul>	<li><code>-f x11grab</code> makes ffmpeg to set the input video format as x11grab. The X11 framebuffer has a specific format it presents data in and it makes ffmpeg to decode it correctly.</li>
<li><code>-s wxga</code> makes ffmpeg to set the size of the video to wxga which is shortcut for 1366x768. This is a strange resolution to use, I'd just write <code>-s 800x600</code>.</li>
<li><code>-r 25</code> sets the framerate of the video to 25fps.</li>
<li><code>-i :0.0</code> sets the video input file to X11 display 0.0 at localhost.</li>
<li><code>-sameq</code> preserves the quality of input stream. It's best to preserve the quality and post-process it later.</li>
</ul>
<p>You can also specify ffmpeg to grab display from another x-server by changing the <code>-i :0.0</code> to <code>-i host:0.0</code>.</p>
<p>If you're interested in ffmpeg, here are my other articles on ffmpeg that I wrote while ago:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/how-to-extract-audio-tracks-from-youtube-videos/\">How to Extract Audio Tracks from YouTube Videos</a></li>
<li><a href=\"http://www.catonmat.net/blog/converting-youtube-flvs-to-a-better-format-with-ffmpeg/\">Converting YouTube Flash Videos to a Better Format with ffmpeg</a></li>
</ul>
<p>PS. This article was so fun to write, that I decided to write several more parts. Tune in the next time for \"The Next Top Ten One-Liners from CommandLineFu Explained\" :)</p>
<p>Have fun. See ya!</p>
<p>PSS. <a href=\"http://twitter.com/pkrumins\">Follow me on twitter for updates</a>.</p>
<p><strong>This article was sponsored by:</strong></p>
<ul> <li><a href=\"http://www.netfirms.ca/\">Canadian domain names</a> available through Netfirms.ca</li>
<li>Hosting.com offers <a href=\"http://www.hosting.com/dedicatedservershosting/\">Dedicated server hosting</a></li>
<li>Advanceware's <a href=\"http://www.advanceware.net/\">Inventory management software</a> can help you organize your resources.</li>
<li>Sherweb provides <a href=\"http://www.sherweb.com/hosted-exchange\">Hosted Exchange</a> solutions for your small business.</li>
</ul>
<p><a href=\"http://www.catonmat.net/feedback/?subject=Interested+in+Sponsoring+Articles\">Contact me</a>, if you wish to sponsor any other of my existing posts or future posts!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/crt1jT0uPnU\" height=\"1\" width=\"1\"/>" "http://feedproxy.google.com/~r/catonmat/~3/crt1jT0uPnU/top-ten-one-liners-from-commandlinefu-explained" (19591 49649) old 15 nil nil ((title ((type . "text")) "Top Ten One-Liners from CommandLineFu Explained") (id nil "195") (updated nil "2010-09-08T17:03:45Z") (published nil "2010-03-18T03:00:21Z") (link ((href . "http://feedproxy.google.com/~r/catonmat/~3/crt1jT0uPnU/top-ten-one-liners-from-commandlinefu-explained"))) (author nil (name nil "Peteris Krumins") (uri nil "http://www.catonmat.net/about") (email nil "peter@catonmat.net")) (content ((type . "html")) "
<p><a href=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/0/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/0/di\" border=\"0\" ismap=\"true\"></img></a><br/>
<a href=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/1/da\"><img src=\"http://feedads.g.doubleclick.net/~a/3wiliMYhJ2MqEpQswv8NsJqO7rU/1/di\" border=\"0\" ismap=\"true\"></img></a></p><p><img src='http://www.catonmat.net/blog/wp-content/uploads/2010/03/commandlinefu-explained.jpg' alt='CommandLineFu Explained' class=\"post-icon\" align=\"left\">I love working in the shell. Mastery of shell lets you get things done in seconds, rather than minutes or hours, if you chose to write a program instead. </p>
<p>In this article I'd like to explain the <a href=\"http://www.commandlinefu.com/commands/browse/sort-by-votes\">top one-liners</a> from the <a href=\"http://www.commandlinefu.com\">commandlinefu.com</a>. It's a user-driven website where people get to choose the best and most useful shell one-liners.</p>
<p>But before I do that, I want to take the opportunity and link to a few of my articles that I wrote some time ago on working efficiently in the command line:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/bash-vi-editing-mode-cheat-sheet/\">Working Efficiently in Bash (Part I).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/bash-emacs-editing-mode-cheat-sheet/\">Working Efficiently in Bash (Part II).</a></li>
	<li><a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History.</a></li>
	<li><a href=\"http://www.catonmat.net/blog/set-operations-in-unix-shell/\">A fun article on Set Operations in the Shell.</a></li>
	<li><a href=\"http://www.catonmat.net/blog/solving-google-treasure-hunt-prime-number-problem-four/\">Another fun article on Solving Google Treasure Hunt in the Shell.</a></li>
</ul>
<p><strong>Update:</strong> <a href=\"http://rus-linux.net/nlib.php?name=/MyLDP/consol/oneliners.html\">Russian translation now available.</a></p>
<p>And now the explanation of top one-liners from commandlinefu.</p>
<h2 style=\"margin-bottom: 10px\">#1. Run the last command as root</h2>
<pre >$ sudo !!</pre>
<p>We all know what the <code>sudo</code> command does - it runs the command as another user, in this case, it runs the command as superuser because no other user was specified. But what's really interesting is the bang-bang <code>!!</code> part of the command. It's called the <strong>event designator</strong>. An event designator references a command in shell's history. In this case the event designator references the previous command. Writing <code>!!</code> is the same as writing <code>!-1</code>. The <code>-1</code> refers to the last command. You can generalize it, and write <code>!-n</code> to refer to the n-th previous command. To view all your previous commands, type <code>history</code>.</p>
<p>This one-liner is actually really bash-specific, as event designators are a feature of bash.</p>
<p>I wrote about event designators in much more detail in my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" The article also comes with a printable cheat sheet for working with the history.</p>
<h2 style=\"margin-bottom: 10px\">#2. Serve the current directory at http://localhost:8000/</h2>
<pre >$ python -m SimpleHTTPServer</pre>
<p>This one-liner starts a <a href=\"http://www.webhostingsearch.com/dedicated-server.php\">dedicated server hosting</a> (web server) on port 8000 with the contents of current directory on all the interfaces (address 0.0.0.0), not just localhost. If you have \"<code>index.html</code>\" or \"<code>index.htm</code>\" files, it will serve those, otherwise it will list the contents of the currently working directory.</p>
<p>It works because python comes with a standard module called <code>SimpleHTTPServer</code>. The <code>-m</code> argument makes python to search for a module named <code>SimpleHTTPServer.py</code> in all the possible system locations (listed in <code>sys.path</code> and <code>$PYTHONPATH</code> shell variable). Once found, it executes it as a script. If you look at the source code of this module, you'll find that this module tests if it's run as a script <code>if __name__ == '__main__'</code>, and if it is, it runs the <code>test()</code> method that makes it run a web server in the current directory.</p>
<p>To use a different port, specify it as the next argument:</p>
<pre >$ python -m SimpleHTTPServer 8080</pre>
<p>This command runs a HTTP server on all local interfaces on port 8080.</p>
<p>If you're looking for hosting your website, check out <a href=\"http://www.webhostingsearch.com\">webhosting</a>.</p>
<h2 style=\"margin-bottom: 10px\">#3. Save a file you edited in vim without the needed permissions</h2>
<pre >:w !sudo tee %</pre>
<p>This happens to me way too often. I open a system config file in vim and edit it just to find out that I don't have permissions to save it. This one-liner saves the day. Instead of writing the while to a temporary file <code>:w /tmp/foobar</code> and then moving the temporary file to the right destination <code>mv /tmp/foobar /etc/service.conf</code>, you now just type the one-liner above in vim and it will save the file.</p>
<p>Here is how it works, if you look at the vim documentation (by typing <code>:he :w</code> in vim), you'll find the reference to the command <code>:w !{cmd}</code> that says that vim runs <code>{cmd}</code> and passes it the contents of the file as standard input. In this one-liner the <code>{cmd}</code> part is the <code>sudo tee %</code> command. It runs <code>tee %</code> as superuser. But wait, what is <code>%</code>? Well, it's a read-only register in vim that contains the filename of the current file! Therefore the command that vim executes becomes <code>tee current_filename</code>, with the current directory being whatever the <code>current_file</code> is in. Now what does <code>tee</code> do? The <code>tee</code> command takes standard input and write it to a file! Rephrasing, it takes the contents of the file edited in vim, and writes it to the file (while being root)! All done!</p>
<h2 style=\"margin-bottom: 10px\">#4. Change to the previous working directory</h2>
<pre >$ cd -</pre>
<p>Everyone knows this, right? The dash \"<code>-</code>\" is short for \"previous working directory.\" The previous working directory is defined by <code>$OLDPWD</code> shell variable. After you use the <code>cd</code> command, it sets the <code>$OLDPWD</code> environment variable, and then, if you type the short version <code>cd -</code>, it effectively becomes <code>cd $OLDPWD</code> and changes to the previous directory.</p>
<p>To change to a directory named \"<code>-</code>\", you have to either cd to the parent directory and then do <code>cd ./-</code> or do <code>cd /full/path/to/-</code>.</p>
<h2 style=\"margin-bottom: 10px\">#5. Run the previous shell command but replace string \"foo\" with \"bar\"</h2>
<pre >$ ^foo^bar^</pre>
<p>This is another event designator. This one is for quick substitution. It replaces <code>foo</code> with <code>bar</code> and repeats the last command. It's actually a shortcut for <code>!!:s/foo/bar/</code>. This one-liner applies the <code>s</code> modifier to the <code>!!</code> event designator. As we learned from one-liner #1, the <code>!!</code> event designator stands for the previous command. Now the <code>s</code> modifier stands for substitute (greetings to <a href=\"http://www.catonmat.net/blog/sed-one-liners-explained-part-one/\">sed</a>) and it substitutes the first word with the second word.</p>
<p>Note that this one-liner replaces just the first word in the previous command. To replace all words, add the <code>g</code> modifer (<code>g</code> for global):</p>
<pre >$ !!:gs/foo/bar</pre>
<p>This one-liner is also bash-specific, as event designators are a feature of bash.</p>
<p>Again, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" I explain all this stuff in great detail.</p>
<h2 style=\"margin-bottom: 10px\">#6. Quickly backup or copy a file</h2>
<pre >$ cp filename{,.bak}</pre>
<p>This one-liner copies the file named <code>filename</code> to a file named <code>filename.bak</code>. Here is how it works. It uses <strong>brace expansion</strong> to construct a list of arguments for the <code>cp</code> command. Brace expansion is a mechanism by which arbitrary strings may be generated. In this one-liner <code>filename{,.bak}</code> gets brace expanded to <code>filename filename.bak</code> and puts in place of the brace expression. The command becomes <code>cp filename filename.bak</code> and file gets copied.</p>
<p>Talking more about brace expansion, you can do all kinds of combinatorics with it. Here is a fun application:</p>
<pre >$ echo {a,b,c}{a,b,c}{a,b,c}</pre>
<p>It generates all the possible strings 3-letter from the set <code>{a, b, c}</code>:</p>
<pre >
aaa aab aac aba abb abc aca acb acc
baa bab bac bba bbb bbc bca bcb bcc
caa cab cac cba cbb cbc cca ccb ccc
</pre>
<p>And here is how to generate all the possible 2-letter strings from the set of <code>{a, b, c}</code>:</p>
<pre >
$ echo {a,b,c}{a,b,c}
</pre>
<p>It produces:</p>
<pre >
aa ab ac ba bb bc ca cb cc
</pre>
<p>If you liked this, you may also like my article where I defined a bunch of set operations (such as intersection, union, symmetry, powerset, etc) by using just shell commands. The article is called \"<a href=\"http://www.catonmat.net/blog/set-operations-in-unix-shell/\">Set Operations in the Unix Shell</a>.\" (And since I have sets in the shell, I will soon write articles on on \"<strong>Combinatorics in the Shell</strong>\" and \"<strong>Algebra in the Shell</strong>\". Fun topics to explore. Perhaps even \"Topology in the Shell\" :))</p>
<h2 style=\"margin-bottom: 10px\">#7. mtr - traceroute and ping combined</h2>
<pre >$ mtr google.com</pre>
<p>MTR, bettern known as \"Matt's Traceroute\" combines both <code>traceroute</code> and <code>ping</code> command. After each successful hop, it sends a ping request to the found machine, this way it produces output of both <code>traceroute</code> and <code>ping</code> to better understand the quality of link. If it finds out a packet took an alternative route, it displays it, and by default it keeps updating the statistics so you knew what was going on in real time.</p>
<h2 style=\"margin-bottom: 10px\">#8. Find the last command that begins with \"whatever,\" but avoid running it</h2>
<pre >$ !whatever:p</pre>
<p>Another use of event designators. The <code>!whatever</code> designator searches the shell history for the most recently executed command that starts with <code>whatever</code>. But instead of executing it, it prints it. The <code>:p</code> modifier makes it print instead of executing.</p>
<p>This one-liner is bash-specific, as event designators are a feature of bash.</p>
<p>Once again, see my article \"<a href=\"http://www.catonmat.net/blog/the-definitive-guide-to-bash-command-line-history/\">The Definitive Guide to Bash Command Line History</a>.\" I explain all this stuff in great detail.</p>
<h2 style=\"margin-bottom: 10px\">#9. Copy your public-key to remote-machine for public-key authentication</h2>
<pre >$ ssh-copy-id remote-machine</pre>
<p>This one-liner copies your public-key, that you generated with <code>ssh-keygen</code> (either SSHv1 file identity.pub or SSHv2 file id_rsa.pub) to the <code>remote-machine</code> and places it in <code>~/.ssh/authorized_keys</code> file. This ensures that the next time you try to log into that machine, public-key authentication (commonly referred to as \"passwordless authentication.\") will be used instead of the regular password authentication.</p>
<p>If you wished to do it yourself, you'd have to take the following steps:</p>
<pre >
your-machine$ scp ~/.ssh/identity.pub remote-machine:
your-machine$ ssh remote-machine
remote-machine$ cat identity.pub >> ~/.ssh/authorized_keys
</pre>
<p>This one-liner saves a great deal of typing. Actually I just found out that there was a shorter way to do it:</p>
<pre >
your-machine$ ssh remote-machine 'cat >> .ssh/authorized_keys' &lt; .ssh/identity.pub
</pre>
<h2 style=\"margin-bottom: 10px\">#10. Capture video of a linux desktop</h2>
<pre >$ ffmpeg -f x11grab -s wxga -r 25 -i :0.0 -sameq /tmp/out.mpg</pre>
<p>A pure coincidence, I have done so much video processing with ffmpeg that I know what most of this command does without looking much in the manual.</p>
<p>The ffmpeg generally can be descibed as a command that takes a bunch of options and the last option is the output file. In this case the options are <code>-f x11grab -s wxga -r 25 -i :0.0 -sameq</code> and the output file is <code>/tmp/out.mpg</code>.</p>
<p>Here is what the options mean:</p>
<ul>	<li><code>-f x11grab</code> makes ffmpeg to set the input video format as x11grab. The X11 framebuffer has a specific format it presents data in and it makes ffmpeg to decode it correctly.</li>
	<li><code>-s wxga</code> makes ffmpeg to set the size of the video to wxga which is shortcut for 1366x768. This is a strange resolution to use, I'd just write <code>-s 800x600</code>.</li>
	<li><code>-r 25</code> sets the framerate of the video to 25fps.</li>
	<li><code>-i :0.0</code> sets the video input file to X11 display 0.0 at localhost.</li>
	<li><code>-sameq</code> preserves the quality of input stream. It's best to preserve the quality and post-process it later.</li>
</ul>
<p>You can also specify ffmpeg to grab display from another x-server by changing the <code>-i :0.0</code> to <code>-i host:0.0</code>.</p>
<p>If you're interested in ffmpeg, here are my other articles on ffmpeg that I wrote while ago:</p>
<ul>	<li><a href=\"http://www.catonmat.net/blog/how-to-extract-audio-tracks-from-youtube-videos/\">How to Extract Audio Tracks from YouTube Videos</a></li>
	<li><a href=\"http://www.catonmat.net/blog/converting-youtube-flvs-to-a-better-format-with-ffmpeg/\">Converting YouTube Flash Videos to a Better Format with ffmpeg</a></li>
</ul>
<p>PS. This article was so fun to write, that I decided to write several more parts. Tune in the next time for \"The Next Top Ten One-Liners from CommandLineFu Explained\" :)</p>
<p>Have fun. See ya!</p>
<p>PSS. <a href=\"http://twitter.com/pkrumins\">Follow me on twitter for updates</a>.</p>
<p><strong>This article was sponsored by:</strong></p>
<ul> <li><a href=\"http://www.netfirms.ca/\">Canadian domain names</a> available through Netfirms.ca</li>
 <li>Hosting.com offers <a href=\"http://www.hosting.com/dedicatedservershosting/\">Dedicated server hosting</a></li>
 <li>Advanceware's <a href=\"http://www.advanceware.net/\">Inventory management software</a> can help you organize your resources.</li>
 <li>Sherweb provides <a href=\"http://www.sherweb.com/hosted-exchange\">Hosted Exchange</a> solutions for your small business.</li>
</ul>
<p><a href=\"http://www.catonmat.net/feedback/?subject=Interested+in+Sponsoring+Articles\">Contact me</a>, if you wish to sponsor any other of my existing posts or future posts!</p>
<div class=\"feedflare\">
<a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:yIl2AUoC8zA\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?d=yIl2AUoC8zA\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:F7zBnMyn0Lo\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:F7zBnMyn0Lo\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:V_sGLiPBpWU\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:V_sGLiPBpWU\" border=\"0\"></img></a> <a href=\"http://feeds.feedburner.com/~ff/catonmat?a=crt1jT0uPnU:kKpCadsN08A:gIN9vFwOqvQ\"><img src=\"http://feeds.feedburner.com/~ff/catonmat?i=crt1jT0uPnU:kKpCadsN08A:gIN9vFwOqvQ\" border=\"0\"></img></a>
</div><img src=\"http://feeds.feedburner.com/~r/catonmat/~4/crt1jT0uPnU\" height=\"1\" width=\"1\"/>") (feedburner:origLink nil "http://www.catonmat.net/blog/top-ten-one-liners-from-commandlinefu-explained"))))